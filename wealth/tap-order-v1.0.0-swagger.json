{
  "swagger" : "2.0",
  "info" : {
    "version" : "v1.0.0",
    "title" : "Order Enterprise API"
  },
  "basePath" : "/triplea/api/v1.0.0/order",
  "security" : [ {
    "tapBasicAuth" : [ ],
    "X-Channel" : [ ]
  } ],
  "paths" : {
    "/accounts" : {
      "post" : {
        "tags" : [ "Accounts" ],
        "summary" : "Create a new account",
        "operationId" : "createAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createAccountInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createAccountSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createAccountSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/accounts/{code}" : {
      "get" : {
        "tags" : [ "Accounts" ],
        "summary" : "To get  the accounts list",
        "operationId" : "getAccountList",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Most common reference number used for this financial \r\ninstrument e.g. Telekurs Number, Cedel, ISIN, etc.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getAccountListSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Accounts" ],
        "summary" : "Modify details of an account",
        "operationId" : "modifyAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Most common reference number used for this financial \r\ninstrument e.g. Telekurs Number, Cedel, ISIN, etc.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/modifyAccountInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/modifyAccountSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Accounts" ],
        "summary" : "Delete an existing account",
        "operationId" : "deleteAccount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Most common reference number used for this financial \r\ninstrument e.g. Telekurs Number, Cedel, ISIN, etc.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/allocationOrderSessions" : {
      "post" : {
        "tags" : [ "AllocationOrderSessions" ],
        "summary" : "Create Allocation Order Session",
        "operationId" : "createAllocationOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createAllocationOrderInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createAllocationOrderSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createAllocationOrderSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/allocationOrderSessions/{funcResultCode}" : {
      "get" : {
        "tags" : [ "AllocationOrderSessions" ],
        "summary" : "Get Allocation Order Session",
        "operationId" : "getAllocationOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getAllocationOrderSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AllocationOrderSessions" ],
        "summary" : "Modify Allocation Order Session",
        "operationId" : "modifyAllocationOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/modifyAllocationOrderInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/modifyAllocationOrderSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "AllocationOrderSessions" ],
        "summary" : "Delete allocation order Session",
        "operationId" : "deleteAllocationOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/allocationOrderSessions/{funcResultCode}/allocateOrder" : {
      "post" : {
        "tags" : [ "AllocationOrderSessions" ],
        "summary" : "Rune Allocate Order on Allocation Order Session ",
        "operationId" : "allocateOrderSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Parameter that lets you specify the reference code of an order session",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FinFunctionOnOrderSessionPreferences"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/allocateOrderSessionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/allocateOrderSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/allocationRuleDefinitions/{functionResultCode}" : {
      "get" : {
        "tags" : [ "AllocationRuleDefinitions", "Search" ],
        "summary" : "Get Allocation Rule Definitions for the specified order session",
        "operationId" : "searchAllocationRuleDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionResultCode",
          "in" : "path",
          "description" : "Unique technical identifier of the occurrence.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/searchAllocationRuleDefinitionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AllocationRuleDefinitions" ],
        "summary" : "Create Allocation Rule Definition",
        "operationId" : "createAllocationRuleDefinitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionResultCode",
          "in" : "path",
          "description" : "Unique technical identifier of the occurrence.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createAllocationRuleDefinitionsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createAllocationRuleDefinitionsSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createAllocationRuleDefinitionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/allocationRuleDefinitions/{functionResultCode}/{id}" : {
      "get" : {
        "tags" : [ "AllocationRuleDefinitions" ],
        "summary" : "Get Allocation Order Rule Definition",
        "operationId" : "getAllocationRuleDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique technical identifier of an extended strategy element.\r\n\r\nThis attribute is necessary to establish hierarchical links. In fact, in the context of a dynamic list, it is necessary to include one format element with:\r\n- definition = id\r\n- hierarchy nature = parent\r\n\r\nAnother format element is also necessary to properly set up the hierarchical links:\r\n- definition = disp_parent_ext_strat_elem_id\r\n- hierarchical nature = child\r\n\r\nNote that both do not have to be displayed.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "functionResultCode",
          "in" : "path",
          "description" : "Unique technical identifier of the occurrence.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getAllocationRuleDefinitionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "AllocationRuleDefinitions" ],
        "summary" : "Modify Allocation Rule Definition",
        "operationId" : "modifyAllocationRuleDefinitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique technical identifier of an extended strategy element.\r\n\r\nThis attribute is necessary to establish hierarchical links. In fact, in the context of a dynamic list, it is necessary to include one format element with:\r\n- definition = id\r\n- hierarchy nature = parent\r\n\r\nAnother format element is also necessary to properly set up the hierarchical links:\r\n- definition = disp_parent_ext_strat_elem_id\r\n- hierarchical nature = child\r\n\r\nNote that both do not have to be displayed.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "functionResultCode",
          "in" : "path",
          "description" : "Unique technical identifier of the occurrence.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/modifyAllocationRuleDefinitionsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/modifyAllocationRuleDefinitionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "AllocationRuleDefinitions" ],
        "summary" : "Delete allocation rule definition",
        "operationId" : "deleteAllocationRuleDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique technical identifier of an extended strategy element.\r\n\r\nThis attribute is necessary to establish hierarchical links. In fact, in the context of a dynamic list, it is necessary to include one format element with:\r\n- definition = id\r\n- hierarchy nature = parent\r\n\r\nAnother format element is also necessary to properly set up the hierarchical links:\r\n- definition = disp_parent_ext_strat_elem_id\r\n- hierarchical nature = child\r\n\r\nNote that both do not have to be displayed.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "functionResultCode",
          "in" : "path",
          "description" : "Unique technical identifier of the occurrence.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/caseClarifications" : {
      "post" : {
        "tags" : [ "CaseClarifications" ],
        "summary" : "Create case clarification",
        "operationId" : "createCaseClarification",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createCaseClarificationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCaseClarificationSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCaseClarificationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/caseClarifications/{caseCode}" : {
      "get" : {
        "tags" : [ "CaseClarifications" ],
        "summary" : "Get Case Clarification",
        "operationId" : "getCaseClarification",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "caseCode",
          "in" : "path",
          "description" : "Case's identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCaseClarificationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CaseClarifications" ],
        "summary" : "Modify Case Clarification",
        "operationId" : "modifyCaseClarification",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "caseCode",
          "in" : "path",
          "description" : "Case's identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/modifyCaseClarificationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/modifyCaseClarificationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CaseClarifications" ],
        "summary" : "Delete Case Clarification",
        "operationId" : "deleteCaseClarification",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "caseCode",
          "in" : "path",
          "description" : "Case's identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/caseManagements" : {
      "post" : {
        "tags" : [ "CaseManagements" ],
        "summary" : "Create Case Management",
        "operationId" : "createCaseManagement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createCaseManagementInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCaseManagementSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCaseManagementSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/caseManagements/{code}" : {
      "get" : {
        "tags" : [ "CaseManagements" ],
        "summary" : "Get Case Management",
        "operationId" : "getCaseManagement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Case's code.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCaseManagementSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CaseManagements" ],
        "summary" : "Modify Case Management",
        "operationId" : "modifyCaseManagement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Case's code.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/modifyCaseManagementInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/modifyCaseManagementSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CaseManagements" ],
        "summary" : "Delete Case Management",
        "operationId" : "deleteCaseManagement",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Case's code.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cases/{funcResultCode}" : {
      "get" : {
        "tags" : [ "Cases" ],
        "summary" : "Get Cases",
        "operationId" : "getCases",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCasesSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cashTransfers" : {
      "post" : {
        "tags" : [ "CashTransfers" ],
        "summary" : "Create Cash Transfer",
        "operationId" : "createCashTransfer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createCashTransferInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCashTransferSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCashTransferSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/cashTransfers/{code}" : {
      "get" : {
        "tags" : [ "CashTransfers" ],
        "summary" : "Get Cash Transfer",
        "operationId" : "getCashTransfer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCashTransferSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CashTransfers" ],
        "summary" : "Modify Cash Transfer",
        "operationId" : "modifyCashTransfer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/modifyCashTransferInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/modifyCashTransferSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CashTransfers" ],
        "summary" : "Delete Cash Transfer",
        "operationId" : "deleteCashTransfer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/corpActionDetails" : {
      "post" : {
        "tags" : [ "CorpActionDetails" ],
        "summary" : "Create Corp Action Details",
        "operationId" : "createCorpActionDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createCorpActionDetailsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCorpActionDetailsSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createCorpActionDetailsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/corpActionDetails/{id}" : {
      "get" : {
        "tags" : [ "CorpActionDetails" ],
        "summary" : "Get Corp Action Details",
        "operationId" : "getCorpActionDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCorpActionDetailsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "CorpActionDetails" ],
        "summary" : "Modify Corp Action Details",
        "operationId" : "modifyCorpActionDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/modifyCorpActionDetailsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/modifyCorpActionDetailsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "CorpActionDetails" ],
        "summary" : "Delete Corp Action Details",
        "operationId" : "deleteCorpActionDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/corporateActions" : {
      "get" : {
        "tags" : [ "CorporateActions", "Search" ],
        "summary" : "Search Corporate Actions",
        "operationId" : "searchCorporateActions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "Reference code.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "codeStartsWith",
          "in" : "query",
          "description" : "Reference code.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "providerCode",
          "in" : "query",
          "description" : "Each notification instance can be linked to one or more objects. For instance a third party.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instrCode",
          "in" : "query",
          "description" : "Reference to the underlying instrument.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/searchCorporateActionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/corporateActions/{corporateActionCode}/details" : {
      "get" : {
        "tags" : [ "CorporateActions", "Search" ],
        "summary" : "Get the details of specified corporate action",
        "operationId" : "getDetailsCorporateActions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "corporateActionCode",
          "in" : "path",
          "description" : "Code of Corporate Action",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getDetailsCorporateActionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/counterParties" : {
      "get" : {
        "tags" : [ "CounterParties", "Search" ],
        "summary" : "Search the  Counter Parties",
        "operationId" : "searchCounterParty",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "Reference given to a third party by the company to\r\nidentify it.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchPattern",
          "in" : "query",
          "description" : "Search on multiple fields, use the vertical search tables.No case sensitive",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/searchCounterPartySuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/counterParties/{code}" : {
      "get" : {
        "tags" : [ "CounterParties" ],
        "summary" : "Get Counter Party",
        "operationId" : "getCounterParty",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Reference given to a third party by the company to\r\nidentify it.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCounterPartySuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/draftOrders/{funcResultCode}" : {
      "post" : {
        "tags" : [ "DraftOrders" ],
        "summary" : "create a DraftOperation in an order session",
        "operationId" : "createDraftOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions).",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createDraftOperationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createDraftOperationSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createDraftOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/draftOrders/{funcResultCode}/{code}" : {
      "get" : {
        "tags" : [ "DraftOrders" ],
        "summary" : "Get a DraftOperation in an order session",
        "operationId" : "getDraftOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions).",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getDraftOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DraftOrders" ],
        "summary" : "update a DraftOperation in an order session",
        "operationId" : "updateDraftOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions).",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateDraftOperationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateDraftOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "DraftOrders" ],
        "summary" : "Delete a DraftOperation in an order session",
        "operationId" : "deleteDraftOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions).",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/externalOperationCashs" : {
      "post" : {
        "tags" : [ "ExternalOperationCashs" ],
        "summary" : "create a  ExternalOperationCash",
        "operationId" : "createExternalOperationCash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createExternalOperationCashInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createExternalOperationCashSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createExternalOperationCashSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/externalOperationCashs/{code}" : {
      "get" : {
        "tags" : [ "ExternalOperationCashs" ],
        "summary" : "Get a ExternalOperationCash",
        "operationId" : "getExternalOperationCash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getExternalOperationCashSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ExternalOperationCashs" ],
        "summary" : "update a ExternalOperationCash",
        "operationId" : "updateExternalOperationCash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateExternalOperationCashInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateExternalOperationCashSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ExternalOperationCashs" ],
        "summary" : "Delete a ExternalOperationCash",
        "operationId" : "deleteExternalOperationCash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/forexOrders" : {
      "post" : {
        "tags" : [ "ForexOrders" ],
        "summary" : "create a  ForexOperation",
        "operationId" : "createForexOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createForexOperationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createForexOperationSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createForexOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/forexOrders/{code}" : {
      "get" : {
        "tags" : [ "ForexOrders" ],
        "summary" : "Get a ForexOperation",
        "operationId" : "getForexOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getForexOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ForexOrders" ],
        "summary" : "update a ForexOperation",
        "operationId" : "updateForexOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateForexOperationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateForexOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "ForexOrders" ],
        "summary" : "Delete a ForexOperation",
        "operationId" : "deleteForexOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/operations" : {
      "post" : {
        "tags" : [ "Operations" ],
        "summary" : "Create Operation",
        "operationId" : "createOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createOperationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOperationSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/operations/{code}" : {
      "get" : {
        "tags" : [ "Operations" ],
        "summary" : "Get Operation",
        "operationId" : "getOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Operations" ],
        "summary" : "Update Operation",
        "operationId" : "updateOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateOperationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateOperationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Operations" ],
        "summary" : "Delete Operation",
        "operationId" : "deleteOperation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderExecutions/{portfolioCode}" : {
      "get" : {
        "tags" : [ "OrderExecutions" ],
        "summary" : "Get OrderExecutions for the given portfolio.",
        "operationId" : "getOrderExecutions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getOrderExecutionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessionComments" : {
      "post" : {
        "tags" : [ "OrderSessionComments" ],
        "summary" : "Create Order Session Comments",
        "operationId" : "createOrderSessionComments",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createOrderSessionCommentsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOrderSessionCommentsSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOrderSessionCommentsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessionComments/{orderSessionId}" : {
      "get" : {
        "tags" : [ "OrderSessionComments" ],
        "summary" : "Get Order Session Comment",
        "operationId" : "getOrderSessionComment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "orderSessionId",
          "in" : "path",
          "description" : "ID of the object on which the comment is based.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getOrderSessionCommentSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "OrderSessionComments" ],
        "summary" : "Update Order Session Comment",
        "operationId" : "updateOrderSessionComment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orderSessionId",
          "in" : "path",
          "description" : "ID of the object on which the comment is based.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateOrderSessionCommentInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateOrderSessionCommentSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "OrderSessionComments" ],
        "summary" : "Delete Order Session Comment",
        "operationId" : "deleteOrderSessionComment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "orderSessionId",
          "in" : "path",
          "description" : "ID of the object on which the comment is based.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions" : {
      "post" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Create Order Session",
        "operationId" : "createOrderSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createOrderSessionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOrderSessionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOrderSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions/initiateOrder" : {
      "post" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Create an Order Session with the Draft Order initialized",
        "operationId" : "initiateOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "type" : "object",
            "properties" : {
              "initiateBuyOperation" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/definitions/InitiateBuyOperation"
                }
              },
              "initiateSellOperation" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/definitions/InitiateSellOperation"
                }
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/initiateOrderSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/initiateOrderSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions/{funcResultCode}" : {
      "get" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Get Order Session",
        "operationId" : "getOrderSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getOrderSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Update Order Session",
        "operationId" : "updateOrderSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateOrderSessionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateOrderSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Delete Order Session",
        "operationId" : "deleteOrderSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions/{funcResultCode}/draftOrders" : {
      "get" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Get list DraftOrders from the order session",
        "operationId" : "getDraftOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getDraftOrdersSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions/{funcResultCode}/ptcc" : {
      "post" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Pre-Trade Compliance Checking on Session Draft Order",
        "operationId" : "ptccSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Parameter that lets you specify the reference code of an order session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ptccSessionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ptccSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions/{funcResultCode}/publish" : {
      "post" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Publish Session Draft Order",
        "operationId" : "publishSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "code of the session (func_result_code of domain)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/publishSessionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/publishSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions/{funcResultCode}/rebalancing" : {
      "post" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Rebalancing Session Draft Order",
        "operationId" : "rebalancingSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Parameter that lets you specify the reference code of an order session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/rebalancingSessionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/rebalancingSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orderSessions/{funcResultCode}/verify" : {
      "post" : {
        "tags" : [ "OrderSessions" ],
        "summary" : "Verify Session Draft Order",
        "operationId" : "verifySession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Parameter that lets you specify the reference code of an order session",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/verifySessionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/verifySessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Create Order",
        "operationId" : "createOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createOrderInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOrderSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createOrderSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders/cancelDMAOrders" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Cancel DMA Orders",
        "operationId" : "cancelDMAOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UpdateFieldOrderInput"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelDMAOrdersSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelDMAOrdersSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders/cancelIPOSubscriptions" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Cancel IPO Subscriptions",
        "operationId" : "cancelIPOSubscriptions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UpdateFieldOrderInput"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelIPOSubscriptionsSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelIPOSubscriptionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders/cancelNDMAOrders" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Cancel NDMA Orders",
        "operationId" : "cancelNDMAOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UpdateFieldOrderInput"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelNDMAOrdersSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelNDMAOrdersSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders/cancelPESubscriptions" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Cancel PE Subscriptions",
        "operationId" : "cancelPESubscriptions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UpdateFieldOrderInput"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelPESubscriptionsSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelPESubscriptionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders/cancelPendingTransfers" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Cancel Pending Transfers",
        "operationId" : "cancelPendingTransfers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UpdateFieldOrderInput"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelPendingTransfersSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/cancelPendingTransfersSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders/validatePendingOrders" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Validate Pending Orders",
        "operationId" : "validatePendingOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UpdateFieldOrderInput"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/validatePendingOrdersSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/validatePendingOrdersSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/orders/{orderCode}" : {
      "get" : {
        "tags" : [ "Orders" ],
        "summary" : "Get Order",
        "operationId" : "getOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "orderCode",
          "in" : "path",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getOrderSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Orders" ],
        "summary" : "Update Order Code",
        "operationId" : "updateOrderCode",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "orderCode",
          "in" : "path",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateOrderCodeInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateOrderCodeSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Orders" ],
        "summary" : "Delete Order",
        "operationId" : "deleteOrder",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "orderCode",
          "in" : "path",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/payInstructions" : {
      "post" : {
        "tags" : [ "PayInstructions" ],
        "summary" : "create a  PayInstructions",
        "operationId" : "createPayInstructions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createPayInstructionsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPayInstructionsSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPayInstructionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/payInstructions/{portfolioCode}/{accInstrCode}/{currencyCode}" : {
      "get" : {
        "tags" : [ "PayInstructions" ],
        "summary" : "Get a PayInstructions",
        "operationId" : "getPayInstructions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "Reference to the Portfolio associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accInstrCode",
          "in" : "path",
          "description" : "Reference to the Account (instrument) associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "currencyCode",
          "in" : "path",
          "description" : "Reference to the Currency associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPayInstructionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "PayInstructions" ],
        "summary" : "update a PayInstructions",
        "operationId" : "updatePayInstructions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "Reference to the Portfolio associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accInstrCode",
          "in" : "path",
          "description" : "Reference to the Account (instrument) associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "currencyCode",
          "in" : "path",
          "description" : "Reference to the Currency associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updatePayInstructionsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updatePayInstructionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "PayInstructions" ],
        "summary" : "Delete a PayInstructions",
        "operationId" : "deletePayInstructions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "Reference to the Portfolio associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "accInstrCode",
          "in" : "path",
          "description" : "Reference to the Account (instrument) associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "currencyCode",
          "in" : "path",
          "description" : "Reference to the Currency associated to the Payment Instruction.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/pendingOrderDetails/{orderId}" : {
      "get" : {
        "tags" : [ "PendingOrderDetails" ],
        "summary" : "Get a pending order details",
        "operationId" : "getPendingOrderDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPendingOrderDetailsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/pendingOrders/{portfolioCode}" : {
      "get" : {
        "tags" : [ "PendingOrders" ],
        "summary" : "Get PendingOrders for the given portolio",
        "operationId" : "getPendingOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPendingOrdersSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/rebalanceOrderSessions" : {
      "post" : {
        "tags" : [ "RebalanceOrderSessions" ],
        "summary" : "create a  Rebalancing Order Sessions",
        "operationId" : "createRebalanceOrderSessions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createRebalanceOrderSessionsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createRebalanceOrderSessionsSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createRebalanceOrderSessionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/rebalanceOrderSessions/{funcResultCode}" : {
      "get" : {
        "tags" : [ "RebalanceOrderSessions" ],
        "summary" : "Get a RebalanceOrderSessions",
        "operationId" : "getRebalanceOrderSessions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getRebalanceOrderSessionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "RebalanceOrderSessions" ],
        "summary" : "update a RebalanceOrderSessions",
        "operationId" : "updateRebalanceOrderSessions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateRebalanceOrderSessionsInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateRebalanceOrderSessionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "RebalanceOrderSessions" ],
        "summary" : "Delete a RebalanceOrderSessions",
        "operationId" : "deleteRebalanceOrderSessions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/simulatedTaxLotPickings" : {
      "post" : {
        "tags" : [ "SimulatedTaxLotPickings" ],
        "summary" : "create a  SimulatedTaxLotPicking",
        "operationId" : "createSimulatedTaxLotPicking",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createSimulatedTaxLotPickingInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createSimulatedTaxLotPickingSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createSimulatedTaxLotPickingSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/simulatedTaxLotPickings/{id}" : {
      "get" : {
        "tags" : [ "SimulatedTaxLotPickings" ],
        "summary" : "Get a SimulatedTaxLotPicking",
        "operationId" : "getSimulatedTaxLotPicking",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getSimulatedTaxLotPickingSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "SimulatedTaxLotPickings" ],
        "summary" : "update a SimulatedTaxLotPicking",
        "operationId" : "updateSimulatedTaxLotPicking",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateSimulatedTaxLotPickingInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateSimulatedTaxLotPickingSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "SimulatedTaxLotPickings" ],
        "summary" : "Delete a SimulatedTaxLotPicking",
        "operationId" : "deleteSimulatedTaxLotPicking",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/systematicPlanOrders/{funcResultCode}" : {
      "get" : {
        "tags" : [ "SystematicPlanOrders" ],
        "summary" : "Get SystematicPlanOrders",
        "operationId" : "getSystematicPlanOrders",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getSystematicPlanOrdersSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/withdrawals/{orderSessionCode}/startWithdrawal" : {
      "post" : {
        "tags" : [ "Withdrawals" ],
        "summary" : "Start a withdrawal request",
        "operationId" : "startWithdrawal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "orderSessionCode",
          "in" : "path",
          "description" : "Order Session Code",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/StartWithdrawalInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/startWithdrawalSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/startWithdrawalSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/withdrawals/{portfolioCode}/initiateFullLiquidation" : {
      "post" : {
        "tags" : [ "Withdrawals" ],
        "summary" : "Initiate a Full Portfolio Liquidation",
        "operationId" : "initiateFullLiquidation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "Portfolio Code",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InitiateFullLiquidationInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/initiateFullLiquidationSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/initiateFullLiquidationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/withdrawals/{portfolioCode}/initiateWithdrawal" : {
      "post" : {
        "tags" : [ "Withdrawals" ],
        "summary" : "Initiate a withdrawal",
        "operationId" : "initiateWithdrawal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "Portfolio Code",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InitiateWithdrawalInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/initiateWithdrawalSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/initiateWithdrawalSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/withdrawals/{withdrawalRequestId}/startFullLiquidation" : {
      "post" : {
        "tags" : [ "Withdrawals" ],
        "summary" : "Start a Full Portfolio Liquidation",
        "operationId" : "startFullLiquidation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "withdrawalRequestId",
          "in" : "path",
          "description" : "id of withdrawal request to start",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/startFullLiquidationSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/startFullLiquidationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "tapBasicAuth" : {
      "description" : "Tap Basic Authentication",
      "type" : "basic"
    },
    "X-Channel" : {
      "description" : "name of Channel",
      "type" : "apiKey",
      "name" : "X-Channel",
      "in" : "header"
    }
  },
  "definitions" : {
    "Account" : {
      "type" : "object",
      "required" : [ "code", "natureE", "portfolioCode", "refCurrCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Most common reference number used for this financial \r\ninstrument e.g. Telekurs Number, Cedel, ISIN, etc."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Specifies the nature of the instrument. A mandatory hard-coded classifying attribute for distinctive processing.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Specifies the portfolio to which a cash account belongs."
        },
        "refCurrCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the instrument. For bond-like instruments, this is the currency of the principal."
        }
      }
    },
    "AccountWithPermValues" : {
      "type" : "object",
      "required" : [ "code", "natureE", "portfolioCode", "refCurrCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Most common reference number used for this financial \r\ninstrument e.g. Telekurs Number, Cedel, ISIN, etc."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Specifies the nature of the instrument. A mandatory hard-coded classifying attribute for distinctive processing.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Specifies the portfolio to which a cash account belongs."
        },
        "refCurrCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the instrument. For bond-like instruments, this is the currency of the principal."
        }
      }
    },
    "AllocationOrderSessions" : {
      "type" : "object",
      "required" : [ "compDataE", "currencyCode", "funcResultStatusE", "genGlobalOrderE", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "portfolioDimPortfolioCode", "portfolioListCode", "qtyAllocNatE", "sessionStatusE", "typeCode" ],
      "properties" : {
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "compDataE" : {
          "type" : "string",
          "description" : "This field is used in the Allocate Order, Benchmark Storage, Book Adjustment, Check Strategy, Portfolio Storage, Return Analysis, Strategy Reconciliation, Synthetic Administration, Order Entry and Valuation Storage functions. For all the other financial functions this value is restricted to \"On-Line\".",
          "enum" : [ "On-line", "Compute New", "Replace Old", "Use", "Delete", "Delete All", "View", "Simulate", "New, Permanent", "New, Non-permanent", "Replace, Permanent", "Replace, Non-permanent", "Compute New - Synth Admin", "Replace Old - Synth Admin", "Compute - History", "Delete - Perf Attrib", "Delete - Return Analysis", "Delete - Standard Perf", "On-Line Mkt-Value P&L", "Append", "Include Orders", "Insure Valid by Update", "Insure Valid by Online", "Use Stored If Not Online", "Replace Existing", "No compute", "Sum & Save Strategy" ]
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "portfolioDimPortfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "AllocationOrderSessionsWithPermValues" : {
      "type" : "object",
      "required" : [ "compDataE", "currencyCode", "funcResultStatusE", "genGlobalOrderE", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "portfolioDimPortfolioCode", "portfolioListCode", "qtyAllocNatE", "sessionStatusE", "typeCode" ],
      "properties" : {
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "compDataE" : {
          "type" : "string",
          "description" : "This field is used in the Allocate Order, Benchmark Storage, Book Adjustment, Check Strategy, Portfolio Storage, Return Analysis, Strategy Reconciliation, Synthetic Administration, Order Entry and Valuation Storage functions. For all the other financial functions this value is restricted to \"On-Line\".",
          "enum" : [ "On-line", "Compute New", "Replace Old", "Use", "Delete", "Delete All", "View", "Simulate", "New, Permanent", "New, Non-permanent", "Replace, Permanent", "Replace, Non-permanent", "Compute New - Synth Admin", "Replace Old - Synth Admin", "Compute - History", "Delete - Perf Attrib", "Delete - Return Analysis", "Delete - Standard Perf", "On-Line Mkt-Value P&L", "Append", "Include Orders", "Insure Valid by Update", "Insure Valid by Online", "Use Stored If Not Online", "Replace Existing", "No compute", "Sum & Save Strategy" ]
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "portfolioDimPortfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "AllocationRuleDefinition" : {
      "type" : "object",
      "required" : [ "actualOrderNatE", "instrCode", "opNatE", "portfolioCode", "stratNatE", "targetNatureE" ],
      "properties" : {
        "actualOrderNatE" : {
          "type" : "string",
          "description" : "Indicates the order nature assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nParent attribute is order_nat_e attribute in the operation entity.\r\n\r\nA large number of permitted values with user-defined labels (dict_perm_val_dat.usr.sql) is allowed.\r\n\r\nIn the standard packaging, the following natures are defined:\r\n- 0 = <None>\r\n- 1 = Market\r\n- 2 = Limit\r\n- 3 = Stop\r\n- 4 = Stop Limit",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of an extended strategy element.\r\n\r\nThis attribute is necessary to establish hierarchical links. In fact, in the context of a dynamic list, it is necessary to include one format element with:\r\n- definition = id\r\n- hierarchy nature = parent\r\n\r\nAnother format element is also necessary to properly set up the hierarchical links:\r\n- definition = disp_parent_ext_strat_elem_id\r\n- hierarchical nature = child\r\n\r\nNote that both do not have to be displayed."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "instrId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "maxWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the maximum weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., maximum weight) correspond to a percentage of the market value of the parent market segment. The maximum weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': maximum weight 50%.\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20% \r\n- Market Segment 'Finance': maximum weight contribution 20*50% = 10%"
        },
        "minOrderQuantityN" : {
          "type" : "number",
          "description" : "Manages the ability to set a minimum order quantity in the Allocate Order domain (i.e., Order Details screen)."
        },
        "objQtyN" : {
          "type" : "number",
          "description" : "Specifies the quantity to hold in order to be in line with the objective weights linked to the portfolio."
        },
        "objWeightContMargN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight. It is possible to indicate a fluctuation margin. \r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a pecentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies :\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20%, margin 5%\r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': objective weight 50%, margin 5%\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20%, objective weight contribution margin 100%*5% = 5%\r\n- Market Segment 'Finance': objective weight contribution 20*50% = 10%, objective weight contribution margin 20%*5% = 1%"
        },
        "objWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nExample:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Market Segment 'Finance': objective weight 50%.\r\n\r\nThe above hierarchy of strategies will lead to the following weights:\r\nMarket Segment 'Stock / USD': objective weight contribution 100%*20% = 20%\r\nMarket Segment 'Finance': objective weight contribution 20*50% = 10%"
        },
        "objWeightN" : {
          "type" : "number",
          "description" : "Indicates the target set in the \"strategy element\".\r\n\r\nUsers can define investment targets within a strategy element. The investment targets that can be assigned include the percentage weight."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Permits the ability to characterise different natures of operations.",
          "enum" : [ "Buy", "Sell" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the order limit date that is assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nWhen an order is limited in time, the valuation should not consider these positions if the limit date is not in position anymore."
        },
        "orderQtyN" : {
          "type" : "number",
          "description" : "Indicates the quantity to buy or sell as suggested by the system in order to be in line with the corresponding objective weight (taking into account the round lot quantity of the instrument)."
        },
        "orderQuoteN" : {
          "type" : "number",
          "description" : "The role played by this field depends on the context. In the Order Details screen of the Allocate Order domain, it is the limit date assigned to an order. In the extended strategy element structure returned by both Allocate Order and Strategy Reconciliation, it is the quote used to compute the order gross amount and is fed as follows :\r\n- Market quote if order nature = Market order\r\n- Limit quote if order nature = Limit\r\n- Stop quote if order nature = Stop (Market)\r\n- Limit quote if order nature = Stop-Limit\r\n\r\nThe idea is that the order gross amount gives the maximum exposure of the position.\r\nNote that the quote in buy/sell_operation entity is equal to the order_quote (extended strategy element entity)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of a portfolio."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote assigned to an order, specified when entering an order in the Allocate Order domain (i.e., Order Details screen)."
        },
        "stratNatE" : {
          "type" : "string",
          "description" : "Indicates the nature of the strategy that is at the origin of the occurrence in strategy_element.",
          "enum" : [ "Asset Allocation", "Model Portfolio", "Recommendation List", "Constraint Set", "Index", "Currency Allocation", "Global Order Quantity", "Instr Order Quantity", "Instr Result Quantity", "Instr Order Portfolio %", "Instr Result Portfolio %", "Market Seg Result Portfolio %", "Switch Instrument", "Cash Result Portfolio %", "Currency Hedge", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Weighted Switch Instrument", "Trading Constraint", "Allocation Constraint", "Security Constraint", "Investment profile", "Benchmark", "Surveyed Securities List", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Composite", "Instr. Res. % of Strat Mkt Sgt", "Risk Strategy" ]
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is only used in the Web standard packaging for defining whether an order is in amount or in quantity.",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        }
      }
    },
    "AllocationRuleDefinitionWithPermValues" : {
      "type" : "object",
      "required" : [ "actualOrderNatE", "instrCode", "opNatE", "portfolioCode", "stratNatE", "targetNatureE" ],
      "properties" : {
        "actualOrderNatE" : {
          "type" : "string",
          "description" : "Indicates the order nature assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nParent attribute is order_nat_e attribute in the operation entity.\r\n\r\nA large number of permitted values with user-defined labels (dict_perm_val_dat.usr.sql) is allowed.\r\n\r\nIn the standard packaging, the following natures are defined:\r\n- 0 = <None>\r\n- 1 = Market\r\n- 2 = Limit\r\n- 3 = Stop\r\n- 4 = Stop Limit",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of an extended strategy element.\r\n\r\nThis attribute is necessary to establish hierarchical links. In fact, in the context of a dynamic list, it is necessary to include one format element with:\r\n- definition = id\r\n- hierarchy nature = parent\r\n\r\nAnother format element is also necessary to properly set up the hierarchical links:\r\n- definition = disp_parent_ext_strat_elem_id\r\n- hierarchical nature = child\r\n\r\nNote that both do not have to be displayed."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "instrId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "maxWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the maximum weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., maximum weight) correspond to a percentage of the market value of the parent market segment. The maximum weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': maximum weight 50%.\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20% \r\n- Market Segment 'Finance': maximum weight contribution 20*50% = 10%"
        },
        "minOrderQuantityN" : {
          "type" : "number",
          "description" : "Manages the ability to set a minimum order quantity in the Allocate Order domain (i.e., Order Details screen)."
        },
        "objQtyN" : {
          "type" : "number",
          "description" : "Specifies the quantity to hold in order to be in line with the objective weights linked to the portfolio."
        },
        "objWeightContMargN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight. It is possible to indicate a fluctuation margin. \r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a pecentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies :\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20%, margin 5%\r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': objective weight 50%, margin 5%\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20%, objective weight contribution margin 100%*5% = 5%\r\n- Market Segment 'Finance': objective weight contribution 20*50% = 10%, objective weight contribution margin 20%*5% = 1%"
        },
        "objWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nExample:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Market Segment 'Finance': objective weight 50%.\r\n\r\nThe above hierarchy of strategies will lead to the following weights:\r\nMarket Segment 'Stock / USD': objective weight contribution 100%*20% = 20%\r\nMarket Segment 'Finance': objective weight contribution 20*50% = 10%"
        },
        "objWeightN" : {
          "type" : "number",
          "description" : "Indicates the target set in the \"strategy element\".\r\n\r\nUsers can define investment targets within a strategy element. The investment targets that can be assigned include the percentage weight."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Permits the ability to characterise different natures of operations.",
          "enum" : [ "Buy", "Sell" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the order limit date that is assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nWhen an order is limited in time, the valuation should not consider these positions if the limit date is not in position anymore."
        },
        "orderQtyN" : {
          "type" : "number",
          "description" : "Indicates the quantity to buy or sell as suggested by the system in order to be in line with the corresponding objective weight (taking into account the round lot quantity of the instrument)."
        },
        "orderQuoteN" : {
          "type" : "number",
          "description" : "The role played by this field depends on the context. In the Order Details screen of the Allocate Order domain, it is the limit date assigned to an order. In the extended strategy element structure returned by both Allocate Order and Strategy Reconciliation, it is the quote used to compute the order gross amount and is fed as follows :\r\n- Market quote if order nature = Market order\r\n- Limit quote if order nature = Limit\r\n- Stop quote if order nature = Stop (Market)\r\n- Limit quote if order nature = Stop-Limit\r\n\r\nThe idea is that the order gross amount gives the maximum exposure of the position.\r\nNote that the quote in buy/sell_operation entity is equal to the order_quote (extended strategy element entity)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of a portfolio."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote assigned to an order, specified when entering an order in the Allocate Order domain (i.e., Order Details screen)."
        },
        "stratNatE" : {
          "type" : "string",
          "description" : "Indicates the nature of the strategy that is at the origin of the occurrence in strategy_element.",
          "enum" : [ "Asset Allocation", "Model Portfolio", "Recommendation List", "Constraint Set", "Index", "Currency Allocation", "Global Order Quantity", "Instr Order Quantity", "Instr Result Quantity", "Instr Order Portfolio %", "Instr Result Portfolio %", "Market Seg Result Portfolio %", "Switch Instrument", "Cash Result Portfolio %", "Currency Hedge", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Weighted Switch Instrument", "Trading Constraint", "Allocation Constraint", "Security Constraint", "Investment profile", "Benchmark", "Surveyed Securities List", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Composite", "Instr. Res. % of Strat Mkt Sgt", "Risk Strategy" ]
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is only used in the Web standard packaging for defining whether an order is in amount or in quantity.",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        }
      }
    },
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "level" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string",
          "enum" : [ "WARNING", "ERROR", "INFO" ]
        }
      },
      "title" : "ApiResponse"
    },
    "Audit" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "string"
        },
        "endTime" : {
          "type" : "string"
        },
        "totalTime" : {
          "type" : "string"
        },
        "processTime" : {
          "type" : "string"
        },
        "scriptTime" : {
          "type" : "string"
        },
        "otherTime" : {
          "type" : "string"
        }
      },
      "title" : "Audit"
    },
    "CaseClarificationAll" : {
      "type" : "object",
      "required" : [ "caseCode", "code", "reasonC" ],
      "properties" : {
        "caseCode" : {
          "type" : "string",
          "description" : "Case's identifier"
        },
        "code" : {
          "type" : "string",
          "description" : "Clarification's code"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "reasonC" : {
          "type" : "string",
          "description" : "Free text zone where Users can explain / give clarification to Case.\r\nThis zone could store until 2 000 characters."
        }
      }
    },
    "CaseClarificationAllWithPermValues" : {
      "type" : "object",
      "required" : [ "caseCode", "code", "reasonC" ],
      "properties" : {
        "caseCode" : {
          "type" : "string",
          "description" : "Case's identifier"
        },
        "code" : {
          "type" : "string",
          "description" : "Clarification's code"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "reasonC" : {
          "type" : "string",
          "description" : "Free text zone where Users can explain / give clarification to Case.\r\nThis zone could store until 2 000 characters."
        }
      }
    },
    "CaseManagementAll" : {
      "type" : "object",
      "required" : [ "code", "criticalnessE", "mainObject", "natureE", "rightToRunF", "statusE", "subNatE" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Case's code."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date / Time on which the Case has been created."
        },
        "criticalnessE" : {
          "type" : "string",
          "description" : "This attribute returns the severity set at Strategy & Constraint level.\r\nThe severity is checked regarding the value of system parameters:\r\n1. SESSION_BLOCK_CRITICALNESS: \r\nthe case's severity could block the Order Session (criticalness' value > system parameter's one).\r\n2. STRAT_BLOCKCONSTR_CRITICALNESS: \r\nthe case's severity determines what are Cases that must be clarified.",
          "enum" : [ "<None>", "Not Critical", "Low", "Medium", "High" ]
        },
        "descriptionC" : {
          "type" : "string",
          "description" : "In order to inform or warn Users efficiently, Cases are generated with a description. This caseâ€™s description is based on templates that are managed via the menu Case Message Template."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "mainObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Technical identifier of the main object"
        },
        "natureE" : {
          "type" : "string",
          "description" : "The Case's Nature is directly linked with constraints's family that could be defined into Triple'A:",
          "enum" : [ "<None>", "Strategy", "Trading Holding Constraint", "Modelling Constraint", "Risk", "Input Control", "Lombard", "Buying Power" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "It is used to set conditions on selected lines in a financial function result. \r\nThe evaluated script will only enable the use of the function for a selected line if the result is '1'."
        },
        "statusE" : {
          "type" : "string",
          "description" : "It gives the Case's status:",
          "enum" : [ "Not Clarified", "Clarified" ]
        },
        "subNatE" : {
          "type" : "string",
          "description" : "There is a one-to-one relationship between Case's sub-nature and Strategy objectives & Constraints.\r\nSub-Natures are:",
          "enum" : [ "<None>", "Allocation", "Model Portfolio", "Trading Constraint", "Holding Constraint", "Security In", "Security Out", "Allocation Constraint", "Modelling Trading Constraint", "VaR Percent", "Volatility Percent", "Tracking Error Percent", "Expected Shortfall Percent", "Diversification Effect Percent", "Marginal VaR Percent", "VaR Amount", "Expected Shortfall Amount", "Marginal VaR Amount", "Diversification Effect Amount", "Risk Grade", "Volatility Amount", "Tracking Error Amount", "Shortfall Probability Percent", "Shortfall Probability Amount", "Session IC Status", "Order Input Control", "Marg. Volatility Percent", "Marg. Volatility Amount", "Marg. Tracking Error Percent", "Marg. Tracking Error Amount", "Marg. Expected Shortfall Percent", "Marg. Expected Shortfall Amount", "EVaR Percent", "EVaR Amount", "Marginal EVaR Percent", "Marginal EVaR Amount", "TVaR Percent", "TVaR Amount", "Marginal TVaR Percent", "Marginal TVaR Amount", "Beta", "Super Hedging Price", "Information Ratio", "Sharpe Ratio", "Treynor Ratio", "Jensen's Alpha", "Expected Return Percent", "Expected Return Amount", "Lombard Surplus", "Lombard Deficit", "Lombard Lombard Tech. Error", "Risk Level", "Product Risk Class", "Buying power order amount", "Buying power allowed quantity", "Buying power Tech. Error", "Buying Power condition not met" ]
        }
      }
    },
    "CaseManagementAllWithPermValues" : {
      "type" : "object",
      "required" : [ "code", "criticalnessE", "mainObject", "natureE", "rightToRunF", "statusE", "subNatE" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Case's code."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date / Time on which the Case has been created."
        },
        "criticalnessE" : {
          "type" : "string",
          "description" : "This attribute returns the severity set at Strategy & Constraint level.\r\nThe severity is checked regarding the value of system parameters:\r\n1. SESSION_BLOCK_CRITICALNESS: \r\nthe case's severity could block the Order Session (criticalness' value > system parameter's one).\r\n2. STRAT_BLOCKCONSTR_CRITICALNESS: \r\nthe case's severity determines what are Cases that must be clarified.",
          "enum" : [ "<None>", "Not Critical", "Low", "Medium", "High" ]
        },
        "descriptionC" : {
          "type" : "string",
          "description" : "In order to inform or warn Users efficiently, Cases are generated with a description. This caseâ€™s description is based on templates that are managed via the menu Case Message Template."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "mainObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Technical identifier of the main object"
        },
        "natureE" : {
          "type" : "string",
          "description" : "The Case's Nature is directly linked with constraints's family that could be defined into Triple'A:",
          "enum" : [ "<None>", "Strategy", "Trading Holding Constraint", "Modelling Constraint", "Risk", "Input Control", "Lombard", "Buying Power" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "It is used to set conditions on selected lines in a financial function result. \r\nThe evaluated script will only enable the use of the function for a selected line if the result is '1'."
        },
        "statusE" : {
          "type" : "string",
          "description" : "It gives the Case's status:",
          "enum" : [ "Not Clarified", "Clarified" ]
        },
        "subNatE" : {
          "type" : "string",
          "description" : "There is a one-to-one relationship between Case's sub-nature and Strategy objectives & Constraints.\r\nSub-Natures are:",
          "enum" : [ "<None>", "Allocation", "Model Portfolio", "Trading Constraint", "Holding Constraint", "Security In", "Security Out", "Allocation Constraint", "Modelling Trading Constraint", "VaR Percent", "Volatility Percent", "Tracking Error Percent", "Expected Shortfall Percent", "Diversification Effect Percent", "Marginal VaR Percent", "VaR Amount", "Expected Shortfall Amount", "Marginal VaR Amount", "Diversification Effect Amount", "Risk Grade", "Volatility Amount", "Tracking Error Amount", "Shortfall Probability Percent", "Shortfall Probability Amount", "Session IC Status", "Order Input Control", "Marg. Volatility Percent", "Marg. Volatility Amount", "Marg. Tracking Error Percent", "Marg. Tracking Error Amount", "Marg. Expected Shortfall Percent", "Marg. Expected Shortfall Amount", "EVaR Percent", "EVaR Amount", "Marginal EVaR Percent", "Marginal EVaR Amount", "TVaR Percent", "TVaR Amount", "Marginal TVaR Percent", "Marginal TVaR Amount", "Beta", "Super Hedging Price", "Information Ratio", "Sharpe Ratio", "Treynor Ratio", "Jensen's Alpha", "Expected Return Percent", "Expected Return Amount", "Lombard Surplus", "Lombard Deficit", "Lombard Lombard Tech. Error", "Risk Level", "Product Risk Class", "Buying power order amount", "Buying power allowed quantity", "Buying power Tech. Error", "Buying Power condition not met" ]
        }
      }
    },
    "CashTransfer" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "confirmF", "contractLengthUnitE", "dbStatusE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "CashTransferWithPermValues" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "confirmF", "contractLengthUnitE", "dbStatusE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "targetNatureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute targetNatureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "CorpActionDetail" : {
      "type" : "object",
      "required" : [ "corporateActionId", "issueTypeE", "seqNumber" ],
      "properties" : {
        "corporateActionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of the corporate action."
        },
        "firstDealingD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "First dealing date: Date at which the trading of new securities begins."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "ipoLotSizeN" : {
          "type" : "number",
          "description" : "The minimum number of shares that can be bid. Shares can only be bid in multiples of the lot size."
        },
        "issueTypeE" : {
          "type" : "string",
          "description" : "IPO Issue Type-Describes the way in which the final IPO subscription price will be determined",
          "enum" : [ "<NONE>", "Single Bid", "Book Build" ]
        },
        "maxSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Maximum Subscription Amount in case of a book building IPO."
        },
        "maxSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Maximum Subscription Price in case of a book building IPO."
        },
        "minInitSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for initial subscription."
        },
        "minSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for the subscription."
        },
        "minSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Minimum Subscription Price in case of a book building IPO."
        },
        "paymentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Payment date: Date at which securities/cash will be paid."
        },
        "refundD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Refund, in case of unsuccessful allotments, will be processed on this date."
        },
        "responseDeadlineD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date that the account servicer has set as the deadline to respond with instructions to an outstanding offer or privilege."
        },
        "seqNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of the action."
        },
        "subscriptionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Subscription date: Date at which instructions for a rights subscription will be accepted."
        },
        "subscriptionEndTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "IPO subscription has to be submitted before  this time on the last day of the subscription period."
        },
        "subscriptionPeriodBeginD" : {
          "type" : "string",
          "format" : "date",
          "description" : "Start date of subscription period."
        },
        "subscriptionPeriodEndD" : {
          "type" : "string",
          "format" : "date",
          "description" : "End date of subscription period."
        },
        "subscriptionPriceN" : {
          "type" : "number",
          "description" : "Price at which new securities will be subscribed, e.g. a rights issue."
        }
      }
    },
    "CorpActionDetailWithPermValues" : {
      "type" : "object",
      "required" : [ "corporateActionId", "issueTypeE", "seqNumber" ],
      "properties" : {
        "corporateActionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of the corporate action."
        },
        "firstDealingD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "First dealing date: Date at which the trading of new securities begins."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "ipoLotSizeN" : {
          "type" : "number",
          "description" : "The minimum number of shares that can be bid. Shares can only be bid in multiples of the lot size."
        },
        "issueTypeE" : {
          "type" : "string",
          "description" : "IPO Issue Type-Describes the way in which the final IPO subscription price will be determined",
          "enum" : [ "<NONE>", "Single Bid", "Book Build" ]
        },
        "issueTypeE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute issueTypeE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "maxSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Maximum Subscription Amount in case of a book building IPO."
        },
        "maxSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Maximum Subscription Price in case of a book building IPO."
        },
        "minInitSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for initial subscription."
        },
        "minSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for the subscription."
        },
        "minSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Minimum Subscription Price in case of a book building IPO."
        },
        "paymentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Payment date: Date at which securities/cash will be paid."
        },
        "refundD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Refund, in case of unsuccessful allotments, will be processed on this date."
        },
        "responseDeadlineD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date that the account servicer has set as the deadline to respond with instructions to an outstanding offer or privilege."
        },
        "seqNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of the action."
        },
        "subscriptionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Subscription date: Date at which instructions for a rights subscription will be accepted."
        },
        "subscriptionEndTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "IPO subscription has to be submitted before  this time on the last day of the subscription period."
        },
        "subscriptionPeriodBeginD" : {
          "type" : "string",
          "format" : "date",
          "description" : "Start date of subscription period."
        },
        "subscriptionPeriodEndD" : {
          "type" : "string",
          "format" : "date",
          "description" : "End date of subscription period."
        },
        "subscriptionPriceN" : {
          "type" : "number",
          "description" : "Price at which new securities will be subscribed, e.g. a rights issue."
        }
      }
    },
    "CorporateAction" : {
      "type" : "object",
      "required" : [ "code", "eventTypeCode", "instrCode", "providerCode", "subEventTypeCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Reference code."
        },
        "eventTypeCode" : {
          "type" : "string",
          "description" : "Type of corporate action event to which the message relates."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the underlying instrument."
        },
        "providerCode" : {
          "type" : "string",
          "description" : "Each notification instance can be linked to one or more objects. For instance a third party."
        },
        "subEventTypeCode" : {
          "type" : "string",
          "description" : "Subtype of corporate action event to which the message relates."
        }
      }
    },
    "CounterParty" : {
      "type" : "object",
      "required" : [ "activeF", "code", "intermediaryF", "name" ],
      "properties" : {
        "activeF" : {
          "type" : "boolean",
          "description" : "Describes the state of the Third Party. If a Third Party is inactive, it does not appear on default selection lists."
        },
        "code" : {
          "type" : "string",
          "description" : "Reference given to a third party by the company to\r\nidentify it."
        },
        "extDenomination" : {
          "type" : "string",
          "description" : "Denomination\r\nIt is an extended attribute which cannot be edited by the user but require a data pre-computation (see Triple'A Plus Web TSL Operating Guide).\r\nThis is the denomination of the third party.\r\nDenomination is displayed in user's language, but if it is not available then the default translation is used instead.\r\nThis extended attribute is defined as \"Multilingual\" and requires that some languages are defined as \"Multilingual\" too.\r\n\r\nThis attribute is used only for the Web Packaging."
        },
        "intermediaryF" : {
          "type" : "boolean",
          "description" : "Indicates that this third party will appear on the financial intermediary selection list."
        },
        "name" : {
          "type" : "string",
          "description" : "Short name of the occurrence."
        }
      }
    },
    "DraftOperation" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "opFusionRuleE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opFusionRuleE" : {
          "type" : "string",
          "description" : "This attribute stores the lot consumption rule of the draft order and based on this rule the tax lots to be consumed for an order will be sorted. For example, if the lot consumption rule is FIFO, then the tax lots related to the order that are acquired first would be consumed first and so on.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "DraftOperationWithPermValues" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "opFusionRuleE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bidTypeE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute bidTypeE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "defaultFusRuleE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute defaultFusRuleE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "natureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute natureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opFusionRuleE" : {
          "type" : "string",
          "description" : "This attribute stores the lot consumption rule of the draft order and based on this rule the tax lots to be consumed for an order will be sorted. For example, if the lot consumption rule is FIFO, then the tax lots related to the order that are acquired first would be consumed first and so on.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "opFusionRuleE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute opFusionRuleE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderFeeE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "orderValidityNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderValidityNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "paymentOptionE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute paymentOptionE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "targetNatureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute targetNatureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "ExternalOperationCash" : {
      "type" : "object",
      "required" : [ "code", "natureE", "opCurrencyCode", "orderTypeCode", "portfolioCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        }
      }
    },
    "ExternalOperationCashWithPermValues" : {
      "type" : "object",
      "required" : [ "code", "natureE", "opCurrencyCode", "orderTypeCode", "portfolioCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        }
      }
    },
    "FinFunctionOnOrderSessionPreferences" : {
      "type" : "object",
      "properties" : {
        "functionDictProcName" : {
          "type" : "string",
          "description" : "Proc Name Of Function"
        }
      }
    },
    "ForexOperation" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "ForexOperationWithPermValues" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "natureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute natureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "targetNatureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute targetNatureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "HeaderCreateResponse" : {
      "type" : "object",
      "properties" : {
        "Audit" : {
          "$ref" : "#/definitions/Audit"
        },
        "messages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MessageResponse"
          }
        },
        "interactiveToken" : {
          "type" : "string",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only ."
        }
      },
      "title" : "HeaderCreateResponse"
    },
    "HeaderListResponse" : {
      "type" : "object",
      "properties" : {
        "Pagination" : {
          "$ref" : "#/definitions/Pagination"
        },
        "Audit" : {
          "$ref" : "#/definitions/Audit"
        }
      },
      "title" : "HeaderListResponse"
    },
    "HeaderResponse" : {
      "type" : "object",
      "properties" : {
        "Audit" : {
          "$ref" : "#/definitions/Audit"
        },
        "messages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MessageResponse"
          }
        }
      },
      "title" : "HeaderResponse"
    },
    "InitiateBuyOperation" : {
      "type" : "object",
      "properties" : {
        "DIVIDEND_PAYMENT_OPTION" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "IO_DEPOSIT" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of deposit"
        },
        "IO_SUB_POS_NAT" : {
          "type" : "string",
          "description" : "The sub position nature",
          "enum" : [ "<None>" ]
        },
        "IO_SUB_POS_NAT_2" : {
          "type" : "string",
          "description" : "The sub position nature 2",
          "enum" : [ "<None>" ]
        },
        "IO_SUB_POS_NAT_3" : {
          "type" : "string",
          "description" : "The sub position nature 3",
          "enum" : [ "<None>" ]
        },
        "InstrId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of Instrument to buy"
        },
        "Quantity" : {
          "type" : "number",
          "description" : "Quantity to buy"
        },
        "portfolio_id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of portfolio"
        }
      }
    },
    "InitiateFullLiquidationInput" : {
      "type" : "object",
      "required" : [ "counterPortfolioCode", "fullLiquidationMode", "transferAccount", "transferCurrencyCode" ],
      "properties" : {
        "counterPortfolioCode" : {
          "type" : "string",
          "description" : "Counter Portfolio Code"
        },
        "fullLiquidationBehavior" : {
          "type" : "string",
          "description" : "FullLiquidation Behavior",
          "enum" : [ "No Action", "Close Portfolio", "Close Portfolio and Delink Cash Accounts", "Close Portfolio and Cash Accounts" ]
        },
        "fullLiquidationMode" : {
          "type" : "string",
          "description" : "FullLiquidation Mode",
          "enum" : [ "Sell all assets", "Transfer all assets", "Switch Funds" ]
        },
        "transferAccount" : {
          "type" : "string",
          "description" : "Transfer Account"
        },
        "transferCurrencyCode" : {
          "type" : "string",
          "description" : "Transfer Currency Code"
        },
        "withdrawalCurrencyCode" : {
          "type" : "string",
          "description" : "withdrawal Currency Code"
        }
      }
    },
    "InitiateSellOperation" : {
      "type" : "object",
      "properties" : {
        "DIVIDEND_PAYMENT_OPTION" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "IO_DEPOSIT" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of deposit"
        },
        "IO_SUB_POS_NAT" : {
          "type" : "string",
          "description" : "The sub position nature",
          "enum" : [ "<None>" ]
        },
        "IO_SUB_POS_NAT_2" : {
          "type" : "string",
          "description" : "The sub position nature 2",
          "enum" : [ "<None>" ]
        },
        "IO_SUB_POS_NAT_3" : {
          "type" : "string",
          "description" : "The sub position nature 3",
          "enum" : [ "<None>" ]
        },
        "InstrId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of Instrument to sell"
        },
        "Quantity" : {
          "type" : "number",
          "description" : "Quantity to sell"
        },
        "portfolio_id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "id of portfolio"
        }
      }
    },
    "InitiateWithdrawalInput" : {
      "type" : "object",
      "required" : [ "withdrawalAmount", "withdrawalCurrencyCode" ],
      "properties" : {
        "withdrawalAmount" : {
          "type" : "number",
          "description" : "Withdrawal Amount"
        },
        "withdrawalCurrencyCode" : {
          "type" : "string",
          "description" : "Currency of Withdrawal Amount"
        }
      }
    },
    "MessageResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "level" : {
          "type" : "string",
          "enum" : [ "WARNING", "ERROR", "INFO" ]
        },
        "message" : {
          "type" : "string"
        }
      },
      "title" : "MessageResponse"
    },
    "Operation" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "OperationWithPermValues" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "natureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute natureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderFeeE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "orderValidityNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderValidityNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "paymentOptionE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute paymentOptionE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "targetNatureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute targetNatureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "Order" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "compoundOrderSlaveEltCompoundOrderMasterEltCode", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrFundIncomeStyleE", "instrNatureE", "instrReinvestmentAllowedF", "instrSubNatE", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderFeeE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "pfCurrencyCode", "portfolioName", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "compoundOrderSlaveEltCompoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrFundIncomeStyleE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "Growth", "Dividend" ]
        },
        "instrNatureE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "instrReinvestmentAllowedF" : {
          "type" : "boolean",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrSubNatE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "US Treasury bonds & notes", "US Govn agency bond (Feb adj)", "Municipal bond", "Corporate bond", "US Gov agency bond, no Feb adj", "Canadian government bond", "Canadian govn, Bnk of Can conv", "Gilt", "German government bond", "German govn, incl ex-div dates", "BTAN", "OAT", "Swiss government bond", "Belgian government bond", "Austrian government bond", "Dutch government bond", "Dutch govn, incl ex-div dates", "Swedish government bond", "Japanese government bond", "Australian government bond", "Eurobond", "Italian government bond (BTP)", "Italian government bond (CTE)", "Spanish government (annuel)", "Spanish government (semi)", "Customized bond (act/act)", "Customized bond (act/365)", "Customized bond (act/360)", "Customized bond (30/360)", "Customized bond (30/360E)", "Floating rate notes", "MM Rate", "Bill Discount", "Bill Yield", "Par Yield", "Fixed/Floating Std Swap", "Fixed/Fixed Std Swap", "Float/Float Std Swap", "Chooser", "Price Lookback", "Strike Lookback", "Average Price Asian", "Average Strike Asian", "Barrier", "Forward Start", "One Touch Digital", "Binary", "Contingent Premium", "Compound", "Double Knock-Out", "Spread", "Exchange", "Mortgage Passthrough", "PO", "IO", "Rec Swap Fixed Leg", "Rec Swap Float Leg", "Volatility Curve", "Volatility Point", "Paid Swap Fixed Leg", "Paid Swap Float Leg", "Average Rate", "Equity Swap", "Mortgage Backed Security", "Non-Vanilla Swap", "Structured Bond", "Fix/Float Swp Hedging Fixed AS", "Composite Fund", "Portfolio Fund", "Money Market Fund Share", "Fixed Income Fund Share", "Accumulator", "Decumulator", "Mini Futures  Turbo", "Capital Protection Notes", "Capital Protections Notes with Coupon", "Reverse Convertibles Notes - Equity Linked Notes", "Reverse Convertibles Notes - Bonds Linked Notes", "Reverse Convertibles Notes - Credit Linked Notes", "Discount Certificates", "Twin Win Certificates", "Bonus Notes", "Memory Coupon Notes", "Airbag Certificates", "Dual Currency Investment", "Triple Currency Investment", "Digital Investment", "Digital Pay Out", "Tower Investment", "Basket Option", "Structured Option", "Double Knock-In", "Knock-In Knock-Out", "Participating Forward", "Target Knock-Out Forward", "Pivot Option", "Target Knock-Out Pivot Notes", "Forward Forward", "Interest Multiplier Facility", "Reverse Convertibles Notes", "Equity Linked Notes", "Bonds Linked Notes", "Credit Linked Notes", "Discount Share Purchase", "Dual Currency Deposit", "OTC Guaranteed Return on Investment", "OTC Callable Range Accrual Note", "ETF Fund", "PE- Initial Commitment", "PE- Drawdown", "PE- Capital Call", "PE - Actual PE Security", "External Product", "Knock-In", "Knock-Out", "Notice Fiduciary", "Fixed Fiduciary", "Notice Deposit", "Fixed Deposit" ]
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the portfolio.\r\nThis information is present for control purpose. If it has been specified, the currency must correspond to the one which is referenced as the 'currency' of the 'portfolio' of the  operation."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "OrderSession" : {
      "type" : "object",
      "properties" : {
        "caseToClarifyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt indicates if an order session after a pre-trade compliance check has generated cases of nature compliance of severity medium that prevents the order session to be saved. All cases with this severity must be clarified."
        },
        "cashCurrencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of an occurrence."
        },
        "defaultStrategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "defaultStrategyExtDenomination" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "deleteRightF" : {
          "type" : "boolean",
          "description" : "If the order session''s data security profile is contained in the user's data profile composition with its delete flag (auth_delete_f) set to True, this attribute is set to True. Only sessions whose dataset attribute delete_right_f = True can be deleted by the user."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function.A domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Reference to a language. \r\nThis optional reference allows users to define the language of the report when running reports with SQR. \r\nWhen other financial functions are run, the language cannot be modified. The language defined in the user's profile is used."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "proposalNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session for an investment proposal (Proposal Generator component).",
          "enum" : [ "None", "Main", "Archive", "Trade" ]
        },
        "repCashflow2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second cash-flow section in reports. For example, the Proposal Generator Report can display a second cash-flow section that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repCompliance2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second compliance section in reports. For example, a section that includes an order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repExecutionStatusE" : {
          "type" : "string",
          "description" : "The attribute is used to qualify a report execution process.",
          "enum" : [ "Pending", "Completed", "Failed" ]
        },
        "repFileOutputName" : {
          "type" : "string",
          "description" : "This attribute is used when producing reports. It will specify the final file output name. Note that this attribute will not name the roi file, only the final output file. To change the roi name, use the attribute rep_roi_output_name"
        },
        "repValuation2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second valuation section in reports, for example a valuation that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Simple", "Detailed" ]
        },
        "sessionCreationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation date of on order session. This date must be define by a default value."
        },
        "sessionCreationUserCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionCreationUserName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionDescriptionC" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt allows the user to set the description of an order session or an investment proposal."
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "strategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy set in the domain context when the strategy dimension is a single strategy."
        },
        "strategyDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy dimension set in the domain context.",
          "enum" : [ "Strategy", "Strategy List" ]
        },
        "taxLotE" : {
          "type" : "string",
          "description" : "Specifies if the tax lots are included in the function.",
          "enum" : [ "<None>", "Position", "Tax Lot", "PTCC Only Simulation" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        },
        "updateRightF" : {
          "type" : "boolean",
          "description" : "If the order sessionâ€™s data security profile is contained in the userâ€™s data profile composition with its update flag (auth_update_f) set to True, this attribute is set to True. Only sessions whose dataset attribute update_right_f = True can be modified by the user."
        }
      }
    },
    "OrderSessionComment" : {
      "type" : "object",
      "required" : [ "entitySqlName", "languageCode", "lastUserCode", "orderSessionId", "selectedE", "typeCode" ],
      "properties" : {
        "commentC" : {
          "type" : "string",
          "description" : "Text of the comment. It can be 2000 characters long."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of creation of the comment."
        },
        "entitySqlName" : {
          "type" : "string",
          "description" : "ID of the entity on which the comment is based."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Language of the comment."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUserCode" : {
          "type" : "string"
        },
        "orderSessionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ID of the object on which the comment is based."
        },
        "selectedE" : {
          "type" : "string",
          "description" : "Field that can be set to select the comment for display in certain scenarios.",
          "enum" : [ "Deselected", "Selected" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "ID of the type of comment. Each comment must have a type attached."
        }
      }
    },
    "OrderSessionCommentWithPermValues" : {
      "type" : "object",
      "required" : [ "entitySqlName", "languageCode", "lastUserCode", "orderSessionId", "selectedE", "typeCode" ],
      "properties" : {
        "commentC" : {
          "type" : "string",
          "description" : "Text of the comment. It can be 2000 characters long."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of creation of the comment."
        },
        "entitySqlName" : {
          "type" : "string",
          "description" : "ID of the entity on which the comment is based."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Language of the comment."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUserCode" : {
          "type" : "string"
        },
        "orderSessionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ID of the object on which the comment is based."
        },
        "selectedE" : {
          "type" : "string",
          "description" : "Field that can be set to select the comment for display in certain scenarios.",
          "enum" : [ "Deselected", "Selected" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "ID of the type of comment. Each comment must have a type attached."
        }
      }
    },
    "OrderSessionWithPermValues" : {
      "type" : "object",
      "required" : [ "cashCurrencyCode", "defaultStrategyCode", "funcResultStatusE", "languageCode", "portfolioCode", "portfolioName", "proposalNatureE", "repCashflow2E", "repCompliance2E", "repExecutionStatusE", "repValuation2E", "sessionCreationUserCode", "sessionCreationUserName", "sessionNatureE", "sessionStatusE", "strategyCode", "taxLotE", "typeCode" ],
      "properties" : {
        "caseToClarifyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt indicates if an order session after a pre-trade compliance check has generated cases of nature compliance of severity medium that prevents the order session to be saved. All cases with this severity must be clarified."
        },
        "cashCurrencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of an occurrence."
        },
        "defaultStrategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "defaultStrategyExtDenomination" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "deleteRightF" : {
          "type" : "boolean",
          "description" : "If the order session''s data security profile is contained in the user's data profile composition with its delete flag (auth_delete_f) set to True, this attribute is set to True. Only sessions whose dataset attribute delete_right_f = True can be deleted by the user."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function.A domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Reference to a language. \r\nThis optional reference allows users to define the language of the report when running reports with SQR. \r\nWhen other financial functions are run, the language cannot be modified. The language defined in the user's profile is used."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "proposalNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session for an investment proposal (Proposal Generator component).",
          "enum" : [ "None", "Main", "Archive", "Trade" ]
        },
        "repCashflow2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second cash-flow section in reports. For example, the Proposal Generator Report can display a second cash-flow section that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repCompliance2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second compliance section in reports. For example, a section that includes an order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repExecutionStatusE" : {
          "type" : "string",
          "description" : "The attribute is used to qualify a report execution process.",
          "enum" : [ "Pending", "Completed", "Failed" ]
        },
        "repFileOutputName" : {
          "type" : "string",
          "description" : "This attribute is used when producing reports. It will specify the final file output name. Note that this attribute will not name the roi file, only the final output file. To change the roi name, use the attribute rep_roi_output_name"
        },
        "repValuation2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second valuation section in reports, for example a valuation that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Simple", "Detailed" ]
        },
        "sessionCreationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation date of on order session. This date must be define by a default value."
        },
        "sessionCreationUserCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionCreationUserName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionDescriptionC" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt allows the user to set the description of an order session or an investment proposal."
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "strategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy set in the domain context when the strategy dimension is a single strategy."
        },
        "strategyDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy dimension set in the domain context.",
          "enum" : [ "Strategy", "Strategy List" ]
        },
        "taxLotE" : {
          "type" : "string",
          "description" : "Specifies if the tax lots are included in the function.",
          "enum" : [ "<None>", "Position", "Tax Lot", "PTCC Only Simulation" ]
        },
        "taxLotE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute taxLotE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        },
        "updateRightF" : {
          "type" : "boolean",
          "description" : "If the order sessionâ€™s data security profile is contained in the userâ€™s data profile composition with its update flag (auth_update_f) set to True, this attribute is set to True. Only sessions whose dataset attribute update_right_f = True can be modified by the user."
        }
      }
    },
    "OrderWithPermValues" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "compoundOrderSlaveEltCompoundOrderMasterEltCode", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrFundIncomeStyleE", "instrNatureE", "instrReinvestmentAllowedF", "instrSubNatE", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderFeeE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "pfCurrencyCode", "portfolioName", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bidTypeE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute bidTypeE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "compoundOrderSlaveEltCompoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "defaultFusRuleE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute defaultFusRuleE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrFundIncomeStyleE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "Growth", "Dividend" ]
        },
        "instrNatureE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "instrReinvestmentAllowedF" : {
          "type" : "boolean",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrSubNatE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "US Treasury bonds & notes", "US Govn agency bond (Feb adj)", "Municipal bond", "Corporate bond", "US Gov agency bond, no Feb adj", "Canadian government bond", "Canadian govn, Bnk of Can conv", "Gilt", "German government bond", "German govn, incl ex-div dates", "BTAN", "OAT", "Swiss government bond", "Belgian government bond", "Austrian government bond", "Dutch government bond", "Dutch govn, incl ex-div dates", "Swedish government bond", "Japanese government bond", "Australian government bond", "Eurobond", "Italian government bond (BTP)", "Italian government bond (CTE)", "Spanish government (annuel)", "Spanish government (semi)", "Customized bond (act/act)", "Customized bond (act/365)", "Customized bond (act/360)", "Customized bond (30/360)", "Customized bond (30/360E)", "Floating rate notes", "MM Rate", "Bill Discount", "Bill Yield", "Par Yield", "Fixed/Floating Std Swap", "Fixed/Fixed Std Swap", "Float/Float Std Swap", "Chooser", "Price Lookback", "Strike Lookback", "Average Price Asian", "Average Strike Asian", "Barrier", "Forward Start", "One Touch Digital", "Binary", "Contingent Premium", "Compound", "Double Knock-Out", "Spread", "Exchange", "Mortgage Passthrough", "PO", "IO", "Rec Swap Fixed Leg", "Rec Swap Float Leg", "Volatility Curve", "Volatility Point", "Paid Swap Fixed Leg", "Paid Swap Float Leg", "Average Rate", "Equity Swap", "Mortgage Backed Security", "Non-Vanilla Swap", "Structured Bond", "Fix/Float Swp Hedging Fixed AS", "Composite Fund", "Portfolio Fund", "Money Market Fund Share", "Fixed Income Fund Share", "Accumulator", "Decumulator", "Mini Futures  Turbo", "Capital Protection Notes", "Capital Protections Notes with Coupon", "Reverse Convertibles Notes - Equity Linked Notes", "Reverse Convertibles Notes - Bonds Linked Notes", "Reverse Convertibles Notes - Credit Linked Notes", "Discount Certificates", "Twin Win Certificates", "Bonus Notes", "Memory Coupon Notes", "Airbag Certificates", "Dual Currency Investment", "Triple Currency Investment", "Digital Investment", "Digital Pay Out", "Tower Investment", "Basket Option", "Structured Option", "Double Knock-In", "Knock-In Knock-Out", "Participating Forward", "Target Knock-Out Forward", "Pivot Option", "Target Knock-Out Pivot Notes", "Forward Forward", "Interest Multiplier Facility", "Reverse Convertibles Notes", "Equity Linked Notes", "Bonds Linked Notes", "Credit Linked Notes", "Discount Share Purchase", "Dual Currency Deposit", "OTC Guaranteed Return on Investment", "OTC Callable Range Accrual Note", "ETF Fund", "PE- Initial Commitment", "PE- Drawdown", "PE- Capital Call", "PE - Actual PE Security", "External Product", "Knock-In", "Knock-Out", "Notice Fiduciary", "Fixed Fiduciary", "Notice Deposit", "Fixed Deposit" ]
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "natureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute natureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderFeeE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "orderValidityNatE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute orderValidityNatE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "paymentOptionE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute paymentOptionE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "pfCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the portfolio.\r\nThis information is present for control purpose. If it has been specified, the currency must correspond to the one which is referenced as the 'currency' of the 'portfolio' of the  operation."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "statusE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute statusE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "targetNatureE_permValues" : {
          "type" : "array",
          "description" : "permitted values for attribute targetNatureE",
          "items" : {
            "type" : "object",
            "properties" : {
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "rank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Display order of the permitted value"
              },
              "label" : {
                "type" : "string",
                "description" : "Localized label"
              },
              "value" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The permitted value itself."
              }
            }
          }
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "Pagination" : {
      "type" : "object",
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32"
        },
        "token" : {
          "type" : "string",
          "description" : "token used by server"
        }
      },
      "title" : "Pagination"
    },
    "PayInstruction" : {
      "type" : "object",
      "required" : [ "accInstrCode", "currencyCode", "operNatE", "operSubtypeCode", "operTypeCode", "portfolioCode" ],
      "properties" : {
        "accInstrCode" : {
          "type" : "string",
          "description" : "Reference to the Account (instrument) associated to the Payment Instruction."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Reference to the Currency associated to the Payment Instruction."
        },
        "operNatE" : {
          "type" : "string",
          "description" : "Reference to the Operation Nature associated to the Payment Instruction.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "operSubtypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Subtype associated to the Payment Instruction."
        },
        "operTypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Type associated to the Payment Instruction."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the Portfolio associated to the Payment Instruction."
        }
      }
    },
    "PayInstructionWithPermValues" : {
      "type" : "object",
      "required" : [ "accInstrCode", "currencyCode", "operNatE", "operSubtypeCode", "operTypeCode", "portfolioCode" ],
      "properties" : {
        "accInstrCode" : {
          "type" : "string",
          "description" : "Reference to the Account (instrument) associated to the Payment Instruction."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Reference to the Currency associated to the Payment Instruction."
        },
        "operNatE" : {
          "type" : "string",
          "description" : "Reference to the Operation Nature associated to the Payment Instruction.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "operSubtypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Subtype associated to the Payment Instruction."
        },
        "operTypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Type associated to the Payment Instruction."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the Portfolio associated to the Payment Instruction."
        }
      }
    },
    "PendingOrderDetails" : {
      "type" : "object",
      "required" : [ "bankFeeCurrCode", "bidTypeE", "clientInitE", "code", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "creationTimeD", "endD", "factSheetE", "fxRateDirectionF", "instrCode", "marketThirdName", "natureE", "opCurrencyCode", "orderFeeE", "orderNatE", "orderTypeCode", "orderValidityNatE", "paymentOptionE", "portfolioName", "statusE", "stpOrderE", "subtypeCode", "targetNatureE", "valueD" ],
      "properties" : {
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "bankFeeCurrCode" : {
          "type" : "string",
          "description" : "The currency4_code in pck_sec_response, in case of securities order\r\ncurrency5_code in pck_dx_response, in case of derivatives order"
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operation derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operation derives. \r\nThe slave element is linked to a master element."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "marketThirdDenom" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operationn, passing through the various order states.\r\nThe use of status allows to describe the life cycle of operations in financial instutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distiguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nUsually, a status is modified through a special type of operation called the \"Status Change Operation\". This way of proceeding allows to keep the complete history of the position's status so that the user is able to view, at any point in time, what the position is, taking into account the various states. For more details on this topic, see the paragraphs on this Status Change Operation in the chapters named \"from Operation to Operation\" and \"the Fusion Process\".\r\nIt may happen, however, that the  user want to modify the status of a postion by updating it. In that case, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        }
      }
    },
    "RebalanceOrderSession" : {
      "type" : "object",
      "required" : [ "ThirdPartyCode", "compDataE", "currencyCode", "derivationE", "eventGenNatE", "funcResultStatusE", "genGlobalOrderE", "instrDimMarketSegName", "instrumentCode", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "orderStatusE", "portConsRuleE", "portfolioCode", "portfolioListCode", "qtyAllocNatE", "sessionNatureE", "sessionStatusE", "typeCode" ],
      "properties" : {
        "ThirdPartyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nClient set in the domain context when the portfolio dimension is a client (PortfolioThirdParty)."
        },
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "compDataE" : {
          "type" : "string",
          "description" : "This field is used in the Allocate Order, Benchmark Storage, Book Adjustment, Check Strategy, Portfolio Storage, Return Analysis, Strategy Reconciliation, Synthetic Administration, Order Entry and Valuation Storage functions. For all the other financial functions this value is restricted to \"On-Line\".",
          "enum" : [ "On-line", "Compute New", "Replace Old", "Use", "Delete", "Delete All", "View", "Simulate", "New, Permanent", "New, Non-permanent", "Replace, Permanent", "Replace, Non-permanent", "Compute New - Synth Admin", "Replace Old - Synth Admin", "Compute - History", "Delete - Perf Attrib", "Delete - Return Analysis", "Delete - Standard Perf", "On-Line Mkt-Value P&L", "Append", "Include Orders", "Insure Valid by Update", "Insure Valid by Online", "Use Stored If Not Online", "Replace Existing", "No compute", "Sum & Save Strategy" ]
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "derivationE" : {
          "type" : "string",
          "description" : "Used by the Check Strategy and Strategy Reconciliation functions. The possible values are:\r\n\r\n1. Yes. A derivation is performed on the strategies that do not have a valid derived strategy at the current date.\r\n\r\n2. No. No derivation is performed. This means that the investment objectives as defined are used. The modelling constraints are not taken into account.\r\n\r\n3. OnLine. A derivation is performed on every strategy. \r\n\r\nNote: No derivation is performed if there are no constraints linked to the portfolio.",
          "enum" : [ "Yes", "No", "Online" ]
        },
        "eventGenNatE" : {
          "type" : "string",
          "description" : "This parameter allows user to validate proposed orders before transforming them into operations (Event/Operation to be confirmed). \r\n\r\nIf you choose Automatic from the drop-down list, it saves operations directly, allowing you to enable subscription and send them to external order processing systems.",
          "enum" : [ "Automatic", "Events to be confirmed", "Events/Opers to be confirmed", "Gen. events with instrument", "Gen. events with instr+portf.", "Adjustment to be confirmed", "Automatic No Session", "Create Session", "Check & Publish", "Check, Split & Publish", "Create Session & Check", "Check, Case split & Publish" ]
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "instrDimMarketSegId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instrDimMarketSegName" : {
          "type" : "string"
        },
        "instrumentCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument set in the domain context when the instrument dimension is a single instrument."
        },
        "instrumentDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument dimension set in the domain context.",
          "enum" : [ "Instrument", "Instrument List", "Currency", "Currency List", "Instrument Enumeration", "Market Segment" ]
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "orderStatusE" : {
          "type" : "string",
          "description" : "Specifies the status of the orders generated using the Allocate Order or the Strategy Reconciliation functions. The permitted values are the same as those of an ordinary operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "portConsRuleE" : {
          "type" : "string",
          "description" : "Specifies the desired portfolio consolidation type. The permitted values are:\r\n1. Merged\r\n2. Detailed\r\n3. Tiled\r\n4. Burst\r\n5. Detailed Children\r\n6. Merged TWR\r\n7. Merged Hierarchy\r\nThe Consolidation section is only taken into account when a business function\r\nis run for a group of portfolios.",
          "enum" : [ "Merged", "Detailed", "Tiled", "Burst", "Detailed Children", "Merged TWR", "Merged Hierarchy" ]
        },
        "portObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Specifies a Portfolio, a Portfolio List or a Third party.\r\nThis field contains the ID of an occurrence in the table defined by the 'dim_port_dict_id' field (if not NULL)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "RebalanceOrderSessionWithPermValues" : {
      "type" : "object",
      "required" : [ "ThirdPartyCode", "compDataE", "currencyCode", "derivationE", "eventGenNatE", "funcResultStatusE", "genGlobalOrderE", "instrDimMarketSegName", "instrumentCode", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "orderStatusE", "portConsRuleE", "portfolioCode", "portfolioListCode", "qtyAllocNatE", "sessionNatureE", "sessionStatusE", "typeCode" ],
      "properties" : {
        "ThirdPartyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nClient set in the domain context when the portfolio dimension is a client (PortfolioThirdParty)."
        },
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "compDataE" : {
          "type" : "string",
          "description" : "This field is used in the Allocate Order, Benchmark Storage, Book Adjustment, Check Strategy, Portfolio Storage, Return Analysis, Strategy Reconciliation, Synthetic Administration, Order Entry and Valuation Storage functions. For all the other financial functions this value is restricted to \"On-Line\".",
          "enum" : [ "On-line", "Compute New", "Replace Old", "Use", "Delete", "Delete All", "View", "Simulate", "New, Permanent", "New, Non-permanent", "Replace, Permanent", "Replace, Non-permanent", "Compute New - Synth Admin", "Replace Old - Synth Admin", "Compute - History", "Delete - Perf Attrib", "Delete - Return Analysis", "Delete - Standard Perf", "On-Line Mkt-Value P&L", "Append", "Include Orders", "Insure Valid by Update", "Insure Valid by Online", "Use Stored If Not Online", "Replace Existing", "No compute", "Sum & Save Strategy" ]
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "derivationE" : {
          "type" : "string",
          "description" : "Used by the Check Strategy and Strategy Reconciliation functions. The possible values are:\r\n\r\n1. Yes. A derivation is performed on the strategies that do not have a valid derived strategy at the current date.\r\n\r\n2. No. No derivation is performed. This means that the investment objectives as defined are used. The modelling constraints are not taken into account.\r\n\r\n3. OnLine. A derivation is performed on every strategy. \r\n\r\nNote: No derivation is performed if there are no constraints linked to the portfolio.",
          "enum" : [ "Yes", "No", "Online" ]
        },
        "eventGenNatE" : {
          "type" : "string",
          "description" : "This parameter allows user to validate proposed orders before transforming them into operations (Event/Operation to be confirmed). \r\n\r\nIf you choose Automatic from the drop-down list, it saves operations directly, allowing you to enable subscription and send them to external order processing systems.",
          "enum" : [ "Automatic", "Events to be confirmed", "Events/Opers to be confirmed", "Gen. events with instrument", "Gen. events with instr+portf.", "Adjustment to be confirmed", "Automatic No Session", "Create Session", "Check & Publish", "Check, Split & Publish", "Create Session & Check", "Check, Case split & Publish" ]
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "instrDimMarketSegId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instrDimMarketSegName" : {
          "type" : "string"
        },
        "instrumentCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument set in the domain context when the instrument dimension is a single instrument."
        },
        "instrumentDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument dimension set in the domain context.",
          "enum" : [ "Instrument", "Instrument List", "Currency", "Currency List", "Instrument Enumeration", "Market Segment" ]
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "orderStatusE" : {
          "type" : "string",
          "description" : "Specifies the status of the orders generated using the Allocate Order or the Strategy Reconciliation functions. The permitted values are the same as those of an ordinary operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "portConsRuleE" : {
          "type" : "string",
          "description" : "Specifies the desired portfolio consolidation type. The permitted values are:\r\n1. Merged\r\n2. Detailed\r\n3. Tiled\r\n4. Burst\r\n5. Detailed Children\r\n6. Merged TWR\r\n7. Merged Hierarchy\r\nThe Consolidation section is only taken into account when a business function\r\nis run for a group of portfolios.",
          "enum" : [ "Merged", "Detailed", "Tiled", "Burst", "Detailed Children", "Merged TWR", "Merged Hierarchy" ]
        },
        "portObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Specifies a Portfolio, a Portfolio List or a Third party.\r\nThis field contains the ID of an occurrence in the table defined by the 'dim_port_dict_id' field (if not NULL)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "SearchAllocationRuleDefinition" : {
      "type" : "object",
      "required" : [ "actualOrderNatE", "instrCode", "opNatE", "portfolioCode", "stratNatE", "targetNatureE" ],
      "properties" : {
        "actualOrderNatE" : {
          "type" : "string",
          "description" : "Indicates the order nature assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nParent attribute is order_nat_e attribute in the operation entity.\r\n\r\nA large number of permitted values with user-defined labels (dict_perm_val_dat.usr.sql) is allowed.\r\n\r\nIn the standard packaging, the following natures are defined:\r\n- 0 = <None>\r\n- 1 = Market\r\n- 2 = Limit\r\n- 3 = Stop\r\n- 4 = Stop Limit",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of an extended strategy element.\r\n\r\nThis attribute is necessary to establish hierarchical links. In fact, in the context of a dynamic list, it is necessary to include one format element with:\r\n- definition = id\r\n- hierarchy nature = parent\r\n\r\nAnother format element is also necessary to properly set up the hierarchical links:\r\n- definition = disp_parent_ext_strat_elem_id\r\n- hierarchical nature = child\r\n\r\nNote that both do not have to be displayed."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "instrId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "maxWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the maximum weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., maximum weight) correspond to a percentage of the market value of the parent market segment. The maximum weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': maximum weight 50%.\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20% \r\n- Market Segment 'Finance': maximum weight contribution 20*50% = 10%"
        },
        "minOrderQuantityN" : {
          "type" : "number",
          "description" : "Manages the ability to set a minimum order quantity in the Allocate Order domain (i.e., Order Details screen)."
        },
        "objQtyN" : {
          "type" : "number",
          "description" : "Specifies the quantity to hold in order to be in line with the objective weights linked to the portfolio."
        },
        "objWeightContMargN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight. It is possible to indicate a fluctuation margin. \r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a pecentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies :\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20%, margin 5%\r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': objective weight 50%, margin 5%\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20%, objective weight contribution margin 100%*5% = 5%\r\n- Market Segment 'Finance': objective weight contribution 20*50% = 10%, objective weight contribution margin 20%*5% = 1%"
        },
        "objWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nExample:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Market Segment 'Finance': objective weight 50%.\r\n\r\nThe above hierarchy of strategies will lead to the following weights:\r\nMarket Segment 'Stock / USD': objective weight contribution 100%*20% = 20%\r\nMarket Segment 'Finance': objective weight contribution 20*50% = 10%"
        },
        "objWeightN" : {
          "type" : "number",
          "description" : "Indicates the target set in the \"strategy element\".\r\n\r\nUsers can define investment targets within a strategy element. The investment targets that can be assigned include the percentage weight."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Permits the ability to characterise different natures of operations.",
          "enum" : [ "Buy", "Sell" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the order limit date that is assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nWhen an order is limited in time, the valuation should not consider these positions if the limit date is not in position anymore."
        },
        "orderQtyN" : {
          "type" : "number",
          "description" : "Indicates the quantity to buy or sell as suggested by the system in order to be in line with the corresponding objective weight (taking into account the round lot quantity of the instrument)."
        },
        "orderQuoteN" : {
          "type" : "number",
          "description" : "The role played by this field depends on the context. In the Order Details screen of the Allocate Order domain, it is the limit date assigned to an order. In the extended strategy element structure returned by both Allocate Order and Strategy Reconciliation, it is the quote used to compute the order gross amount and is fed as follows :\r\n- Market quote if order nature = Market order\r\n- Limit quote if order nature = Limit\r\n- Stop quote if order nature = Stop (Market)\r\n- Limit quote if order nature = Stop-Limit\r\n\r\nThe idea is that the order gross amount gives the maximum exposure of the position.\r\nNote that the quote in buy/sell_operation entity is equal to the order_quote (extended strategy element entity)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of a portfolio."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote assigned to an order, specified when entering an order in the Allocate Order domain (i.e., Order Details screen)."
        },
        "stratNatE" : {
          "type" : "string",
          "description" : "Indicates the nature of the strategy that is at the origin of the occurrence in strategy_element.",
          "enum" : [ "Asset Allocation", "Model Portfolio", "Recommendation List", "Constraint Set", "Index", "Currency Allocation", "Global Order Quantity", "Instr Order Quantity", "Instr Result Quantity", "Instr Order Portfolio %", "Instr Result Portfolio %", "Market Seg Result Portfolio %", "Switch Instrument", "Cash Result Portfolio %", "Currency Hedge", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Weighted Switch Instrument", "Trading Constraint", "Allocation Constraint", "Security Constraint", "Investment profile", "Benchmark", "Surveyed Securities List", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Composite", "Instr. Res. % of Strat Mkt Sgt", "Risk Strategy" ]
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is only used in the Web standard packaging for defining whether an order is in amount or in quantity.",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        }
      }
    },
    "SearchCorpActionDetail" : {
      "type" : "object",
      "required" : [ "corporateActionCode", "corporateActionId", "issueTypeE", "seqNumber" ],
      "properties" : {
        "corporateActionCode" : {
          "type" : "string",
          "description" : "Code of Corporate Action"
        },
        "corporateActionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of the corporate action."
        },
        "firstDealingD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "First dealing date: Date at which the trading of new securities begins."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "ipoLotSizeN" : {
          "type" : "number",
          "description" : "The minimum number of shares that can be bid. Shares can only be bid in multiples of the lot size."
        },
        "issueTypeE" : {
          "type" : "string",
          "description" : "IPO Issue Type-Describes the way in which the final IPO subscription price will be determined",
          "enum" : [ "<NONE>", "Single Bid", "Book Build" ]
        },
        "maxSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Maximum Subscription Amount in case of a book building IPO."
        },
        "maxSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Maximum Subscription Price in case of a book building IPO."
        },
        "minInitSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for initial subscription."
        },
        "minSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for the subscription."
        },
        "minSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Minimum Subscription Price in case of a book building IPO."
        },
        "paymentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Payment date: Date at which securities/cash will be paid."
        },
        "refundD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Refund, in case of unsuccessful allotments, will be processed on this date."
        },
        "responseDeadlineD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date that the account servicer has set as the deadline to respond with instructions to an outstanding offer or privilege."
        },
        "seqNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of the action."
        },
        "subscriptionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Subscription date: Date at which instructions for a rights subscription will be accepted."
        },
        "subscriptionEndTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "IPO subscription has to be submitted before  this time on the last day of the subscription period."
        },
        "subscriptionPeriodBeginD" : {
          "type" : "string",
          "format" : "date",
          "description" : "Start date of subscription period."
        },
        "subscriptionPeriodEndD" : {
          "type" : "string",
          "format" : "date",
          "description" : "End date of subscription period."
        },
        "subscriptionPriceN" : {
          "type" : "number",
          "description" : "Price at which new securities will be subscribed, e.g. a rights issue."
        }
      }
    },
    "SearchCounterParty" : {
      "type" : "object",
      "required" : [ "activeF", "code", "intermediaryF", "name" ],
      "properties" : {
        "activeF" : {
          "type" : "boolean",
          "description" : "Describes the state of the Third Party. If a Third Party is inactive, it does not appear on default selection lists."
        },
        "code" : {
          "type" : "string",
          "description" : "Reference given to a third party by the company to\r\nidentify it."
        },
        "extDenomination" : {
          "type" : "string",
          "description" : "Denomination\r\nIt is an extended attribute which cannot be edited by the user but require a data pre-computation (see Triple'A Plus Web TSL Operating Guide).\r\nThis is the denomination of the third party.\r\nDenomination is displayed in user's language, but if it is not available then the default translation is used instead.\r\nThis extended attribute is defined as \"Multilingual\" and requires that some languages are defined as \"Multilingual\" too.\r\n\r\nThis attribute is used only for the Web Packaging."
        },
        "intermediaryF" : {
          "type" : "boolean",
          "description" : "Indicates that this third party will appear on the financial intermediary selection list."
        },
        "name" : {
          "type" : "string",
          "description" : "Short name of the occurrence."
        }
      }
    },
    "SimulatedTaxLotPicking" : {
      "type" : "object",
      "required" : [ "funcResultId", "operationId", "priorityN", "quantityN", "taxLotInitialId" ],
      "properties" : {
        "funcResultId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "operationId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "priorityN" : {
          "type" : "number"
        },
        "quantityN" : {
          "type" : "number"
        },
        "targetN" : {
          "type" : "number"
        },
        "taxLotInitialId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "SimulatedTaxLotPickingWithPermValues" : {
      "type" : "object",
      "required" : [ "funcResultId", "operationId", "priorityN", "quantityN", "taxLotInitialId" ],
      "properties" : {
        "funcResultId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "operationId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "priorityN" : {
          "type" : "number"
        },
        "quantityN" : {
          "type" : "number"
        },
        "targetN" : {
          "type" : "number"
        },
        "taxLotInitialId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "StartWithdrawalInput" : {
      "type" : "object",
      "required" : [ "transferAccount", "transferCurrencyCode" ],
      "properties" : {
        "transferAccount" : {
          "type" : "string",
          "description" : "Account Transfert Account"
        },
        "transferCurrencyCode" : {
          "type" : "string",
          "description" : "Currency of Account Transfert Account"
        }
      }
    },
    "UpdateFieldOrderInput" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "code of operation"
        }
      }
    },
    "WithdrawalRequest" : {
      "type" : "object",
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time of the request creation."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the withdrawal must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date and time of the end of the request."
        },
        "failureReasonE" : {
          "type" : "string",
          "description" : "This attribute describes the withdrawal request failure reason.",
          "enum" : [ "<None>", "Not enough cash", "Time Limit overdue for order execution", "Time Limit overdue for cash transfer", "Withdrawal Operation Publication Failed", "Cash accounts not fully transferred", "Portfolio Closure Failed", "Delink Cash Account Failed", "Close Cash Account Failed", "Assets Transfer Publication Failed" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Identifier of the request."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the request.",
          "enum" : [ "Full Liquidation (Assets Sale)", "Partial Withdrawal", "Full Liquidation (Assets Transfer)" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related."
        },
        "portfolioCurrentWithdreqStatusE" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related.",
          "enum" : [ "No Pending Request", "Partial Withdrawal Pending", "Full Liquidation Pending", "Partial Withdrawal Failed", "Full Liquidation Failed", "Full Liquidation Completed" ]
        },
        "portfolioExtIpCurStatus" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related.",
          "enum" : [ "None", "No Profile", "Valid", "Expired" ]
        },
        "portfolioExtIpExpiryD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Portfolio to which the request is related."
        },
        "portfolioExtIpName" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related."
        },
        "portfolioMgtBeginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Portfolio to which the request is related."
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related."
        },
        "portfolioServiceTypeE" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related.",
          "enum" : [ "<None>", "Discretionary", "Advisory", "Execution only", "Others", "Robo-advisor", "Goal-based" ]
        },
        "portfolioThirdCode" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related."
        },
        "portfolioThirdName" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the request.",
          "enum" : [ "<None>", "Pending (Orders sent to market)", "Pending (Waiting Cash Transfer)", "Failed", "Completed", "Cancelled", "Initiated", "Pending (Waiting Closure Fees)", "Pending (Waiting Fund Switching)", "Pending (Waiting Assets Transfer)" ]
        },
        "withdrawalAmountM" : {
          "type" : "number",
          "description" : "Amount to withdraw. Only defined for partial withdrawal."
        },
        "withdrawalCurrCode" : {
          "type" : "string",
          "description" : "Currency of the amount to withdraw."
        }
      }
    },
    "allocateOrderSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "cancelDMAOrdersSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "cancelIPOSubscriptionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "cancelNDMAOrdersSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "cancelPESubscriptionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "cancelPendingTransfersSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "createAccountInput" : {
      "type" : "object",
      "required" : [ "code", "natureE", "portfolioCode", "refCurrCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Most common reference number used for this financial \r\ninstrument e.g. Telekurs Number, Cedel, ISIN, etc."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Specifies the nature of the instrument. A mandatory hard-coded classifying attribute for distinctive processing.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Specifies the portfolio to which a cash account belongs."
        },
        "refCurrCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the instrument. For bond-like instruments, this is the currency of the principal."
        }
      }
    },
    "createAccountSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AccountWithPermValues"
        }
      }
    },
    "createAllocationOrderInput" : {
      "type" : "object",
      "required" : [ "currencyCode", "genGlobalOrderE", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "portfolioDimPortfolioCode", "portfolioListCode", "qtyAllocNatE", "typeCode" ],
      "properties" : {
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "portfolioDimPortfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "createAllocationOrderSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AllocationOrderSessionsWithPermValues"
        }
      }
    },
    "createAllocationRuleDefinitionsInput" : {
      "type" : "object",
      "required" : [ "actualOrderNatE", "instrCode", "opNatE", "portfolioCode", "stratNatE", "targetNatureE" ],
      "properties" : {
        "actualOrderNatE" : {
          "type" : "string",
          "description" : "Indicates the order nature assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nParent attribute is order_nat_e attribute in the operation entity.\r\n\r\nA large number of permitted values with user-defined labels (dict_perm_val_dat.usr.sql) is allowed.\r\n\r\nIn the standard packaging, the following natures are defined:\r\n- 0 = <None>\r\n- 1 = Market\r\n- 2 = Limit\r\n- 3 = Stop\r\n- 4 = Stop Limit",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of an extended strategy element.\r\n\r\nThis attribute is necessary to establish hierarchical links. In fact, in the context of a dynamic list, it is necessary to include one format element with:\r\n- definition = id\r\n- hierarchy nature = parent\r\n\r\nAnother format element is also necessary to properly set up the hierarchical links:\r\n- definition = disp_parent_ext_strat_elem_id\r\n- hierarchical nature = child\r\n\r\nNote that both do not have to be displayed."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "instrId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "maxWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the maximum weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., maximum weight) correspond to a percentage of the market value of the parent market segment. The maximum weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': maximum weight 50%.\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20% \r\n- Market Segment 'Finance': maximum weight contribution 20*50% = 10%"
        },
        "minOrderQuantityN" : {
          "type" : "number",
          "description" : "Manages the ability to set a minimum order quantity in the Allocate Order domain (i.e., Order Details screen)."
        },
        "objQtyN" : {
          "type" : "number",
          "description" : "Specifies the quantity to hold in order to be in line with the objective weights linked to the portfolio."
        },
        "objWeightContMargN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight. It is possible to indicate a fluctuation margin. \r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a pecentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies :\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20%, margin 5%\r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': objective weight 50%, margin 5%\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20%, objective weight contribution margin 100%*5% = 5%\r\n- Market Segment 'Finance': objective weight contribution 20*50% = 10%, objective weight contribution margin 20%*5% = 1%"
        },
        "objWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nExample:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Market Segment 'Finance': objective weight 50%.\r\n\r\nThe above hierarchy of strategies will lead to the following weights:\r\nMarket Segment 'Stock / USD': objective weight contribution 100%*20% = 20%\r\nMarket Segment 'Finance': objective weight contribution 20*50% = 10%"
        },
        "objWeightN" : {
          "type" : "number",
          "description" : "Indicates the target set in the \"strategy element\".\r\n\r\nUsers can define investment targets within a strategy element. The investment targets that can be assigned include the percentage weight."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Permits the ability to characterise different natures of operations.",
          "enum" : [ "Buy", "Sell" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the order limit date that is assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nWhen an order is limited in time, the valuation should not consider these positions if the limit date is not in position anymore."
        },
        "orderQtyN" : {
          "type" : "number",
          "description" : "Indicates the quantity to buy or sell as suggested by the system in order to be in line with the corresponding objective weight (taking into account the round lot quantity of the instrument)."
        },
        "orderQuoteN" : {
          "type" : "number",
          "description" : "The role played by this field depends on the context. In the Order Details screen of the Allocate Order domain, it is the limit date assigned to an order. In the extended strategy element structure returned by both Allocate Order and Strategy Reconciliation, it is the quote used to compute the order gross amount and is fed as follows :\r\n- Market quote if order nature = Market order\r\n- Limit quote if order nature = Limit\r\n- Stop quote if order nature = Stop (Market)\r\n- Limit quote if order nature = Stop-Limit\r\n\r\nThe idea is that the order gross amount gives the maximum exposure of the position.\r\nNote that the quote in buy/sell_operation entity is equal to the order_quote (extended strategy element entity)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of a portfolio."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote assigned to an order, specified when entering an order in the Allocate Order domain (i.e., Order Details screen)."
        },
        "stratNatE" : {
          "type" : "string",
          "description" : "Indicates the nature of the strategy that is at the origin of the occurrence in strategy_element.",
          "enum" : [ "Asset Allocation", "Model Portfolio", "Recommendation List", "Constraint Set", "Index", "Currency Allocation", "Global Order Quantity", "Instr Order Quantity", "Instr Result Quantity", "Instr Order Portfolio %", "Instr Result Portfolio %", "Market Seg Result Portfolio %", "Switch Instrument", "Cash Result Portfolio %", "Currency Hedge", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Weighted Switch Instrument", "Trading Constraint", "Allocation Constraint", "Security Constraint", "Investment profile", "Benchmark", "Surveyed Securities List", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Composite", "Instr. Res. % of Strat Mkt Sgt", "Risk Strategy" ]
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is only used in the Web standard packaging for defining whether an order is in amount or in quantity.",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        }
      }
    },
    "createAllocationRuleDefinitionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AllocationRuleDefinitionWithPermValues"
        }
      }
    },
    "createCaseClarificationInput" : {
      "type" : "object",
      "required" : [ "caseCode", "code", "reasonC" ],
      "properties" : {
        "caseCode" : {
          "type" : "string",
          "description" : "Case's identifier"
        },
        "code" : {
          "type" : "string",
          "description" : "Clarification's code"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "reasonC" : {
          "type" : "string",
          "description" : "Free text zone where Users can explain / give clarification to Case.\r\nThis zone could store until 2 000 characters."
        }
      }
    },
    "createCaseClarificationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CaseClarificationAllWithPermValues"
        }
      }
    },
    "createCaseManagementInput" : {
      "type" : "object",
      "required" : [ "code", "criticalnessE", "mainObject", "natureE", "rightToRunF", "statusE", "subNatE" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Case's code."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date / Time on which the Case has been created."
        },
        "criticalnessE" : {
          "type" : "string",
          "description" : "This attribute returns the severity set at Strategy & Constraint level.\r\nThe severity is checked regarding the value of system parameters:\r\n1. SESSION_BLOCK_CRITICALNESS: \r\nthe case's severity could block the Order Session (criticalness' value > system parameter's one).\r\n2. STRAT_BLOCKCONSTR_CRITICALNESS: \r\nthe case's severity determines what are Cases that must be clarified.",
          "enum" : [ "<None>", "Not Critical", "Low", "Medium", "High" ]
        },
        "descriptionC" : {
          "type" : "string",
          "description" : "In order to inform or warn Users efficiently, Cases are generated with a description. This caseâ€™s description is based on templates that are managed via the menu Case Message Template."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "mainObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Technical identifier of the main object"
        },
        "natureE" : {
          "type" : "string",
          "description" : "The Case's Nature is directly linked with constraints's family that could be defined into Triple'A:",
          "enum" : [ "<None>", "Strategy", "Trading Holding Constraint", "Modelling Constraint", "Risk", "Input Control", "Lombard", "Buying Power" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "It is used to set conditions on selected lines in a financial function result. \r\nThe evaluated script will only enable the use of the function for a selected line if the result is '1'."
        },
        "statusE" : {
          "type" : "string",
          "description" : "It gives the Case's status:",
          "enum" : [ "Not Clarified", "Clarified" ]
        },
        "subNatE" : {
          "type" : "string",
          "description" : "There is a one-to-one relationship between Case's sub-nature and Strategy objectives & Constraints.\r\nSub-Natures are:",
          "enum" : [ "<None>", "Allocation", "Model Portfolio", "Trading Constraint", "Holding Constraint", "Security In", "Security Out", "Allocation Constraint", "Modelling Trading Constraint", "VaR Percent", "Volatility Percent", "Tracking Error Percent", "Expected Shortfall Percent", "Diversification Effect Percent", "Marginal VaR Percent", "VaR Amount", "Expected Shortfall Amount", "Marginal VaR Amount", "Diversification Effect Amount", "Risk Grade", "Volatility Amount", "Tracking Error Amount", "Shortfall Probability Percent", "Shortfall Probability Amount", "Session IC Status", "Order Input Control", "Marg. Volatility Percent", "Marg. Volatility Amount", "Marg. Tracking Error Percent", "Marg. Tracking Error Amount", "Marg. Expected Shortfall Percent", "Marg. Expected Shortfall Amount", "EVaR Percent", "EVaR Amount", "Marginal EVaR Percent", "Marginal EVaR Amount", "TVaR Percent", "TVaR Amount", "Marginal TVaR Percent", "Marginal TVaR Amount", "Beta", "Super Hedging Price", "Information Ratio", "Sharpe Ratio", "Treynor Ratio", "Jensen's Alpha", "Expected Return Percent", "Expected Return Amount", "Lombard Surplus", "Lombard Deficit", "Lombard Lombard Tech. Error", "Risk Level", "Product Risk Class", "Buying power order amount", "Buying power allowed quantity", "Buying power Tech. Error", "Buying Power condition not met" ]
        }
      }
    },
    "createCaseManagementSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CaseManagementAllWithPermValues"
        }
      }
    },
    "createCashTransferInput" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "confirmF", "contractLengthUnitE", "dbStatusE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "createCashTransferSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CashTransferWithPermValues"
        }
      }
    },
    "createCorpActionDetailsInput" : {
      "type" : "object",
      "required" : [ "corporateActionId", "issueTypeE", "seqNumber" ],
      "properties" : {
        "corporateActionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of the corporate action."
        },
        "firstDealingD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "First dealing date: Date at which the trading of new securities begins."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "ipoLotSizeN" : {
          "type" : "number",
          "description" : "The minimum number of shares that can be bid. Shares can only be bid in multiples of the lot size."
        },
        "issueTypeE" : {
          "type" : "string",
          "description" : "IPO Issue Type-Describes the way in which the final IPO subscription price will be determined",
          "enum" : [ "<NONE>", "Single Bid", "Book Build" ]
        },
        "maxSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Maximum Subscription Amount in case of a book building IPO."
        },
        "maxSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Maximum Subscription Price in case of a book building IPO."
        },
        "minInitSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for initial subscription."
        },
        "minSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for the subscription."
        },
        "minSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Minimum Subscription Price in case of a book building IPO."
        },
        "paymentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Payment date: Date at which securities/cash will be paid."
        },
        "refundD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Refund, in case of unsuccessful allotments, will be processed on this date."
        },
        "responseDeadlineD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date that the account servicer has set as the deadline to respond with instructions to an outstanding offer or privilege."
        },
        "seqNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of the action."
        },
        "subscriptionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Subscription date: Date at which instructions for a rights subscription will be accepted."
        },
        "subscriptionEndTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "IPO subscription has to be submitted before  this time on the last day of the subscription period."
        },
        "subscriptionPeriodBeginD" : {
          "type" : "string",
          "format" : "date",
          "description" : "Start date of subscription period."
        },
        "subscriptionPeriodEndD" : {
          "type" : "string",
          "format" : "date",
          "description" : "End date of subscription period."
        },
        "subscriptionPriceN" : {
          "type" : "number",
          "description" : "Price at which new securities will be subscribed, e.g. a rights issue."
        }
      }
    },
    "createCorpActionDetailsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CorpActionDetailWithPermValues"
        }
      }
    },
    "createDraftOperationInput" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "opFusionRuleE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opFusionRuleE" : {
          "type" : "string",
          "description" : "This attribute stores the lot consumption rule of the draft order and based on this rule the tax lots to be consumed for an order will be sorted. For example, if the lot consumption rule is FIFO, then the tax lots related to the order that are acquired first would be consumed first and so on.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "createDraftOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/DraftOperationWithPermValues"
        }
      }
    },
    "createExternalOperationCashInput" : {
      "type" : "object",
      "required" : [ "code", "natureE", "opCurrencyCode", "orderTypeCode", "portfolioCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        }
      }
    },
    "createExternalOperationCashSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/ExternalOperationCashWithPermValues"
        }
      }
    },
    "createForexOperationInput" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "createForexOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/ForexOperationWithPermValues"
        }
      }
    },
    "createOperationInput" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "createOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OperationWithPermValues"
        }
      }
    },
    "createOrderInput" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "compoundOrderSlaveEltCompoundOrderMasterEltCode", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrFundIncomeStyleE", "instrNatureE", "instrReinvestmentAllowedF", "instrSubNatE", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderFeeE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "pfCurrencyCode", "portfolioName", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "compoundOrderSlaveEltCompoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrFundIncomeStyleE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "Growth", "Dividend" ]
        },
        "instrNatureE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "instrReinvestmentAllowedF" : {
          "type" : "boolean",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrSubNatE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "US Treasury bonds & notes", "US Govn agency bond (Feb adj)", "Municipal bond", "Corporate bond", "US Gov agency bond, no Feb adj", "Canadian government bond", "Canadian govn, Bnk of Can conv", "Gilt", "German government bond", "German govn, incl ex-div dates", "BTAN", "OAT", "Swiss government bond", "Belgian government bond", "Austrian government bond", "Dutch government bond", "Dutch govn, incl ex-div dates", "Swedish government bond", "Japanese government bond", "Australian government bond", "Eurobond", "Italian government bond (BTP)", "Italian government bond (CTE)", "Spanish government (annuel)", "Spanish government (semi)", "Customized bond (act/act)", "Customized bond (act/365)", "Customized bond (act/360)", "Customized bond (30/360)", "Customized bond (30/360E)", "Floating rate notes", "MM Rate", "Bill Discount", "Bill Yield", "Par Yield", "Fixed/Floating Std Swap", "Fixed/Fixed Std Swap", "Float/Float Std Swap", "Chooser", "Price Lookback", "Strike Lookback", "Average Price Asian", "Average Strike Asian", "Barrier", "Forward Start", "One Touch Digital", "Binary", "Contingent Premium", "Compound", "Double Knock-Out", "Spread", "Exchange", "Mortgage Passthrough", "PO", "IO", "Rec Swap Fixed Leg", "Rec Swap Float Leg", "Volatility Curve", "Volatility Point", "Paid Swap Fixed Leg", "Paid Swap Float Leg", "Average Rate", "Equity Swap", "Mortgage Backed Security", "Non-Vanilla Swap", "Structured Bond", "Fix/Float Swp Hedging Fixed AS", "Composite Fund", "Portfolio Fund", "Money Market Fund Share", "Fixed Income Fund Share", "Accumulator", "Decumulator", "Mini Futures  Turbo", "Capital Protection Notes", "Capital Protections Notes with Coupon", "Reverse Convertibles Notes - Equity Linked Notes", "Reverse Convertibles Notes - Bonds Linked Notes", "Reverse Convertibles Notes - Credit Linked Notes", "Discount Certificates", "Twin Win Certificates", "Bonus Notes", "Memory Coupon Notes", "Airbag Certificates", "Dual Currency Investment", "Triple Currency Investment", "Digital Investment", "Digital Pay Out", "Tower Investment", "Basket Option", "Structured Option", "Double Knock-In", "Knock-In Knock-Out", "Participating Forward", "Target Knock-Out Forward", "Pivot Option", "Target Knock-Out Pivot Notes", "Forward Forward", "Interest Multiplier Facility", "Reverse Convertibles Notes", "Equity Linked Notes", "Bonds Linked Notes", "Credit Linked Notes", "Discount Share Purchase", "Dual Currency Deposit", "OTC Guaranteed Return on Investment", "OTC Callable Range Accrual Note", "ETF Fund", "PE- Initial Commitment", "PE- Drawdown", "PE- Capital Call", "PE - Actual PE Security", "External Product", "Knock-In", "Knock-Out", "Notice Fiduciary", "Fixed Fiduciary", "Notice Deposit", "Fixed Deposit" ]
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the portfolio.\r\nThis information is present for control purpose. If it has been specified, the currency must correspond to the one which is referenced as the 'currency' of the 'portfolio' of the  operation."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "createOrderSessionCommentsInput" : {
      "type" : "object",
      "required" : [ "entitySqlName", "languageCode", "lastUserCode", "orderSessionId", "selectedE", "typeCode" ],
      "properties" : {
        "commentC" : {
          "type" : "string",
          "description" : "Text of the comment. It can be 2000 characters long."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of creation of the comment."
        },
        "entitySqlName" : {
          "type" : "string",
          "description" : "ID of the entity on which the comment is based."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Language of the comment."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUserCode" : {
          "type" : "string"
        },
        "orderSessionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ID of the object on which the comment is based."
        },
        "selectedE" : {
          "type" : "string",
          "description" : "Field that can be set to select the comment for display in certain scenarios.",
          "enum" : [ "Deselected", "Selected" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "ID of the type of comment. Each comment must have a type attached."
        }
      }
    },
    "createOrderSessionCommentsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSessionCommentWithPermValues"
        }
      }
    },
    "createOrderSessionInput" : {
      "type" : "object",
      "required" : [ "cashCurrencyCode", "defaultStrategyCode", "languageCode", "portfolioCode", "portfolioName", "proposalNatureE", "repCashflow2E", "repCompliance2E", "repExecutionStatusE", "repValuation2E", "sessionCreationUserCode", "sessionCreationUserName", "sessionNatureE", "sessionStatusE", "strategyCode", "taxLotE", "typeCode" ],
      "properties" : {
        "caseToClarifyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt indicates if an order session after a pre-trade compliance check has generated cases of nature compliance of severity medium that prevents the order session to be saved. All cases with this severity must be clarified."
        },
        "cashCurrencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of an occurrence."
        },
        "defaultStrategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "defaultStrategyExtDenomination" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "deleteRightF" : {
          "type" : "boolean",
          "description" : "If the order session''s data security profile is contained in the user's data profile composition with its delete flag (auth_delete_f) set to True, this attribute is set to True. Only sessions whose dataset attribute delete_right_f = True can be deleted by the user."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Reference to a language. \r\nThis optional reference allows users to define the language of the report when running reports with SQR. \r\nWhen other financial functions are run, the language cannot be modified. The language defined in the user's profile is used."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "proposalNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session for an investment proposal (Proposal Generator component).",
          "enum" : [ "None", "Main", "Archive", "Trade" ]
        },
        "repCashflow2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second cash-flow section in reports. For example, the Proposal Generator Report can display a second cash-flow section that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repCompliance2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second compliance section in reports. For example, a section that includes an order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repExecutionStatusE" : {
          "type" : "string",
          "description" : "The attribute is used to qualify a report execution process.",
          "enum" : [ "Pending", "Completed", "Failed" ]
        },
        "repFileOutputName" : {
          "type" : "string",
          "description" : "This attribute is used when producing reports. It will specify the final file output name. Note that this attribute will not name the roi file, only the final output file. To change the roi name, use the attribute rep_roi_output_name"
        },
        "repValuation2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second valuation section in reports, for example a valuation that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Simple", "Detailed" ]
        },
        "sessionCreationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation date of on order session. This date must be define by a default value."
        },
        "sessionCreationUserCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionCreationUserName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionDescriptionC" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt allows the user to set the description of an order session or an investment proposal."
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "strategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy set in the domain context when the strategy dimension is a single strategy."
        },
        "strategyDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy dimension set in the domain context.",
          "enum" : [ "Strategy", "Strategy List" ]
        },
        "taxLotE" : {
          "type" : "string",
          "description" : "Specifies if the tax lots are included in the function.",
          "enum" : [ "<None>", "Position", "Tax Lot", "PTCC Only Simulation" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        },
        "updateRightF" : {
          "type" : "boolean",
          "description" : "If the order sessionâ€™s data security profile is contained in the userâ€™s data profile composition with its update flag (auth_update_f) set to True, this attribute is set to True. Only sessions whose dataset attribute update_right_f = True can be modified by the user."
        }
      }
    },
    "createOrderSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSessionWithPermValues"
        }
      }
    },
    "createOrderSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderWithPermValues"
        }
      }
    },
    "createPayInstructionsInput" : {
      "type" : "object",
      "required" : [ "accInstrCode", "currencyCode", "operNatE", "operSubtypeCode", "operTypeCode", "portfolioCode" ],
      "properties" : {
        "accInstrCode" : {
          "type" : "string",
          "description" : "Reference to the Account (instrument) associated to the Payment Instruction."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Reference to the Currency associated to the Payment Instruction."
        },
        "operNatE" : {
          "type" : "string",
          "description" : "Reference to the Operation Nature associated to the Payment Instruction.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "operSubtypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Subtype associated to the Payment Instruction."
        },
        "operTypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Type associated to the Payment Instruction."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the Portfolio associated to the Payment Instruction."
        }
      }
    },
    "createPayInstructionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PayInstructionWithPermValues"
        }
      }
    },
    "createRebalanceOrderSessionsInput" : {
      "type" : "object",
      "required" : [ "ThirdPartyCode", "compDataE", "currencyCode", "derivationE", "eventGenNatE", "funcResultStatusE", "genGlobalOrderE", "instrDimMarketSegName", "instrumentCode", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "orderStatusE", "portConsRuleE", "portfolioCode", "portfolioListCode", "qtyAllocNatE", "sessionNatureE", "sessionStatusE", "typeCode" ],
      "properties" : {
        "ThirdPartyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nClient set in the domain context when the portfolio dimension is a client (PortfolioThirdParty)."
        },
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "compDataE" : {
          "type" : "string",
          "description" : "This field is used in the Allocate Order, Benchmark Storage, Book Adjustment, Check Strategy, Portfolio Storage, Return Analysis, Strategy Reconciliation, Synthetic Administration, Order Entry and Valuation Storage functions. For all the other financial functions this value is restricted to \"On-Line\".",
          "enum" : [ "On-line", "Compute New", "Replace Old", "Use", "Delete", "Delete All", "View", "Simulate", "New, Permanent", "New, Non-permanent", "Replace, Permanent", "Replace, Non-permanent", "Compute New - Synth Admin", "Replace Old - Synth Admin", "Compute - History", "Delete - Perf Attrib", "Delete - Return Analysis", "Delete - Standard Perf", "On-Line Mkt-Value P&L", "Append", "Include Orders", "Insure Valid by Update", "Insure Valid by Online", "Use Stored If Not Online", "Replace Existing", "No compute", "Sum & Save Strategy" ]
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "derivationE" : {
          "type" : "string",
          "description" : "Used by the Check Strategy and Strategy Reconciliation functions. The possible values are:\r\n\r\n1. Yes. A derivation is performed on the strategies that do not have a valid derived strategy at the current date.\r\n\r\n2. No. No derivation is performed. This means that the investment objectives as defined are used. The modelling constraints are not taken into account.\r\n\r\n3. OnLine. A derivation is performed on every strategy. \r\n\r\nNote: No derivation is performed if there are no constraints linked to the portfolio.",
          "enum" : [ "Yes", "No", "Online" ]
        },
        "eventGenNatE" : {
          "type" : "string",
          "description" : "This parameter allows user to validate proposed orders before transforming them into operations (Event/Operation to be confirmed). \r\n\r\nIf you choose Automatic from the drop-down list, it saves operations directly, allowing you to enable subscription and send them to external order processing systems.",
          "enum" : [ "Automatic", "Events to be confirmed", "Events/Opers to be confirmed", "Gen. events with instrument", "Gen. events with instr+portf.", "Adjustment to be confirmed", "Automatic No Session", "Create Session", "Check & Publish", "Check, Split & Publish", "Create Session & Check", "Check, Case split & Publish" ]
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "instrDimMarketSegId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instrDimMarketSegName" : {
          "type" : "string"
        },
        "instrumentCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument set in the domain context when the instrument dimension is a single instrument."
        },
        "instrumentDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument dimension set in the domain context.",
          "enum" : [ "Instrument", "Instrument List", "Currency", "Currency List", "Instrument Enumeration", "Market Segment" ]
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "orderStatusE" : {
          "type" : "string",
          "description" : "Specifies the status of the orders generated using the Allocate Order or the Strategy Reconciliation functions. The permitted values are the same as those of an ordinary operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "portConsRuleE" : {
          "type" : "string",
          "description" : "Specifies the desired portfolio consolidation type. The permitted values are:\r\n1. Merged\r\n2. Detailed\r\n3. Tiled\r\n4. Burst\r\n5. Detailed Children\r\n6. Merged TWR\r\n7. Merged Hierarchy\r\nThe Consolidation section is only taken into account when a business function\r\nis run for a group of portfolios.",
          "enum" : [ "Merged", "Detailed", "Tiled", "Burst", "Detailed Children", "Merged TWR", "Merged Hierarchy" ]
        },
        "portObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Specifies a Portfolio, a Portfolio List or a Third party.\r\nThis field contains the ID of an occurrence in the table defined by the 'dim_port_dict_id' field (if not NULL)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "createRebalanceOrderSessionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/RebalanceOrderSessionWithPermValues"
        }
      }
    },
    "createSimulatedTaxLotPickingInput" : {
      "type" : "object",
      "required" : [ "funcResultId", "operationId", "priorityN", "quantityN", "taxLotInitialId" ],
      "properties" : {
        "funcResultId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "operationId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "priorityN" : {
          "type" : "number"
        },
        "quantityN" : {
          "type" : "number"
        },
        "targetN" : {
          "type" : "number"
        },
        "taxLotInitialId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "createSimulatedTaxLotPickingSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/SimulatedTaxLotPickingWithPermValues"
        }
      }
    },
    "getAccountListSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/Account"
        }
      }
    },
    "getAllocationOrderSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AllocationOrderSessions"
        }
      }
    },
    "getAllocationRuleDefinitionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AllocationRuleDefinition"
        }
      }
    },
    "getCaseClarificationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CaseClarificationAll"
        }
      }
    },
    "getCaseManagementSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CaseManagementAll"
        }
      }
    },
    "getCasesSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "PCK_TCIB_CASES",
          "items" : {
            "type" : "object",
            "properties" : {
              "SeverityIndicator" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Severity Indicator"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "CASE_CODE" : {
                "type" : "string",
                "description" : "Case CODE"
              },
              "NATURE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Nature"
              },
              "SERVER_FILTER" : {
                "type" : "boolean",
                "description" : "Server filter"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Portfolio Name"
              },
              "SUMMARY" : {
                "type" : "string",
                "description" : "Summary"
              },
              "DESCRIPTION" : {
                "type" : "string",
                "description" : "DESCRIPTION"
              },
              "SEVERITY_LABEL" : {
                "type" : "string",
                "description" : "Severity Label"
              },
              "CLARIFICATION_CODE" : {
                "type" : "string",
                "description" : "CLARIFICATION_CODE"
              },
              "portfolioCode" : {
                "type" : "string",
                "description" : "Portfolio"
              },
              "SEVERITY" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Severity"
              },
              "CLARIFICATION_DESC" : {
                "type" : "string",
                "description" : "CLARIFICATION_DESC"
              }
            }
          }
        }
      }
    },
    "getCashTransferSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CashTransfer"
        }
      }
    },
    "getCorpActionDetailsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CorpActionDetail"
        }
      }
    },
    "getCounterPartySuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CounterParty"
        }
      }
    },
    "getDetailsCorporateActionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SearchCorpActionDetail"
          }
        }
      }
    },
    "getDraftOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/DraftOperation"
        }
      }
    },
    "getDraftOrdersSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "PCK_TCIB_PG_ORDERS_DRAFT",
          "items" : {
            "type" : "object",
            "properties" : {
              "CommPartyType" : {
                "type" : "string",
                "description" : "CommPartyType"
              },
              "VIEW_RIGHT" : {
                "type" : "boolean"
              },
              "QUANTITY" : {
                "type" : "number",
                "description" : "Quantity"
              },
              "LAST_QUOTE_N" : {
                "type" : "number",
                "description" : "Order Net amount"
              },
              "bp_6_type_code" : {
                "type" : "string",
                "description" : "BP6 type code"
              },
              "OrderNatE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "OrderNatE"
              },
              "bp_7_amount_m" : {
                "type" : "number",
                "description" : "BP7 Amount"
              },
              "CompoundOrderCount" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Number of Orders"
              },
              "UPDATE_RIGHT" : {
                "type" : "boolean",
                "description" : "UPDATE_RIGHT"
              },
              "ACCOUNT" : {
                "type" : "string",
                "description" : "Account"
              },
              "SERVER_FILTER" : {
                "type" : "boolean"
              },
              "ACCR_INTERESTS" : {
                "type" : "number",
                "description" : "Accrued Interests"
              },
              "PRICE_CCY" : {
                "type" : "string",
                "description" : "Price Ccy"
              },
              "PTF_CURRENCY" : {
                "type" : "string",
                "description" : "Portfolio currency"
              },
              "ORDER_CURRENCY" : {
                "type" : "string",
                "description" : "Order currency"
              },
              "PERC_PORTFOLIO" : {
                "type" : "number",
                "description" : "PERC_PORTFOLIO"
              },
              "ParentOperationID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Parent Operation ID"
              },
              "OrderInitiator" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Order initiator"
              },
              "bp_9_type_code" : {
                "type" : "string",
                "description" : "BP9 type code"
              },
              "INSTR_CODE" : {
                "type" : "string",
                "description" : "Instr Code"
              },
              "StopQuoteN" : {
                "type" : "number",
                "description" : "Stop Quote N"
              },
              "bp_2_amount_m" : {
                "type" : "number",
                "description" : "BP2 Amount"
              },
              "PRICE" : {
                "type" : "number",
                "description" : "Price"
              },
              "ORDER_PTF_AMOUNT" : {
                "type" : "number",
                "description" : "Order Net amount in PTF Ccy"
              },
              "PORTFOLIO_CODE" : {
                "type" : "string",
                "description" : "Portfolio Code"
              },
              "TOTAL_AMT_SELL" : {
                "type" : "number",
                "description" : "Total Amount Sell"
              },
              "Market" : {
                "type" : "string",
                "description" : "Market"
              },
              "DELETE_RIGHT" : {
                "type" : "boolean",
                "description" : "DELETE_RIGHT"
              },
              "bp_7_type_code" : {
                "type" : "string",
                "description" : "BP7 type code"
              },
              "ORDER_NATURE_TXT" : {
                "type" : "string",
                "description" : "Order nature enum"
              },
              "FACTSHEET_E" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Factsheet enum id"
              },
              "bp_3_type_code" : {
                "type" : "string",
                "description" : "BP3 type code"
              },
              "TOTAL_AMT_BUY" : {
                "type" : "number",
                "description" : "Total Amount Buy"
              },
              "ORDER_NATURE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Order nature enum"
              },
              "ORDER_NET_AMOUNT" : {
                "type" : "number",
                "description" : "Order Net amount"
              },
              "INSTR_DENOM" : {
                "type" : "string",
                "description" : "Instrument"
              },
              "OrderLimitD" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "OrderLimitD"
              },
              "order_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "order id"
              },
              "CheckParent" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Check Parent"
              },
              "OtcOrder" : {
                "type" : "string",
                "description" : "OtcOrder"
              },
              "bp_1_amount_m" : {
                "type" : "number",
                "description" : "BP1 Amount"
              },
              "bank_fee_m" : {
                "type" : "number",
                "description" : "Bank fee Amount"
              },
              "bp_8_type_code" : {
                "type" : "string",
                "description" : "BP8 type code"
              },
              "OrderTypeCode" : {
                "type" : "string",
                "description" : "OrderTypeCode"
              },
              "bank_fee_curr_id" : {
                "type" : "string",
                "description" : "Bank Fee Currency"
              },
              "TARGET_NATURE" : {
                "type" : "string",
                "description" : "Target Nature"
              },
              "bp_6_amount_m" : {
                "type" : "number",
                "description" : "BP6 Amount"
              },
              "bp_1_type_code" : {
                "type" : "string",
                "description" : "BP1 type code"
              },
              "OrderFeeP" : {
                "type" : "number",
                "description" : "OrderFeeP"
              },
              "bp_3_amount_m" : {
                "type" : "number",
                "description" : "BP3 Amount"
              },
              "Derivative_Ord_E" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Derivative_Ord_E"
              },
              "bp_1_currency_id" : {
                "type" : "string",
                "description" : "BP1 Currency"
              },
              "OrderInclusion" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Order inclusion"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Portfolio Name"
              },
              "bp_2_currency_id" : {
                "type" : "string",
                "description" : "BP2 Currency"
              },
              "TARGET_OBJ" : {
                "type" : "number",
                "description" : "Target Objective"
              },
              "OrderFeeE" : {
                "type" : "number",
                "description" : "OrderFeeE"
              },
              "ContactMethod" : {
                "type" : "string",
                "description" : "ContactMethod"
              },
              "ORDER_GROSS_AMOUNT" : {
                "type" : "number",
                "description" : "Order Gross amount"
              },
              "bp_4_type_code" : {
                "type" : "string",
                "description" : "BP4 type code"
              },
              "TARGET_OBJ_DISP" : {
                "type" : "string",
                "description" : "Target Obj Disp"
              },
              "CompoundOrderCode" : {
                "type" : "string",
                "description" : "Switch Order Code"
              },
              "bp_5_amount_m" : {
                "type" : "number",
                "description" : "BP5 Amount"
              },
              "bp_8_currency_id" : {
                "type" : "string",
                "description" : "BP8 Currency"
              },
              "bp_9_currency_id" : {
                "type" : "string",
                "description" : "BP9 Currency"
              },
              "bp_8_amount_m" : {
                "type" : "number",
                "description" : "BP8 Amount"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "ORDER_CODE" : {
                "type" : "string",
                "description" : "Order Code"
              },
              "bp_6_currency_id" : {
                "type" : "string",
                "description" : "BP6 Currency"
              },
              "taxlotF" : {
                "type" : "boolean"
              },
              "bp_4_currency_id" : {
                "type" : "string",
                "description" : "BP4 Currency"
              },
              "bp_5_currency_id" : {
                "type" : "string",
                "description" : "BP5 Currency"
              },
              "bp_2_type_code" : {
                "type" : "string",
                "description" : "BP2 type code"
              },
              "bp_3_currency_id" : {
                "type" : "string",
                "description" : "BP3 Currency"
              },
              "communication_d" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "communication date"
              },
              "DIVIDEND_PAYMENT_OPTION" : {
                "type" : "string",
                "description" : "Dividend Payment Option"
              },
              "bp_4_amount_m" : {
                "type" : "number",
                "description" : "BP4 Amount"
              },
              "CompoundImpactRule" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Compound Order Impact Rue"
              },
              "bp_5_type_code" : {
                "type" : "string",
                "description" : "BP5 type code"
              },
              "bp_9_amount_m" : {
                "type" : "number",
                "description" : "BP9 Amount"
              },
              "FACTSHEET" : {
                "type" : "string",
                "description" : "Factsheet"
              },
              "bp_7_currency_id" : {
                "type" : "string",
                "description" : "BP7 Currency"
              },
              "TARGET_TYPE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Target Nature"
              },
              "CompoundMasterSlave" : {
                "type" : "string",
                "description" : "Compound Order Identification"
              },
              "LimitQuoteN" : {
                "type" : "number",
                "description" : "Order Net amount"
              },
              "statusE" : {
                "type" : "string",
                "description" : "status"
              }
            }
          }
        }
      }
    },
    "getExternalOperationCashSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/ExternalOperationCash"
        }
      }
    },
    "getForexOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/ForexOperation"
        }
      }
    },
    "getOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/Operation"
        }
      }
    },
    "getOrderExecutionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Format used for Executions",
          "items" : {
            "type" : "object",
            "properties" : {
              "Quote" : {
                "type" : "number",
                "description" : "Quote"
              },
              "ExecutionDateTimeTZ" : {
                "type" : "string",
                "description" : "Execution Time"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "Price" : {
                "type" : "number",
                "description" : "Price"
              },
              "ExtOrderId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Ext Order Id"
              },
              "NetAmount" : {
                "type" : "number",
                "description" : "Net Amount"
              },
              "Quantity" : {
                "type" : "number",
                "description" : "Quantity"
              },
              "ExecutionDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Execution Date"
              },
              "TradeCurrencyCd" : {
                "type" : "string",
                "description" : "Trade Currency Code"
              }
            }
          }
        }
      }
    },
    "getOrderSessionCommentSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSessionComment"
        }
      }
    },
    "getOrderSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSession"
        }
      }
    },
    "getOrderSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/Order"
        }
      }
    },
    "getPayInstructionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PayInstruction"
        }
      }
    },
    "getPendingOrderDetailsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PendingOrderDetails"
        }
      }
    },
    "getPendingOrdersSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Pending Orders",
          "items" : {
            "type" : "object",
            "properties" : {
              "Account" : {
                "type" : "string",
                "description" : "Account"
              },
              "OrderTypeDenom" : {
                "type" : "string",
                "description" : "Order Type denomination"
              },
              "OMSRequestStatus" : {
                "type" : "string",
                "description" : "OMS Request Status"
              },
              "OrderGrossAmount" : {
                "type" : "number",
                "description" : "Order Gross Amount"
              },
              "ACCOUNT_CURRENCY" : {
                "type" : "string",
                "description" : "Account currency"
              },
              "adjInstrCode" : {
                "type" : "string",
                "description" : "Adjustment Instrument Code"
              },
              "PARENT_OPER_CODE" : {
                "type" : "string",
                "description" : "Parent operation code"
              },
              "ContactPerson" : {
                "type" : "string",
                "description" : "Contacted by"
              },
              "ClientInstruction" : {
                "type" : "string",
                "description" : "Client Instruction"
              },
              "status_id" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "status_id"
              },
              "SERVER_FILTER" : {
                "type" : "boolean"
              },
              "StdCommPct" : {
                "type" : "number"
              },
              "ORDER_CURRENCY" : {
                "type" : "string",
                "description" : "Order currency"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ptf id for precomp data"
              },
              "MaxSubscriptionAmt" : {
                "type" : "number",
                "description" : "Amount Range"
              },
              "OrderInitiator" : {
                "type" : "string",
                "description" : "Order Initiator"
              },
              "IpoLotSize" : {
                "type" : "number",
                "description" : "IPO Lot SIze"
              },
              "ContactDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Contact Date"
              },
              "Bid3Amount" : {
                "type" : "number",
                "description" : "Bid Amount"
              },
              "INSTR_CODE" : {
                "type" : "string",
                "description" : "Instr code"
              },
              "Tenor_freq_n" : {
                "type" : "number",
                "description" : "Tenor Frequency"
              },
              "Negotiation" : {
                "type" : "integer",
                "format" : "int32"
              },
              "MARKET" : {
                "type" : "string",
                "description" : "Market"
              },
              "adjInstrDenom" : {
                "type" : "string",
                "description" : "Adjustment Instrument Denomination"
              },
              "functionResultCode" : {
                "type" : "string",
                "description" : "Function Result Code"
              },
              "STOP" : {
                "type" : "number",
                "description" : "Stop Price"
              },
              "ProductCode" : {
                "type" : "string",
                "description" : "Product Code"
              },
              "PORTFOLIO_CODE" : {
                "type" : "string",
                "description" : "Portfolio code"
              },
              "COMPOUND_ORDER_CODE" : {
                "type" : "string",
                "description" : "Switch order code"
              },
              "RenewalTreatment" : {
                "type" : "string",
                "description" : "Renewal Treatment"
              },
              "UnExecQuantity" : {
                "type" : "number",
                "description" : "Unexec. Qty"
              },
              "NegotiatedCommPct" : {
                "type" : "number"
              },
              "ACTION_RIGHT_REJECT" : {
                "type" : "boolean",
                "description" : "Action Right Reject"
              },
              "MarketRate" : {
                "type" : "number",
                "description" : "Market Rate"
              },
              "AutoRenewal" : {
                "type" : "string",
                "description" : "Auto renewal"
              },
              "Underlying" : {
                "type" : "string",
                "description" : "Underlying Instrument"
              },
              "Bid1Quantity" : {
                "type" : "number",
                "description" : "Bid Quantity"
              },
              "INSTR_DENOM" : {
                "type" : "string",
                "description" : "Instrument Denomination"
              },
              "StdCommAmt" : {
                "type" : "number"
              },
              "order_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "order id"
              },
              "OrderTypeCode" : {
                "type" : "string",
                "description" : "Order Type Code"
              },
              "Bid2Quantity" : {
                "type" : "number",
                "description" : "Bid Quantity"
              },
              "Bid1Amount" : {
                "type" : "number",
                "description" : "Bid Amount"
              },
              "ACTION_RIGHT_VALIDATE" : {
                "type" : "boolean",
                "description" : "Action Right Validate"
              },
              "ACTION_RIGHT_CANCEL" : {
                "type" : "boolean",
                "description" : "Action Right Cancel"
              },
              "NoticeDays" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Notice Days"
              },
              "ORDER_ENTRY_DATETIME_TZ" : {
                "type" : "string",
                "description" : "Entry Date (User Time Zone)"
              },
              "NegotiatedCommCurr" : {
                "type" : "string",
                "description" : " "
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "manager id"
              },
              "ValueDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Value Date"
              },
              "AvgExecQuote" : {
                "type" : "number",
                "description" : "Avg. Exec. Quote"
              },
              "ContactMethod" : {
                "type" : "string",
                "description" : "Contact Method"
              },
              "InterestRate" : {
                "type" : "number",
                "description" : "interest Rate"
              },
              "Bid3Price" : {
                "type" : "number",
                "description" : "Bid Price"
              },
              "ORDER_FLAG" : {
                "type" : "boolean",
                "description" : "Order Flag"
              },
              "adjInstrQuantity" : {
                "type" : "number",
                "description" : "Adj. Instr Quantity"
              },
              "ExpirationDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Expiration Date"
              },
              "CompoundImpactRule" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Compound Order Impact Rule"
              },
              "IpoListingDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "IPO Listing Date"
              },
              "LIMIT_NATURE" : {
                "type" : "string",
                "description" : "Limit nature name"
              },
              "MaxSubscriptionPrice" : {
                "type" : "number",
                "description" : "Price Range"
              },
              "CompoundMasterSlave" : {
                "type" : "string",
                "description" : "Compound Order Identification"
              },
              "StpOrder" : {
                "type" : "boolean",
                "description" : "Stp Order"
              },
              "ProductName" : {
                "type" : "string",
                "description" : "Product Name"
              },
              "QUANTITY" : {
                "type" : "number",
                "description" : "Quantity"
              },
              "VALIDITY_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Limit date"
              },
              "BidType" : {
                "type" : "string",
                "description" : "Bid Type"
              },
              "Bid2Price" : {
                "type" : "number",
                "description" : "Bid Price"
              },
              "StdCommCurr" : {
                "type" : "string"
              },
              "CompoundOrderCount" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Number of Orders"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Client id"
              },
              "Bid3Quantity" : {
                "type" : "number",
                "description" : "Bid Quantity"
              },
              "IpoIssueType" : {
                "type" : "string",
                "description" : "Issue Type"
              },
              "STATUS" : {
                "type" : "string",
                "description" : "Status name"
              },
              "ClientName" : {
                "type" : "string",
                "description" : "Client Name"
              },
              "ExecQuantity" : {
                "type" : "number",
                "description" : "Exec. Qty"
              },
              "CorrAmount" : {
                "type" : "number"
              },
              "SubscriptionPrice" : {
                "type" : "number",
                "description" : "Offer Price"
              },
              "Bid1Price" : {
                "type" : "number",
                "description" : "Bid Price"
              },
              "Tenor_freq_unit" : {
                "type" : "string",
                "description" : "Tenor Frequency unit"
              },
              "OMSRequestType" : {
                "type" : "string",
                "description" : "OMS Request Type"
              },
              "Bid2Amount" : {
                "type" : "number",
                "description" : "Bid Amount"
              },
              "PRICE" : {
                "type" : "number",
                "description" : "Price"
              },
              "DepositType" : {
                "type" : "string",
                "description" : "Deposit Type"
              },
              "CommTaxes" : {
                "type" : "number"
              },
              "ORDER_NATURE" : {
                "type" : "string",
                "description" : "Order nature name"
              },
              "ORDER_NET_AMOUNT" : {
                "type" : "number",
                "description" : "Order Net amount"
              },
              "FixingDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Fixing Date"
              },
              "INSTR_NAME" : {
                "type" : "string",
                "description" : "Instrument Name"
              },
              "ACTION_RIGHT_GROUP" : {
                "type" : "boolean",
                "description" : "Action Right Group"
              },
              "OtcOrder" : {
                "type" : "string",
                "description" : "OtcOrder"
              },
              "NegotiatedCommAmt" : {
                "type" : "number"
              },
              "LIMIT" : {
                "type" : "number",
                "description" : "Limit price"
              },
              "TotalBidQuantity" : {
                "type" : "number",
                "description" : "Total Bid Quantity"
              },
              "MinSubscriptionPrice" : {
                "type" : "number",
                "description" : "Price Range"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Portfolio name"
              },
              "Counterparty" : {
                "type" : "string",
                "description" : "Counterparty"
              },
              "ORDER_ENTRY_DATE" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "DD/MM/YYYY HH:II:SS"
              },
              "ActionRightUpdate" : {
                "type" : "boolean",
                "description" : "Update Right"
              },
              "MinSubscriptionAmt" : {
                "type" : "number",
                "description" : "Amount Range"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "StrikePrice" : {
                "type" : "number",
                "description" : "StrikePrice"
              },
              "ORDER_CODE" : {
                "type" : "string",
                "description" : "Order code"
              },
              "IpoEndDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "IPO End Date"
              },
              "MaturityDate" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "MaturityDate"
              },
              "ClientRate" : {
                "type" : "number",
                "description" : "Client Rate"
              },
              "OPERATION_DATE" : {
                "type" : "string",
                "format" : "date"
              },
              "adjNature" : {
                "type" : "string",
                "description" : "Adjustment Nature"
              },
              "DIVIDEND_PAYMENT_OPTION" : {
                "type" : "string",
                "description" : "Dividend Payment Option"
              },
              "STANDING_INSTRUCTION_FILTER" : {
                "type" : "boolean",
                "description" : "Filter on standing instructions"
              },
              "ClientCode" : {
                "type" : "string",
                "description" : "Client Code"
              }
            }
          }
        }
      }
    },
    "getRebalanceOrderSessionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/RebalanceOrderSession"
        }
      }
    },
    "getSimulatedTaxLotPickingSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/SimulatedTaxLotPicking"
        }
      }
    },
    "getSystematicPlanOrdersSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "List of orders for a systematic plan",
          "items" : {
            "type" : "object",
            "properties" : {
              "instrCode" : {
                "type" : "string",
                "description" : "Instrument Code"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "targetAmount" : {
                "type" : "number",
                "description" : "targetAmount"
              },
              "currentPosition" : {
                "type" : "number",
                "description" : "currentPosition"
              },
              "standingInstruction" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "standingInstruction"
              },
              "instrDenom" : {
                "type" : "string"
              },
              "minInitReqSummary" : {
                "type" : "string",
                "description" : "minInitReqSummary"
              },
              "instrName" : {
                "type" : "string"
              },
              "indicativeOrderAmt" : {
                "type" : "number",
                "description" : "Indicative Order Amount"
              },
              "investTargetWeight" : {
                "type" : "number",
                "description" : "Target Weight of the investment"
              },
              "minReqFlag" : {
                "type" : "boolean",
                "description" : "minReqFlag"
              },
              "DIVIDEND_PAYMENT_OPTION" : {
                "type" : "string",
                "description" : "Dividend Payment Option"
              },
              "feeSetupOverride" : {
                "type" : "string",
                "description" : "Fee Setup Override"
              },
              "dividendPaymentOption" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "dividendPaymentOption"
              },
              "minInitialAmount" : {
                "type" : "number",
                "description" : "minInitialAmount"
              },
              "minInitReqFlag" : {
                "type" : "boolean",
                "description" : "minInitReqFlag"
              },
              "minSubReqFlag" : {
                "type" : "boolean",
                "description" : "minSubReqFlag"
              },
              "IOright" : {
                "type" : "boolean",
                "description" : "IOright"
              },
              "indicativeOrderQty" : {
                "type" : "number",
                "description" : "Indicative Order Quantity"
              },
              "indicativOrderCcy" : {
                "type" : "string",
                "description" : "Currency of the Indicative Order Amount"
              },
              "totalInvestmentAmt" : {
                "type" : "number",
                "description" : "totalInvestmentAmt"
              },
              "minSubsequentAmount" : {
                "type" : "number",
                "description" : "minSubsequentAmount"
              },
              "minSubReqSummary" : {
                "type" : "string",
                "description" : "minSubReqSummary"
              }
            }
          }
        }
      }
    },
    "initiateFullLiquidationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/WithdrawalRequest"
        }
      }
    },
    "initiateOrderSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSession"
        }
      }
    },
    "initiateWithdrawalSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSession"
        }
      }
    },
    "modifyAccountInput" : {
      "type" : "object",
      "required" : [ "natureE", "portfolioCode", "refCurrCode" ],
      "properties" : {
        "natureE" : {
          "type" : "string",
          "description" : "Specifies the nature of the instrument. A mandatory hard-coded classifying attribute for distinctive processing.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Specifies the portfolio to which a cash account belongs."
        },
        "refCurrCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the instrument. For bond-like instruments, this is the currency of the principal."
        }
      }
    },
    "modifyAccountSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AccountWithPermValues"
        }
      }
    },
    "modifyAllocationOrderInput" : {
      "type" : "object",
      "required" : [ "compDataE", "currencyCode", "funcResultStatusE", "genGlobalOrderE", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "portfolioDimPortfolioCode", "portfolioListCode", "qtyAllocNatE", "sessionStatusE", "typeCode" ],
      "properties" : {
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "compDataE" : {
          "type" : "string",
          "description" : "This field is used in the Allocate Order, Benchmark Storage, Book Adjustment, Check Strategy, Portfolio Storage, Return Analysis, Strategy Reconciliation, Synthetic Administration, Order Entry and Valuation Storage functions. For all the other financial functions this value is restricted to \"On-Line\".",
          "enum" : [ "On-line", "Compute New", "Replace Old", "Use", "Delete", "Delete All", "View", "Simulate", "New, Permanent", "New, Non-permanent", "Replace, Permanent", "Replace, Non-permanent", "Compute New - Synth Admin", "Replace Old - Synth Admin", "Compute - History", "Delete - Perf Attrib", "Delete - Return Analysis", "Delete - Standard Perf", "On-Line Mkt-Value P&L", "Append", "Include Orders", "Insure Valid by Update", "Insure Valid by Online", "Use Stored If Not Online", "Replace Existing", "No compute", "Sum & Save Strategy" ]
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "portfolioDimPortfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "modifyAllocationOrderSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AllocationOrderSessionsWithPermValues"
        }
      }
    },
    "modifyAllocationRuleDefinitionsInput" : {
      "type" : "object",
      "required" : [ "actualOrderNatE", "instrCode", "opNatE", "portfolioCode", "stratNatE", "targetNatureE" ],
      "properties" : {
        "actualOrderNatE" : {
          "type" : "string",
          "description" : "Indicates the order nature assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nParent attribute is order_nat_e attribute in the operation entity.\r\n\r\nA large number of permitted values with user-defined labels (dict_perm_val_dat.usr.sql) is allowed.\r\n\r\nIn the standard packaging, the following natures are defined:\r\n- 0 = <None>\r\n- 1 = Market\r\n- 2 = Limit\r\n- 3 = Stop\r\n- 4 = Stop Limit",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "instrCode" : {
          "type" : "string",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "instrId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "References an instrument composing a strategy (typically for Model Portfolio)."
        },
        "maxWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the maximum weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., maximum weight) correspond to a percentage of the market value of the parent market segment. The maximum weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': maximum weight 50%.\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20% \r\n- Market Segment 'Finance': maximum weight contribution 20*50% = 10%"
        },
        "minOrderQuantityN" : {
          "type" : "number",
          "description" : "Manages the ability to set a minimum order quantity in the Allocate Order domain (i.e., Order Details screen)."
        },
        "objQtyN" : {
          "type" : "number",
          "description" : "Specifies the quantity to hold in order to be in line with the objective weights linked to the portfolio."
        },
        "objWeightContMargN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight. It is possible to indicate a fluctuation margin. \r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a pecentage of the market value of the whole portfolio.\r\n\r\nFor example, consider the following hierarchy of strategies :\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20%, margin 5%\r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Marker Segment 'Finance': objective weight 50%, margin 5%\r\n- Market Segment  'Stock / USD': objective weight contribution 100% *20%, objective weight contribution margin 100%*5% = 5%\r\n- Market Segment 'Finance': objective weight contribution 20*50% = 10%, objective weight contribution margin 20%*5% = 1%"
        },
        "objWeightContN" : {
          "type" : "number",
          "description" : "Users can define investment targets within a \"strategy element\". The investment targets that may be assigned include the percentage weight.\r\n\r\nSince users can define sub-allocations or model portfolios assigned to a parent market segment of an asset allocation, the different targets (i.e., objective weight) correspond to a percentage of the market value of the parent market segment. The objective weight contribution corresponds to a percentage of the market value of the whole portfolio.\r\n\r\nExample:\r\n- Allocation 'Instrument Nature / Reference Currency' with Market Segment 'Stock / USD': objective weight 20% \r\n- Sub-allocation 'Sector' (one dimension allocation) linked to the market segment 'Stock / USD' with Market Segment 'Finance': objective weight 50%.\r\n\r\nThe above hierarchy of strategies will lead to the following weights:\r\nMarket Segment 'Stock / USD': objective weight contribution 100%*20% = 20%\r\nMarket Segment 'Finance': objective weight contribution 20*50% = 10%"
        },
        "objWeightN" : {
          "type" : "number",
          "description" : "Indicates the target set in the \"strategy element\".\r\n\r\nUsers can define investment targets within a strategy element. The investment targets that can be assigned include the percentage weight."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Permits the ability to characterise different natures of operations.",
          "enum" : [ "Buy", "Sell" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the order limit date that is assigned to an order that can be specified in the Allocate Order domain.\r\n\r\nWhen an order is limited in time, the valuation should not consider these positions if the limit date is not in position anymore."
        },
        "orderQtyN" : {
          "type" : "number",
          "description" : "Indicates the quantity to buy or sell as suggested by the system in order to be in line with the corresponding objective weight (taking into account the round lot quantity of the instrument)."
        },
        "orderQuoteN" : {
          "type" : "number",
          "description" : "The role played by this field depends on the context. In the Order Details screen of the Allocate Order domain, it is the limit date assigned to an order. In the extended strategy element structure returned by both Allocate Order and Strategy Reconciliation, it is the quote used to compute the order gross amount and is fed as follows :\r\n- Market quote if order nature = Market order\r\n- Limit quote if order nature = Limit\r\n- Stop quote if order nature = Stop (Market)\r\n- Limit quote if order nature = Stop-Limit\r\n\r\nThe idea is that the order gross amount gives the maximum exposure of the position.\r\nNote that the quote in buy/sell_operation entity is equal to the order_quote (extended strategy element entity)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of a portfolio."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote assigned to an order, specified when entering an order in the Allocate Order domain (i.e., Order Details screen)."
        },
        "stratNatE" : {
          "type" : "string",
          "description" : "Indicates the nature of the strategy that is at the origin of the occurrence in strategy_element.",
          "enum" : [ "Asset Allocation", "Model Portfolio", "Recommendation List", "Constraint Set", "Index", "Currency Allocation", "Global Order Quantity", "Instr Order Quantity", "Instr Result Quantity", "Instr Order Portfolio %", "Instr Result Portfolio %", "Market Seg Result Portfolio %", "Switch Instrument", "Cash Result Portfolio %", "Currency Hedge", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Weighted Switch Instrument", "Trading Constraint", "Allocation Constraint", "Security Constraint", "Investment profile", "Benchmark", "Surveyed Securities List", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Composite", "Instr. Res. % of Strat Mkt Sgt", "Risk Strategy" ]
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is only used in the Web standard packaging for defining whether an order is in amount or in quantity.",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        }
      }
    },
    "modifyAllocationRuleDefinitionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/AllocationRuleDefinitionWithPermValues"
        }
      }
    },
    "modifyCaseClarificationInput" : {
      "type" : "object",
      "required" : [ "code", "reasonC" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Clarification's code"
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "reasonC" : {
          "type" : "string",
          "description" : "Free text zone where Users can explain / give clarification to Case.\r\nThis zone could store until 2 000 characters."
        }
      }
    },
    "modifyCaseClarificationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CaseClarificationAllWithPermValues"
        }
      }
    },
    "modifyCaseManagementInput" : {
      "type" : "object",
      "required" : [ "criticalnessE", "mainObject", "natureE", "rightToRunF", "statusE", "subNatE" ],
      "properties" : {
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date / Time on which the Case has been created."
        },
        "criticalnessE" : {
          "type" : "string",
          "description" : "This attribute returns the severity set at Strategy & Constraint level.\r\nThe severity is checked regarding the value of system parameters:\r\n1. SESSION_BLOCK_CRITICALNESS: \r\nthe case's severity could block the Order Session (criticalness' value > system parameter's one).\r\n2. STRAT_BLOCKCONSTR_CRITICALNESS: \r\nthe case's severity determines what are Cases that must be clarified.",
          "enum" : [ "<None>", "Not Critical", "Low", "Medium", "High" ]
        },
        "descriptionC" : {
          "type" : "string",
          "description" : "In order to inform or warn Users efficiently, Cases are generated with a description. This caseâ€™s description is based on templates that are managed via the menu Case Message Template."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "mainObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Technical identifier of the main object"
        },
        "natureE" : {
          "type" : "string",
          "description" : "The Case's Nature is directly linked with constraints's family that could be defined into Triple'A:",
          "enum" : [ "<None>", "Strategy", "Trading Holding Constraint", "Modelling Constraint", "Risk", "Input Control", "Lombard", "Buying Power" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "It is used to set conditions on selected lines in a financial function result. \r\nThe evaluated script will only enable the use of the function for a selected line if the result is '1'."
        },
        "statusE" : {
          "type" : "string",
          "description" : "It gives the Case's status:",
          "enum" : [ "Not Clarified", "Clarified" ]
        },
        "subNatE" : {
          "type" : "string",
          "description" : "There is a one-to-one relationship between Case's sub-nature and Strategy objectives & Constraints.\r\nSub-Natures are:",
          "enum" : [ "<None>", "Allocation", "Model Portfolio", "Trading Constraint", "Holding Constraint", "Security In", "Security Out", "Allocation Constraint", "Modelling Trading Constraint", "VaR Percent", "Volatility Percent", "Tracking Error Percent", "Expected Shortfall Percent", "Diversification Effect Percent", "Marginal VaR Percent", "VaR Amount", "Expected Shortfall Amount", "Marginal VaR Amount", "Diversification Effect Amount", "Risk Grade", "Volatility Amount", "Tracking Error Amount", "Shortfall Probability Percent", "Shortfall Probability Amount", "Session IC Status", "Order Input Control", "Marg. Volatility Percent", "Marg. Volatility Amount", "Marg. Tracking Error Percent", "Marg. Tracking Error Amount", "Marg. Expected Shortfall Percent", "Marg. Expected Shortfall Amount", "EVaR Percent", "EVaR Amount", "Marginal EVaR Percent", "Marginal EVaR Amount", "TVaR Percent", "TVaR Amount", "Marginal TVaR Percent", "Marginal TVaR Amount", "Beta", "Super Hedging Price", "Information Ratio", "Sharpe Ratio", "Treynor Ratio", "Jensen's Alpha", "Expected Return Percent", "Expected Return Amount", "Lombard Surplus", "Lombard Deficit", "Lombard Lombard Tech. Error", "Risk Level", "Product Risk Class", "Buying power order amount", "Buying power allowed quantity", "Buying power Tech. Error", "Buying Power condition not met" ]
        }
      }
    },
    "modifyCaseManagementSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CaseManagementAllWithPermValues"
        }
      }
    },
    "modifyCashTransferInput" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "confirmF", "contractLengthUnitE", "dbStatusE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "modifyCashTransferSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CashTransferWithPermValues"
        }
      }
    },
    "modifyCorpActionDetailsInput" : {
      "type" : "object",
      "required" : [ "corporateActionId", "issueTypeE", "seqNumber" ],
      "properties" : {
        "corporateActionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique technical identifier of the corporate action."
        },
        "firstDealingD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "First dealing date: Date at which the trading of new securities begins."
        },
        "ipoLotSizeN" : {
          "type" : "number",
          "description" : "The minimum number of shares that can be bid. Shares can only be bid in multiples of the lot size."
        },
        "issueTypeE" : {
          "type" : "string",
          "description" : "IPO Issue Type-Describes the way in which the final IPO subscription price will be determined",
          "enum" : [ "<NONE>", "Single Bid", "Book Build" ]
        },
        "maxSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Maximum Subscription Amount in case of a book building IPO."
        },
        "maxSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Maximum Subscription Price in case of a book building IPO."
        },
        "minInitSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for initial subscription."
        },
        "minSubscriptionAmtM" : {
          "type" : "number",
          "description" : "Minimum amount required for the subscription."
        },
        "minSubscriptionPriceN" : {
          "type" : "number",
          "description" : "Minimum Subscription Price in case of a book building IPO."
        },
        "paymentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Payment date: Date at which securities/cash will be paid."
        },
        "refundD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Refund, in case of unsuccessful allotments, will be processed on this date."
        },
        "responseDeadlineD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date that the account servicer has set as the deadline to respond with instructions to an outstanding offer or privilege."
        },
        "seqNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of the action."
        },
        "subscriptionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Subscription date: Date at which instructions for a rights subscription will be accepted."
        },
        "subscriptionEndTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "IPO subscription has to be submitted before  this time on the last day of the subscription period."
        },
        "subscriptionPeriodBeginD" : {
          "type" : "string",
          "format" : "date",
          "description" : "Start date of subscription period."
        },
        "subscriptionPeriodEndD" : {
          "type" : "string",
          "format" : "date",
          "description" : "End date of subscription period."
        },
        "subscriptionPriceN" : {
          "type" : "number",
          "description" : "Price at which new securities will be subscribed, e.g. a rights issue."
        }
      }
    },
    "modifyCorpActionDetailsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/CorpActionDetailWithPermValues"
        }
      }
    },
    "ptccSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "publishSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "rebalancingSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "searchAllocationRuleDefinitionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SearchAllocationRuleDefinition"
          }
        }
      }
    },
    "searchCorporateActionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CorporateAction"
          }
        }
      }
    },
    "searchCounterPartySuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SearchCounterParty"
          }
        }
      }
    },
    "startFullLiquidationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/WithdrawalRequest"
        }
      }
    },
    "startWithdrawalSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/WithdrawalRequest"
        }
      }
    },
    "updateDraftOperationInput" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "opFusionRuleE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opFusionRuleE" : {
          "type" : "string",
          "description" : "This attribute stores the lot consumption rule of the draft order and based on this rule the tax lots to be consumed for an order will be sorted. For example, if the lot consumption rule is FIFO, then the tax lots related to the order that are acquired first would be consumed first and so on.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "updateDraftOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/DraftOperationWithPermValues"
        }
      }
    },
    "updateExternalOperationCashInput" : {
      "type" : "object",
      "required" : [ "natureE", "opCurrencyCode", "orderTypeCode", "portfolioCode" ],
      "properties" : {
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        }
      }
    },
    "updateExternalOperationCashSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/ExternalOperationCashWithPermValues"
        }
      }
    },
    "updateForexOperationInput" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "updateForexOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/ForexOperationWithPermValues"
        }
      }
    },
    "updateOperationInput" : {
      "type" : "object",
      "required" : [ "accountCode", "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundImpactRuleE", "confirmF", "contractLengthUnitE", "dbStatusE", "derivativeOrdE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrCode", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "natureE", "noPositionF", "opActionE", "orderFeeE", "orderInclusionE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "portfolioCode", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "stpOrderE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountCode" : {
          "type" : "string",
          "description" : "Reference to a 'cash account' (i.e. an 'instrument' of the 'cash account' nature) that is debited.\r\nThis information is mandatory if the 'account net amount' is different from NULL and different from 0."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commonRefC" : {
          "type" : "string",
          "description" : "This attribute is used by Triple'A Plus T24 Interface in the context of the structured product definition management and with the flow management of the T24 SY module. It is stored for information purposes only."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundImpactRuleE" : {
          "type" : "string",
          "description" : "It defines if a change of a master element order of a compound order impacts the slave element order linked to the master.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderSlaveNbr" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "It defines the position number of a slave element order with nature multiple inside a compound order."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "derivativeOrdE" : {
          "type" : "string",
          "description" : "This field is used for an order on derivatives to store the information if the order opens or closes a position. \r\nIt has no impact on fusion rules and processes.\r\n\r\nFor orders based on other instruments, its value is <None>.",
          "enum" : [ "<None>", "Open", "Close" ]
        },
        "displayConditionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the operation nature that the user is working on and then, derive the behaviour linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventActionE" : {
          "type" : "string",
          "description" : "Used only in the context of the new development of release 7.1, where a new mechanism that allows requesting update and cancel on orders already sent to the OMS (Order Management System) was implemented.\r\nThis attribute is used to send information to TAP so it knows if the desired action is to update or cancel an order and takes appropriate action for the events creation.",
          "enum" : [ "<None>", "Insert", "Update", "Delete", "All DB Access", "Start", "Exit", "Cancel" ]
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalSeqNo" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "External Sequence Number\r\nCan be used to ensure that messages from an external interface are processed in the right order"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxFarLegM" : {
          "type" : "number",
          "description" : "Defines the forward amount when creating an order on forex Swap (on Swap paid leg). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxQuoteN" : {
          "type" : "number",
          "description" : "Defines the swap pips when creating an order on forex Swap. Must be set by Default Value.\r\nSwap pips is the difference between market rate and spot quote."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotLegM" : {
          "type" : "number",
          "description" : "Defines the spot amount when creating an order on forex Swap (on Swap leg)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderCode" : {
          "type" : "string",
          "description" : "When you delete the historical trading data (i.e. order and executions) the code of the order is reported in the accounting operation."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderInclusionE" : {
          "type" : "string",
          "description" : "This attribute defines the orders inclusion into orders sessions.\r\n\r\nThis attribute is a system attribute which can be extended by customization. Orders to be rejected can be configured using ORDER_EXCLUSION system parameter. Please note that the system will automatically reject orders with order_inclusion_e = 0 (Rejected) no matter what the system parameter is.",
          "enum" : [ "Rejected", "Included" ]
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderRejectionC" : {
          "type" : "string",
          "description" : "This attribute permits storing any possible orders rejection comments.\r\n\r\nThis attribute is editable and can be used by any front-ends, proposing a storage for comments explaining the purpose of the orders rejection."
        },
        "orderRejectionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute defines the orders rejection date and time.\r\n\r\nThis attribute is editable and can be used by any front-ends for setting the rejection date and time for orders defined with order_inclusion_e = 0 (rejected)."
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderTypeDecisionN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging to identify the type of order that was used and then, derive the behavior linked to it in the WUI.\r\n\r\nSince Front Office â€“ Portfolio Management 16.04, this logic replaced the usage of Visual Rules in Design Studio."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentExtOpId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Valid only for draft child order : it gives the identifier of its block order. Only handled by the system."
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sessionCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "stpOrderE" : {
          "type" : "string",
          "description" : "Attribute indicating if an order is suitable for straight-through-processing. \r\nIt can be used when building interfaces to order management or back office systems, but has no functionality in the standard product.",
          "enum" : [ "No", "Yes" ]
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "unpaidP" : {
          "type" : "number",
          "description" : "Specifies the unpaid percentage. This information is used when the price calculation rule is \"Partially Paid Bonds\"."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "updateOperationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OperationWithPermValues"
        }
      }
    },
    "updateOrderCodeInput" : {
      "type" : "object",
      "required" : [ "adjNatE", "adjSubPosNat2E", "adjSubPosNat3E", "adjSubPosNatE", "autoRenewalE", "bidTypeE", "checkParentE", "checkStratE", "clientInitE", "commPartyTypeCode", "communicationTypeCode", "compoundOrderMasterEltCode", "compoundOrderSlaveEltCode", "compoundOrderSlaveEltCompoundOrderMasterEltCode", "confirmF", "contractLengthUnitE", "counterpartyThirdCode", "counterpartyThirdName", "dbStatusE", "defaultFusRuleE", "exCouponF", "executOperNatE", "executOperStatusE", "executedF", "factSheetE", "fusionE", "fusionRuleE", "fxRateDirectionF", "instrFundIncomeStyleE", "instrNatureE", "instrReinvestmentAllowedF", "instrSubNatE", "lockNatE", "lockSubPosNat2E", "lockSubPosNat3E", "lockSubPosNatE", "marketThirdName", "natureE", "noPositionF", "opActionE", "opCurrencyCode", "orderFeeE", "orderNatE", "orderPriceNatE", "orderTypeCode", "orderValidityNatE", "parentOperNatE", "paymentOptionE", "pfCurrencyCode", "portfolioName", "priceCalcRuleE", "refNatE", "renewalLengthUnitE", "renewalTreatmentE", "reversOperNatE", "rightToRunF", "statusE", "subPosNat2E", "subPosNat3E", "subPosNatE", "subtypeCode", "targetNatureE", "transactionNatureE", "typeCode" ],
      "properties" : {
        "acc2ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 2 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 2 Net Amount."
        },
        "acc2NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the second account, expressed in the Account 2 Currency."
        },
        "acc3ExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account 3 Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account 3 Net Amount."
        },
        "acc3NetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited/credited on the third account, expressed in the Account 3 Currency."
        },
        "accExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Account Currency. This exchange rate is expressed as the unit ratio between the Operation Net Amount and the Account Net Amount."
        },
        "accNetAmountM" : {
          "type" : "number",
          "description" : "Net amount debited of a 'cash account', expressed in the account currency (i.e. the reference currency of the 'cash account instrument' which is credited/debited). \r\nThe computation of this amount depends on the nature of the operation. The computation details may be found for the corresponding fileds in each operation.\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "accountD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which the operation was entered into the books of the institution or an order was decided."
        },
        "accountingCode" : {
          "type" : "string",
          "description" : "Complementary operation identifier, mainly for accounting purpose or comparison with a back-office system.\r\nThere is no 'uniqueness' constraint on that field on database level. This information may be used for documentary purpose."
        },
        "accrAmountM" : {
          "type" : "number",
          "description" : "Amount of accrued interest."
        },
        "adjInstrExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Reference Currency."
        },
        "adjNatE" : {
          "type" : "string",
          "description" : "Indicates the 'nature' of the adjustment.",
          "enum" : [ "<None>", "Gross Amt", "P&L", "Manual Book Adj.", "Automatic Book Adj.", "Market Price", "Acquisition Cost/Book Value", "Book Adjustment Function", "Margin Call", "Portfolio Transfer Locked", "Proportional", "Exchange", "Cost Price", "Exchange with Fees & Taxes", "Partially Paid", "Conversion", "Merger", "Exchange with Cash Dist" ]
        },
        "adjPfExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Portfolion Currency and the Adjusted Portfolio Currency."
        },
        "adjPfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted portfolio currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Adjusted Portfolio Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjPosExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Adjusted Instrument Position Currency."
        },
        "adjPosNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the adjusted position currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Adjusted Position Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "adjQuantityN" : {
          "type" : "number",
          "description" : "Quantity of the adjusted instrument position. By default, this quantity is equal to 0."
        },
        "adjSubPosNat2E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 2 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNat3E" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature 3 for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "adjSubPosNatE" : {
          "type" : "string",
          "description" : "Information allowing to specify a position sub nature for the adjusted instrument. Its purpose is to be able to manage sub-portfolio's in Triple'A.",
          "enum" : [ "<None>" ]
        },
        "audAction" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the type of edition action : insert/update/delete."
        },
        "audModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the date of the modification."
        },
        "audUsername" : {
          "type" : "string",
          "description" : "Used only when auditing the 'extended operation' table.\r\nIndicates the user who has performed the action."
        },
        "autoRenewalE" : {
          "type" : "string",
          "description" : "Indicates how a money market contract should be treated at expiration (whether or not it should be rolled-over and with which conditions).\r\n\r\nPermitted Values:\r\n1=None - The contract should not be rolled-over\r\n2=Automatic - The contract may be rolled-over using the conditions described\r\n3=Manual - The contract may be rolled-over, but the conditions must all be entered manually.\r\n\r\nNote that currently no calculations or processing is done based on this field; it is for informational purposes only.",
          "enum" : [ "<None>", "Automatic", "Manual" ]
        },
        "bankFeeM" : {
          "type" : "number",
          "description" : "The Sum of amount4_m and amount6_m in pck_sec_response, in case of securities order \r\namount5_m in pck_dx_response, in case of derivatives order"
        },
        "bankFeeP" : {
          "type" : "number",
          "description" : "The op currency is mapped to the trade ccy on the T24 sideâ€¦so BP_4_currency_code also will be matching to the trade currency. So there wonâ€™t be any mismatch in the currency between TAP and T24. \r\nAlways defaulted to operation currency"
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Begin date of an operation not yet treated by the fusion process. It corresponds to the begin date of the positions based upon the applicable fusion date rule"
        },
        "bid1QuantityN" : {
          "type" : "number",
          "description" : "The first bid quantity, in case of competitive book building IPO"
        },
        "bid1QuoteN" : {
          "type" : "number",
          "description" : "The first bid quote, in case of competitive book building IPO"
        },
        "bid2QuantityN" : {
          "type" : "number",
          "description" : "The second bid quantity, in case of competitive book building IPO"
        },
        "bid2QuoteN" : {
          "type" : "number",
          "description" : "The second bid quote, in case of competitive book building IPO"
        },
        "bid3QuantityN" : {
          "type" : "number",
          "description" : "The third bid quantity, in case of competitive book building IPO"
        },
        "bid3QuoteN" : {
          "type" : "number",
          "description" : "The third bid quote, in case of competitive book building IPO"
        },
        "bidTypeE" : {
          "type" : "string",
          "description" : "IPO Bid Type- Competitive and Non-Competitive",
          "enum" : [ "<None>", "Competitive Book Build", "Non-Competitive Book Build" ]
        },
        "bookFiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "bookFiNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookOpExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "bookOpNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' - 'Accrued Interest Amount' - SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "bookPfNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bookPriceN" : {
          "type" : "number",
          "description" : "Book Price of a position.\r\nThis Book Price may be different from the Cost Price in the case of 'Book Adjusment Operation'/'Transfer Operation', which affects only the first and not the latter."
        },
        "bookQuoteN" : {
          "type" : "number",
          "description" : "Book Quote of a position.\r\nThis Book Quote may be different from the Cost Price in the case of 'Book Adjusment Operation', which affects only the first and not the latter."
        },
        "bookSysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "bookSysNetAmountM" : {
          "type" : "number",
          "description" : "Net or gross amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "bp10AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp1AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp2AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp3AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp4AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp5AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp6AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp7AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp8AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "bp9AmountM" : {
          "type" : "number",
          "description" : "Amount of the corresponding 'Balance Position Type', explaining the difference between the Operation Gross Amount and the Opertion Net Amount.\r\nThe effect of this amount in terms of generated Positions and Balance Positions depends on the nature of the corresponding Balance Position Type."
        },
        "cashPfExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the  Portfolio Reference Currency and the Reference Currency of the Cash Portfolio on which the various cash accounts are debited/credited.\r\nThis information is useful only if the 'Cash Portfolio' ('cash_portfolio_id') is different from NULL and from the main portfolio of the operation, whch means that the cash counterpart of the operation is debited/credited in a portfolio different from the portfolio of the operation.\r\nThis is possible only for the operation where there is possibility to debit/credit a cash account (buy, sell, income,...)."
        },
        "checkParentE" : {
          "type" : "string",
          "description" : "The value of this field determines the impact that any action (insert/update/delete) on a 'parent' block order over its constitutive 'child' orders, and vice versa.",
          "enum" : [ "Impact", "No Impact" ]
        },
        "checkStratE" : {
          "type" : "string",
          "description" : "In the various order generation functions (Order Entry, Allocate Order, and Strategy Reconciliation) you can check whether the different order proposals break an Objective or a Constraint. This is done through the check_strat_e attribute.\r\n\r\nNote the following points:\r\nIn the different functions when you modify an order proposal, the Check Strategy field is automatically set to No Check.\r\n\r\nThis field is populated after having executed the different default values at operation level.",
          "enum" : [ "<None>", "Checked", "Un-Checked", "Ptf un-checked", "No strategy", "Un-Checked Not Critical", "Un-Checked Low", "Un-Checked Medium", "Un-Checked High" ]
        },
        "clientInitE" : {
          "type" : "string",
          "description" : "This field indicates the source of an order. When this field is used, it is possible to distinguish between operations that were initiated by a client and those that where initiated due to the portfolio being managed as part of a specific mandate.",
          "enum" : [ "<None>", "Client initiated", "Mandate" ]
        },
        "closeOperCode" : {
          "type" : "string",
          "description" : "Not yet implemented."
        },
        "code" : {
          "type" : "string",
          "description" : "Unique 'business' identifier of an operation.\r\nThis code, combined with the 'status' and a sequence number, constitutes the unique key of an operation."
        },
        "commPartyTypeCode" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "commPartyTypeDenom" : {
          "type" : "string",
          "description" : "Defines the party type (Account Holder, Power of Attorney, etc.) of the communication between the client and the bank."
        },
        "communicationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the communication between the client and the bank."
        },
        "communicationTypeCode" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "communicationTypeDenom" : {
          "type" : "string",
          "description" : "Defines the type of the communication between the client and the bank."
        },
        "compoundOrderCode" : {
          "type" : "string",
          "description" : "It is the code to identify all orders/operations linked together to define a compound order/operation according to the pattern defined by the relationship between a master element and slave element(s) in a compound order rule."
        },
        "compoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the master element of the compound order rules from which the operations derives."
        },
        "compoundOrderSlaveEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "compoundOrderSlaveEltCompoundOrderMasterEltCode" : {
          "type" : "string",
          "description" : "It references the slave element of the compound order rules from which the operations derives. \r\nThe slave element is linked to a master element."
        },
        "confirmF" : {
          "type" : "boolean",
          "description" : "This attribute allows to specify whether you want or not save your operation/order input or modification in the following functions : event generation, reconcile strategy, allocate order, order entry, order list."
        },
        "contractLengthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Used in conjunction with the contract length unit (contract_lenght_unit_e) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e."
        },
        "contractLengthUnitE" : {
          "type" : "string",
          "description" : "Used in conjunction with the contract length (contract_lenght_n) to define the lenght of a money market, loan, or a forex forward.\r\n\r\nIllustration: For a 3 months money market, stores \"3\" in contract_lenght_n and \"month(s)\" in contract_lenght_unit_e.",
          "enum" : [ "<None>", "Day(s)", "Week(s)", "Month(s)" ]
        },
        "contractNumberC" : {
          "type" : "string",
          "description" : "This field may be used to assign a specific contract number to a money market contract. This contract bumber is separate from the operation identifyer."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the investment, withdrawal or free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "counterpartyThirdCode" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "counterpartyThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'counterparty' with whom the operation has been concluded.\r\nThis information may be usful in case of OTC transaction. \r\nThis reference must point to an occurrence in the 'third party' table."
        },
        "creationTimeD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This information is used to know the exact moment of the creation of an operation. It can be used to implement some \"business\" rules (e.g. in a mutual fund, an operation cannot be created at a date different from the Accounting Date) or for  communication to external systems (e.g. EBS).\r\nThis field  may be generated automaticall by the system or coming from outside.\r\nThis field is mandatory and computed by the system."
        },
        "creditToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the credit and system currencies."
        },
        "dbStatusE" : {
          "type" : "string",
          "description" : "Field used only in the 'Event Generation', 'Allocate Order', 'Strategy Reconciliation', 'Order Entry', 'Order Allocation', and 'Order List' functions. It indicates the status of the operation relative to the database (To Save, To Update, To Insert). This field is saved in the database only for draft orders.\r\nIt is used only by the application. You cannot update this field on your own.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Simulation To Insert", "Simulation To Update", "Simulation To Delete", "Simulation Up To Date" ]
        },
        "debitToSysCurrRateN" : {
          "type" : "number",
          "description" : "Not implemented in the standard package.\r\n\r\nCan be used to store the fx exchange rate between the debit and system currencies."
        },
        "defaultFusRuleE" : {
          "type" : "string",
          "description" : "This attribute will have the default fusion rule configured for the order.",
          "enum" : [ "<None>", "WMP", "FIFO", "LIFO", "High Cost", "Low Cost", "AU Max Gain", "AU Min Gain", "Specific Lot" ]
        },
        "effChildQty" : {
          "type" : "number",
          "description" : "Used only for internal purpose in the 'Order List' function.\r\nFor a 'Parent' order, this field contains the actual sum of the quantity of each of its child orders. This number should normally be equal to the quantity of the 'parent' order."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "End date of an operation not yet treated by the fusion process (i.e. set only when the order is executed by another operation - execution nature = totally or partially executed)"
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of operations on the basis of instrument events."
        },
        "eventNumberN" : {
          "type" : "number",
          "description" : "Reference to the 'number' of the 'event' that has, possibly, generated the operation.\r\nThis information is useful to control the automatic generation of income opration on the basis of instrument events when these events are 'multiple' (see the various 'event' tables for more details)."
        },
        "exCouponF" : {
          "type" : "boolean",
          "description" : "This flag indicates whether the position resulting from the investment operation is 'ex-coupon' ('1') or not ('0').\r\nThis information is useful to compute correctly the accrued interest when there is a possibility that, for positions in the same instrument, in different portfolios (or in the same one), some of them are 'ex-coupon', and others are 'cum-coupon'.\r\nIn case of a 'cum-coupon' position, the accrued interest are positive until the payment date is reached. In case of an 'ex-coupon' position, they are negative until the payment date is reached."
        },
        "executOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'executed' by the current operation."
        },
        "executOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature (total/partial) of the 'execution' when an operation is the execution of another.",
          "enum" : [ "<None>", "Total", "Partial", "Tot. Executed", "Part. Executed", "Partial Upd Mode", "Tot. Executed from Total Execu", "Tot. Executed from Partial Exe", "Part. Executed from Total Exec", "Part. Executed from Partial Ex", "Total Upd Mode" ]
        },
        "executOperStatusE" : {
          "type" : "string",
          "description" : "Status of the 'executed' operation. The permitted values are the same as those of the 'status' field of the operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "executSetCriteria" : {
          "type" : "string",
          "description" : "When you carry out the accounting of your order executions, in your interface, instead of updating the executions, you insert a new record with its own code (i.e. accounting operation). But you must refer to the executions by giving the order code (i.e. ext_order_id) and an execution matching criterion. The matching execution criterion is an attribute that tells you which executions to account. For example: all the order executions with the same operation and value date.\r\nThe execution matching criteria are managed as follows:\r\nÂ·\tIn the execution flows you provide the matching criteria. A specific attribute (i.e. execution set criteria, execution entity) holds this information, populated by the default value or by the interface. For example, a string generated by the order and value dates. You are limited to 80 characters. This information can be Null.\r\nÂ·\tIn the accounting operations, you also provide the matching criteria. This information is held by a new specific attribute in the extended operation table (i.e. execution set criteria). You are limited to 80 characters. The value can be Null."
        },
        "executedF" : {
          "type" : "boolean",
          "description" : "When an order has got one execution, its executed_f is set to 1 by the system."
        },
        "executedQty" : {
          "type" : "number",
          "description" : "Sum of the order execution quantity. Logical attribute conmputed by the order list function."
        },
        "expirationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates for position in generic 'money market' instrument the expiration date of the position.\r\nThis date is used in the 'Cash & Liquidity' module, as well as in the 'Automatic Expiration' module."
        },
        "externalBankAcctOwnrName" : {
          "type" : "string"
        },
        "externalBankBicC" : {
          "type" : "string"
        },
        "externalBankName" : {
          "type" : "string"
        },
        "factSheetE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines if the factsheet of the instrument of the order must be attached to the investment proposal report (Proposal Generator module).",
          "enum" : [ "<None>", "Excluded", "Included" ]
        },
        "fiExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Instrument Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Instrument Net Amount."
        },
        "fiNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "functionResultCode" : {
          "type" : "string",
          "description" : "Used for internal purposes only.\r\nReference to the Function Result that is generated when extended operations are created (e.g. as is the case with the Order Allocation and Strategy Reconciliation financial functions)."
        },
        "fusionE" : {
          "type" : "string",
          "description" : "This field indicates the processing status of an operation by the fusion process.",
          "enum" : [ "Untreated", "Treated", "To Delete" ]
        },
        "fusionRuleE" : {
          "type" : "string",
          "description" : "This field is reserved for the management of money markets/cash accounts positions with amendments, both on the invested capital and on interest rate.",
          "enum" : [ "<None>", "Amendment", "AI Reset", "Amendment post AI Reset" ]
        },
        "fxClientRateN" : {
          "type" : "number",
          "description" : "Defines the forex client rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxMarginM" : {
          "type" : "number",
          "description" : "Defines the forex margin in amount when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginN" : {
          "type" : "number",
          "description" : "Defines the forex margin in PIPS when creating an order on forex. Must be set by Default Value."
        },
        "fxMarginP" : {
          "type" : "number",
          "description" : "Defines the forex margin in percentage when creating an order on forex. Must be set by Default Value."
        },
        "fxMarketRateN" : {
          "type" : "number",
          "description" : "Defines the forex market rate when creating an order on forex. Rate direction (mutliply or divide) depends on the attribute fx rate direction (fx_rate_direction_f). Must be set by Default Value."
        },
        "fxRateDirectionF" : {
          "type" : "boolean",
          "description" : "Defines the forex rate direction when creating an order on forex. Used in conjunction with the attributes fx client rate (fx_client_rate_n) and fx market rate (fx_market_rate_n)."
        },
        "fxSpotQuoteN" : {
          "type" : "number",
          "description" : "Defines the spot quote depending on the forex_rate_direction when creating an order on forex Swap. Must be set by Default Value."
        },
        "groupingCriteria" : {
          "type" : "string",
          "description" : "Trades in equity are not grouped in the same way as in fixed incomes or forwards. Grouping criteria differ from one asset class to another. Also, you cannot, for example, group orders in a specific asset class with radically different amounts. This means that an order grouping tool must not be restricted by predefined limited parameters.\r\nThe new tool order Grouping provides all the flexibility required for advanced order grouping.\r\nYou define the criteria used to group the individual orders in a script. You can create the script in the Order Grouping Definition menu. The objective is to generate a unique string for all the trades that match the same grouping criteria.\r\nThe new attribute Grouping Criteria allows you to display the string generated by the function."
        },
        "histFiExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the instrument currency and the portfolio currency. This exchange rate will be the 'instrument exchange rate' of the instrument position resulting from the operation."
        },
        "histFiNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the instrument currency (i.e. the reference currency of the 'instrument'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical Instrument Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histOpExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the operation currency and the portfolio currency. This exchange rate will be the 'position exchange rate' of the instrument position resulting from the operation."
        },
        "histOpNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Historical Price' )"
        },
        "histPfNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "histPriceN" : {
          "type" : "number",
          "description" : "Historical price of the invested position. This price will be the 'price_n' of the instrument position resulting from the operation."
        },
        "histQuoteN" : {
          "type" : "number",
          "description" : "Historical quote of the invested position. This quote will be the 'quote_n' of the instrument position resulting from the operation."
        },
        "histSysExchRate" : {
          "type" : "number",
          "description" : "Historical exchange rate between the system currency and the portfolio currency. This exchange rate will be the 'system exchange rate' of the instrument position resulting from the operation."
        },
        "histSysNetAmountM" : {
          "type" : "number",
          "description" : "Historical net amount of an operation, expressed in the system currency. This amount is based on the 'Historical Operation Net Amount' and the various Historical Exchange Rates.\r\nThis amount is computed as follows :\r\n'Historical Operation Net Amount'  * 'Historical Operation Exchange Rate' / 'Historical System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "This id corresponds to the id of the linked operation (operation_id) and NOT to the id of the extended operation. It is called oper_id in the Triple'A C program code.\r\n\r\nThis field is mandatory."
        },
        "inSessionF" : {
          "type" : "boolean",
          "description" : "This attribute is used in several cases (e.g., External Positions in Proposal Generator, Order Grouping, etc.) in order management. Its main purpose is to identify whether an order is included or not inside a session, which will affect how it will be treated in the system."
        },
        "instrExtDenomination" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrFundIncomeStyleE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "Growth", "Dividend" ]
        },
        "instrNatureE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "instrReinvestmentAllowedF" : {
          "type" : "boolean",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory."
        },
        "instrSubNatE" : {
          "type" : "string",
          "description" : "Reference to the instrument which is moved. Any nature of instrument may be referenced.\r\nThis information is mandatory.",
          "enum" : [ "<None>", "US Treasury bonds & notes", "US Govn agency bond (Feb adj)", "Municipal bond", "Corporate bond", "US Gov agency bond, no Feb adj", "Canadian government bond", "Canadian govn, Bnk of Can conv", "Gilt", "German government bond", "German govn, incl ex-div dates", "BTAN", "OAT", "Swiss government bond", "Belgian government bond", "Austrian government bond", "Dutch government bond", "Dutch govn, incl ex-div dates", "Swedish government bond", "Japanese government bond", "Australian government bond", "Eurobond", "Italian government bond (BTP)", "Italian government bond (CTE)", "Spanish government (annuel)", "Spanish government (semi)", "Customized bond (act/act)", "Customized bond (act/365)", "Customized bond (act/360)", "Customized bond (30/360)", "Customized bond (30/360E)", "Floating rate notes", "MM Rate", "Bill Discount", "Bill Yield", "Par Yield", "Fixed/Floating Std Swap", "Fixed/Fixed Std Swap", "Float/Float Std Swap", "Chooser", "Price Lookback", "Strike Lookback", "Average Price Asian", "Average Strike Asian", "Barrier", "Forward Start", "One Touch Digital", "Binary", "Contingent Premium", "Compound", "Double Knock-Out", "Spread", "Exchange", "Mortgage Passthrough", "PO", "IO", "Rec Swap Fixed Leg", "Rec Swap Float Leg", "Volatility Curve", "Volatility Point", "Paid Swap Fixed Leg", "Paid Swap Float Leg", "Average Rate", "Equity Swap", "Mortgage Backed Security", "Non-Vanilla Swap", "Structured Bond", "Fix/Float Swp Hedging Fixed AS", "Composite Fund", "Portfolio Fund", "Money Market Fund Share", "Fixed Income Fund Share", "Accumulator", "Decumulator", "Mini Futures  Turbo", "Capital Protection Notes", "Capital Protections Notes with Coupon", "Reverse Convertibles Notes - Equity Linked Notes", "Reverse Convertibles Notes - Bonds Linked Notes", "Reverse Convertibles Notes - Credit Linked Notes", "Discount Certificates", "Twin Win Certificates", "Bonus Notes", "Memory Coupon Notes", "Airbag Certificates", "Dual Currency Investment", "Triple Currency Investment", "Digital Investment", "Digital Pay Out", "Tower Investment", "Basket Option", "Structured Option", "Double Knock-In", "Knock-In Knock-Out", "Participating Forward", "Target Knock-Out Forward", "Pivot Option", "Target Knock-Out Pivot Notes", "Forward Forward", "Interest Multiplier Facility", "Reverse Convertibles Notes", "Equity Linked Notes", "Bonds Linked Notes", "Credit Linked Notes", "Discount Share Purchase", "Dual Currency Deposit", "OTC Guaranteed Return on Investment", "OTC Callable Range Accrual Note", "ETF Fund", "PE- Initial Commitment", "PE- Drawdown", "PE- Capital Call", "PE - Actual PE Security", "External Product", "Knock-In", "Knock-Out", "Notice Fiduciary", "Fixed Fiduciary", "Notice Deposit", "Fixed Deposit" ]
        },
        "interestMarketRateN" : {
          "type" : "number",
          "description" : "Defines the interest market rate when creating an order on money market. Must be set by Default Value."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "lastPriceN" : {
          "type" : "number",
          "description" : "Defines the order last price."
        },
        "lastQuoteD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date of the order last quote."
        },
        "lastQuoteN" : {
          "type" : "number",
          "description" : "Defines the order last quote."
        },
        "limitPriceN" : {
          "type" : "number",
          "description" : "Limit price of an order."
        },
        "limitQuoteN" : {
          "type" : "number",
          "description" : "Limit quote of an order."
        },
        "lockCleanPriceN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockCleanQuoteN" : {
          "type" : "number",
          "description" : "Indicates the clean unit price (i.e. excluding accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyPriceN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit price (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockDirtyQuoteN" : {
          "type" : "number",
          "description" : "Indicates the dirty unit quote (i.e. including accrued interest) of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockFiExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Instrument Currency of the 'locking position' which may be generated when buying another security\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates, for position in generic 'money market' instrument, the date from which the accrued interest must be computed.\r\nThis date is optionnal. If it is not provided, the computation of accrued interest starts on the 'value date' of the instrument position."
        },
        "lockNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'locking' when an operation locks another.",
          "enum" : [ "<None>", "Locking", "Unlocking", "Locked Position", "Locked Instrument", "Unlock Instrument", "Locked Uly Instrument", "Unlock Uly Instrument", "Locked Cash", "Unlock Cash", "Locked Uly Cash", "Unlock Uly Cash", "Repo Locking", "Repo Locked", "Repo Unlocking", "Remere Locking", "Remere Locked", "Remere Unlocking", "Reverse Repo Locking", "Reverse Repo Unlocking", "Sell/buy-back locking", "Sell/buy-back locked", "Sell/buy-back unlocking", "Buy/sell-back locking", "Buy/sell-back unlocking", "Data when locking" ]
        },
        "lockOpExchRate" : {
          "type" : "number",
          "description" : "Indicates the Exchange Rate between the Portfolio Reference Currency and the Position Currency of the 'locking position' that may be generated when buying another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'locked' by the current operation."
        },
        "lockPriceMarginP" : {
          "type" : "number",
          "description" : "Indicates the price margin applied to the dirty price of the 'locking position' which may be generated when buying/selling another security.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockQuantityN" : {
          "type" : "number",
          "description" : "Indicates the quantity of the 'locking position' which may be generated when buying/selling another security. This quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity.\r\nThis information is valid only in the case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation."
        },
        "lockSubPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 2  for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a sub nature 3 for the 'locking' position which can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security which serves as a guaranteee for themoney market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "lockSubPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for the 'locking' position that can be generated when buying another security. This information is valid only in case of a reference nature 'Repo Locking', 'Repo Unlocking', 'Remere Locking', or 'Remere Unlocking'.\r\nIn these cases, the 'lock instrument' is actually the underlying security that serves as a guaranteee for the money market that is the main instrument of the operation.\r\nThis information is useful when the user wants to distinct positions belonging to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "marketThirdName" : {
          "type" : "string",
          "description" : "Reference to the 'market' on which the operation has been concluded.\r\nThis reference must point to an occurrence in the 'third party' table with a 'market' nature."
        },
        "maxOrderQtyN" : {
          "type" : "number",
          "description" : "maximum order quantity"
        },
        "minOrderQtyN" : {
          "type" : "number",
          "description" : "Minimum quantity of an order."
        },
        "mmInterestAmountM" : {
          "type" : "number",
          "description" : "Defines the interest amount when creating an order on money market. Must be set by Default Value."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the operation.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "noPositionF" : {
          "type" : "boolean",
          "description" : "In the order lifecycle, the followings events can happen:\r\nÂ·\tThe order is cancelled\r\nÂ·\tThe order is refused\r\nÂ·\tThe order is expired \r\nEach case is represented by a specific order status. Each has its own particular meaning for the portfolio manager: a refused order is not a cancelled order, etc. However, the orders that reach these statuses share the following characteristics:\r\nÂ·\tThe trade blotter displays them as historical transactions for information purposes\r\nÂ·\tNo pending position exists. This means that a refused order has no position.\r\nIn R4.0, you can define several values that play the same role. You just need to specify these values in the NO_OPEN_POSITION_STATUS new system parameter separated by a semi-colon (;).\r\nIn practical terms, this means that you can only access the orders with a status from this enumerated list from the Order List function.\r\nAll orders inserted with a status that belongs to that list have their no_position_f set to 1."
        },
        "opActionE" : {
          "type" : "string",
          "description" : "Technical information set by the system when inserting, deleting or updating an operation. The fusion process takes advantage of this information to turn an order into an operation.",
          "enum" : [ "Up to Date", "To Insert", "To Update", "To Delete", "Up to Date and MBK", "To Insert and MBK", "To Update and MBK" ]
        },
        "opCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the operation. This is the currency in which the 'quote' is expressed.\r\nNote that this currency may be different from the 'instrument' currency."
        },
        "opExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the Portfolio Net Amount and the Operation Net Amount."
        },
        "opGrossAmountM" : {
          "type" : "number",
          "description" : "Gross amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income').\r\nThis amount is computed as follows :\r\n( 'Quantity' * 'Contract Size' * 'Price' ) + 'Supplemetary Amount'"
        },
        "opNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the operation currency (i.e. the currency of the 'price/'unit income'). This amount is computed as the 'Operation Gross Amount' plus the accrued interest and  the sum of the Fees & Taxes Amounts (i.e. the BPs Amounts).\r\nThis amount is computed as follows :\r\n'Operation Gross Amount' + 'Accrued Interest Amount' + SUM('BP1 Amount', 'BP2 Amount', ...,  'BP10 Amount')\r\n\r\nIf there is a mismatch between the provided 'Operation Net Amount' and the result of the preceding computation, the difference is automatically affected to the 10th balance position amount, which contains any rounding error. This garantees that the operation is always 'balanced'."
        },
        "openOperCode" : {
          "type" : "string",
          "description" : "Reference to the 'code' of the operation"
        },
        "operationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date on which a transaction was agreed or an order was decided. Financial risk exists as of this date."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "This attribute can be used to indicate to the back-office that a specific fee (in amount or percentage) has been negotiated for this order with the client, which should not be changed by the back office. \r\n\r\nThe attribute has no functionality in Triple'A Plus itself.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "This attribute can be used to store a percentage value, which has to be used for the calcuation of order fees (see also order_fee_e).\r\n\r\nThe attribute has no functionality in Triple'A Plus itself."
        },
        "orderGroupingCode" : {
          "type" : "string",
          "description" : "When you run the Order Grouping Index function, instead of creating block orders, the system updates the different orders. In fact, it sets a unique identifier for all the records that match the same grouping criteria. The information generated by the function is stored in the order grouping code attribute in the order table."
        },
        "orderLimitD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the possible limit date of an order.\r\nIn this particular case, this information characterises the position resulting from the investment operation."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Allows to  distinguish the various order natures (e.g. Stop-Loss,...). This field may be used to interpret other pieces of information in operation or in positions (e.g., in a  Stop Loss Sell Order, the price is interpreted as the limit price that will trigger the sell of a postion.) This field is optional.",
          "enum" : [ "<None>", "Market", "Limit", "Stop", "Stop-Limit" ]
        },
        "orderPriceNatE" : {
          "type" : "string",
          "description" : "This field corresponds to additional information to characterise a trade. Optional.",
          "enum" : [ "<None>", "Not Held", "Or Better", "Immediate or Cancel", "Fill or Kill", "All or None", "Minimum Holding Period Override" ]
        },
        "orderTypeCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the order type used to manage the order display in the WUI."
        },
        "orderValidityNatE" : {
          "type" : "string",
          "description" : "Validity nature of an order.",
          "enum" : [ "<None>", "Day Order", "GTC", "Closing", "Opening" ]
        },
        "parentOperNatE" : {
          "type" : "string",
          "description" : "Used to indicate the nature of block/child orders.\r\nThis information is useful in the case of a 'Parent'/'Child' relationship between a 'Block' order and its individual 'Child' orders. (The 'parent' order and its 'child' orders are characterised by a common instrument and a common nature, except for Combined order).",
          "enum" : [ "<None>", "Unallocated Block Order", "Block Order", "Child Order", "Detached Block Order", "Combined Order", "Child Combined Order", "No Grouping" ]
        },
        "parentOperationCode" : {
          "type" : "string",
          "description" : "Valid only for Child Orders. It gives you the code of the corresponding block order."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "pfCurrencyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the portfolio.\r\nThis information is present for control purpose. If it has been specified, the currency must correspond to the one which is referenced as the 'currency' of the 'portfolio' of the  operation."
        },
        "pfNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the portfolio currency (i.e. the reference currency of the 'portfolio'). This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' \r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "Reference to the portfolio to which the operation belongs.\r\nThis information is mandatory."
        },
        "priceCalcRuleE" : {
          "type" : "string",
          "description" : "Indicates the method that has to be used to convert the quote into a price (for more details on the possible values, see the description of the 'price calculation rule' filed in the 'instrument price' table.)\r\nBy default, this conversion rule is the same as the default price calculation rule of the instrument. However, this information has been put in operation because there are cases where the rule used at operational level may differ from the default instrument rule.",
          "enum" : [ "<None>", "Quote", "Quote/100", "Partially Paid Stocks", "Partially Paid Bonds", "Stocks Quoted in %", "Bonds Quoted in Unit", "Actuarial Yield", "Discount Rate", "Add-On Rate", "Quoted with AI", "Quoted in Unit with AI", "TCN", "Annualised Rate", "Quote Life", "Euro-Futures", "FRA", "Australian Future", "Part. Paid Bonds in Unit", "Part. Paid Stocks in Prct", "Price calculation Factor", "Discount Yield", "Basis Points", "Quote in Unit", "Australian Future (flexible)", "NPV", "Chilean Bond (TERA)", "Portfolio Specific Price" ]
        },
        "priceN" : {
          "type" : "number",
          "description" : "Indicates investment unit price of the instrument. This price is multiplied by the quantity (corrected for the instrument contract size) to give the Operation Gross Amount."
        },
        "quantityN" : {
          "type" : "number",
          "description" : "Quantity of the 'instrument' that is bought.\r\nThis quantity is a 'displayed' quantity, which has to be mutiplied by the 'instrument contract size' to find the real  quantity applied to the unit income to give the resulting 'operation gross amount'."
        },
        "quoteN" : {
          "type" : "number",
          "description" : "Indicates investment unit quote of the instrument. To obtain the price corresponding to this quote, which corresponds to the way the instrument is 'quoted' by the markets, the conversion corresponding to the 'price calculation rule' specified in the operation has to be applied."
        },
        "rateP" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'money market' instruments, the interest rate which has to be applied on the resulting position.\r\nThis information is used when computing accrued interest on these position, or when forecasting/generating income cash flows on these positions."
        },
        "refNatE" : {
          "type" : "string",
          "description" : "This information indicates the reference nature of the operation.\r\nThis information is used in the fusion process for several cases where it is important to reference another operation/position when deciding to merge/close positions together.",
          "enum" : [ "<None>", "Open", "Close", "Fwd Open", "Fwd Close", "Term Open", "Term Close", "Future Open", "Future Close", "Explicit Fusion", "Future FIFO", "FRA Open", "FRA Close", "Repo Open", "Repo Close", "Remere Open", "Remere Close", "FX Swap Open", "FX Swap Close", "Swap Open", "Swap Close", "Future WMP", "Future Contract", "Reference Code" ]
        },
        "refOperCode" : {
          "type" : "string",
          "description" : "Reference of the position/operation to merge/close with.\r\nThis information is useful if the user wants, in some particular cases (see the comment on 'Reference Nature' for more details on these cases), to have a control on the processing of related position by the fusion process."
        },
        "remark1C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark2C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remark3C" : {
          "type" : "string",
          "description" : "Generic field to store any type of remark (Trading remark, BO remark, Instruction remark)."
        },
        "remarkC" : {
          "type" : "string",
          "description" : "Field reserved for unstructured comment associated to an operation. The size of these comments is limited to 80 characters.\r\nAnother possiblity to associate such comments is to create notepads associated to an operation."
        },
        "renewalAmountM" : {
          "type" : "number",
          "description" : "When the contract is renewed, this field indicates the amount of capital for the new contract."
        },
        "renewalEndValD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Indicates the final date at which the client plans to continue renewing a money market contract.\r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days until this date is reached.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalIntRateP" : {
          "type" : "number",
          "description" : "This field contains a specific interest rate which is to be applied to a contract upon renewal."
        },
        "renewalLengthN" : {
          "type" : "number",
          "description" : "The length of the term of each renewal of a money market contract. \r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only."
        },
        "renewalLengthUnitE" : {
          "type" : "string",
          "description" : "The unit length of the term of each renewal of a money market contract. \r\n\r\nFor example, the client may specify to create an initial money market contract with a term of six months. The bank should then renew the contract for a term of 14 days.\r\n\r\nPermitted values:\r\n1=Day\r\n2=Week\r\n3=Month\r\n\r\nNo calculations are based on this field in TA. It is for informational purposes only.",
          "enum" : [ "<None>", "Day", "Week", "Month" ]
        },
        "renewalTreatmentE" : {
          "type" : "string",
          "description" : "When a money market contract is to be rolled-over, this field indicates what the principal of the new contract should be.\r\n\r\nPermitted Values:\r\n0 = None\r\n1 = Capital Only - the principal of the new contract should have the same face value as the original contract.\r\n2 = Capital and Interest - the face value of the new contract should be equivalent to the sum of both the principal of the original contact and the interest that was paid on the original contract.",
          "enum" : [ "<None>", "Capital Only", "Capital and Interest" ]
        },
        "reversOperCode" : {
          "type" : "string",
          "description" : "Allows to reference the 'code' of an operation that is 'reversed' by the current operation."
        },
        "reversOperNatE" : {
          "type" : "string",
          "description" : "Allows to specify the nature of the 'reversal' when an operation is the reversal of another.",
          "enum" : [ "<None>", "Reverse", "Reversed" ]
        },
        "rightToRunF" : {
          "type" : "boolean",
          "description" : "Technical information used to assess the rights on the script functions like update fields, order grouping etc."
        },
        "selectedF" : {
          "type" : "boolean",
          "description" : "Specifies whether the data is graphically selected or not."
        },
        "sequenceNoN" : {
          "type" : "number",
          "description" : "Sequence number of an operation.\r\nThis field allows to manage the partial execution of an order. It is indeed possible that the same initial market order, passed at a given status, is executed (i.e. passed at a status superior to the initial one) partially before being completely executed.\r\nThe management of the partial execution of an order is not yet implemented."
        },
        "sourceCode" : {
          "type" : "string",
          "description" : "For Back-To-Front operations :\r\nReference to an operation identifier external to Triple'A. This field allows to establish a correspondency between operations as they are stored in Triple'A and, as they are idenfied in external system, without the constraint of being unique that characterises the Triple'A 'code'.\r\n\r\nFor Front-To-Back orders: \r\nFrom Triple'A R3.51 on, this field can reference to the executed order. Please refer to the Order & Productivity Guide for more information about order execution and how to use this field."
        },
        "spotPriceN" : {
          "type" : "number",
          "description" : "Indicates for operations on generic 'Currency Forward' what the spot 'price' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position since it allows to know the premium/discount factor at that moment, as well as for computing 'interest rate effect' when closing the positions.\r\nNormally, for forwards, the spot quote is always equal to the spot price."
        },
        "spotQuoteN" : {
          "type" : "number",
          "description" : "Indicates, for operations on generic 'Currency Forward', what the spot 'quote' (i.e. the spot exchange rate) is on operation date.\r\nThis information is useful to value the resulting forward position because it allows to know the premium/discount factor at that moment as well as for computing 'interest rate effect' when closing the positions."
        },
        "standInstructId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to the standing instruction that originated the order. Set by the event generation function when creating orders based on standing instructions, for example for financial plans."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Status of the operation.\r\nIt allows to distinguish between various stages in the processing of an operation, from a simulation purpose to an accounted operation, passing through the various order states.\r\nThe use of states allows to describe the life cycle of operations in financial institutions. The number of states and their meaning depend on the internal organisation characterising each of them.\r\nThere are special types of states that have a specific meaning:\r\n-   The \"Accounting\" Status, which makes the distinction between orders, and  the accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Simulation\" Status, which distinguishes between simulated orders and accounted positions. This particular status can be parametrised at system level.\r\n-   The \"Cancel\" Status, which allows to keep trace of cancelled operations. This type of status can be parametrised at system level.\r\n\r\nAs explained in the chapter named \"The Fusion Process\", positions with different states never merge together.\r\nIf the user modifies the status of a position by updating it, no history will be kept.\r\nThis field is mandatory.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "stopPriceN" : {
          "type" : "number",
          "description" : "Stop price of an order."
        },
        "stopQuoteN" : {
          "type" : "number",
          "description" : "Stop quote of an order."
        },
        "subPosNat2E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 2' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 2' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNat3E" : {
          "type" : "string",
          "description" : "Indicates a 'sub nature 3' for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature 3' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subPosNatE" : {
          "type" : "string",
          "description" : "Indicates a sub nature for a position.\r\nThis information is useful when the user wants to distinct positions belongings to various sub-portfolios of a same portfolio. In that case, positions with a different 'sub nature' will never fuse together.\r\nThis can be considered as a supplementary and user-definable criteria allowing to differentiate positions, in addition to the application standard ones (portfolio/instrument/deposit/position currency).\r\nThe default value for this field is '0' = <None>.\r\nPermitted values may be parametrised on site.",
          "enum" : [ "<None>" ]
        },
        "subtypeCode" : {
          "type" : "string",
          "description" : "Reference to the sub-type of an operation. The sub-types can be defined on site, through the 'type' table.\r\nNote that there are two restrictions on the sub-types that can be referenced in an operation: \r\n1. The 'oper_nat_e' of the sub-type must be the same as the 'nature_e' of the operation. In this particular case, the type must have an 'investment' 'oper_nat_e'.\r\n2. The 'parent type' of the referenced 'sub-type' must be the same as the 'type' of the operation."
        },
        "summaryC" : {
          "type" : "string",
          "description" : "Defines the summary of an order. Must be set by Default Value."
        },
        "supplAmountM" : {
          "type" : "number",
          "description" : "Allows to indicates an absolute amount (i.e. not related to a quantity) that has to be added to the 'operation gross amount'.\r\nThis information may be useful in some operations where no quantity is specified."
        },
        "sysExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the System Currency and the Portfolio Currency. This exchange rate is expressed as the unit ratio between the System Net Amount and the Portfolio Net Amount."
        },
        "sysNetAmountM" : {
          "type" : "number",
          "description" : "Net amount of an operation, expressed in the system currency. This amount is based on the 'Operation Net Amount' and the various Exchange Rates.\r\nThis amount is computed as follows :\r\n'Operation Net Amount'  * 'Operation Exchange Rate' / 'System Exchange Rate'\r\n\r\nPlease note that, if this amount is provided by the user, it is not checked whether this amount is consistent with the preceding computation, taking into account the possibly provided exchange rates. It implies that the exchange rates, if provided, are stored in the operation with an information purpose. All the computations, particularly in the fusion process, are always based the comparison of the amounts."
        },
        "targetM" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to amount."
        },
        "targetN" : {
          "type" : "number",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt defines the target of an order when the target nature (target_nature_e) is set to quantity, % of portfolio, or % of market segment objective."
        },
        "targetNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging. It is used for defining:\r\n- If an order is in amount or in quantity.\r\n- The target type when creating an investment proposal order (Proposal Generator module).",
          "enum" : [ "<None>", "Quantity", "Gross Amount", "% of Portfolio", "% of Market Segment Objective", "Net Amount", "% of Position Held", "% of Sale Proceeds", "Full Redemption", "% of Underlying Position" ]
        },
        "timeStamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The recordâ€™s time stamp."
        },
        "tradeExchRate" : {
          "type" : "number",
          "description" : "The Exchange Rate between the Operation Currency and the Trade Currency."
        },
        "transactionNatureE" : {
          "type" : "string",
          "description" : "This field is used by OCS in order to group together similar operations.",
          "enum" : [ "<None>", "Securities", "Forex Spot", "Forex Forward", "Money Market", "Option", "Loan" ]
        },
        "transmissionD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Defines the date and time of the transmission between the front office user and the trader/broker."
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Reference to the type of an operation. The types can be defined on site, through the 'type' table.\r\nNote that there is a restriction on the types that can be referenced in an operation. The oper_nat_e attribute of the type must be the same as the nature_e of the operation. In this particular case, the type must have an 'investment' oper_nat_e."
        },
        "valoSeqNoN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of the valuation used to generate the 'share issue' or 'share redemption'  operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valuationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the valuation used to generate the 'share issue' or 'share redemption' operation. In combination with the 'valuation date' this field uniquely identifies an occurrence in the 'fund valuation' table (used only if the 'Fund Management' module is provided)."
        },
        "valueD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Value day for accrued interest calculation."
        },
        "weightedMeanQuoteN" : {
          "type" : "number",
          "description" : "Weighted mean quote of the executions you get for your order. It computed automatically by the system in the Order List function."
        }
      }
    },
    "updateOrderCodeSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderWithPermValues"
        }
      }
    },
    "updateOrderSessionCommentInput" : {
      "type" : "object",
      "required" : [ "entitySqlName", "languageCode", "lastUserCode", "selectedE", "typeCode" ],
      "properties" : {
        "commentC" : {
          "type" : "string",
          "description" : "Text of the comment. It can be 2000 characters long."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of creation of the comment."
        },
        "entitySqlName" : {
          "type" : "string",
          "description" : "ID of the entity on which the comment is based."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Language of the comment."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUserCode" : {
          "type" : "string"
        },
        "selectedE" : {
          "type" : "string",
          "description" : "Field that can be set to select the comment for display in certain scenarios.",
          "enum" : [ "Deselected", "Selected" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "ID of the type of comment. Each comment must have a type attached."
        }
      }
    },
    "updateOrderSessionCommentSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSessionCommentWithPermValues"
        }
      }
    },
    "updateOrderSessionInput" : {
      "type" : "object",
      "required" : [ "cashCurrencyCode", "defaultStrategyCode", "funcResultStatusE", "languageCode", "portfolioCode", "portfolioName", "proposalNatureE", "repCashflow2E", "repCompliance2E", "repExecutionStatusE", "repValuation2E", "sessionCreationUserCode", "sessionCreationUserName", "sessionNatureE", "sessionStatusE", "strategyCode", "taxLotE", "typeCode" ],
      "properties" : {
        "caseToClarifyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nIt indicates if an order session after a pre-trade compliance check has generated cases of nature compliance of severity medium that prevents the order session to be saved. All cases with this severity must be clarified."
        },
        "cashCurrencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of an occurrence."
        },
        "defaultStrategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "defaultStrategyExtDenomination" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nFor proposal sessions, store the linked IP (investment profile) at the calc from date of the domain."
        },
        "deleteRightF" : {
          "type" : "boolean",
          "description" : "If the order session''s data security profile is contained in the user's data profile composition with its delete flag (auth_delete_f) set to True, this attribute is set to True. Only sessions whose dataset attribute delete_right_f = True can be deleted by the user."
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function.A domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "languageCode" : {
          "type" : "string",
          "description" : "Reference to a language. \r\nThis optional reference allows users to define the language of the report when running reports with SQR. \r\nWhen other financial functions are run, the language cannot be modified. The language defined in the user's profile is used."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the last modification of the occurrence."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "proposalNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session for an investment proposal (Proposal Generator component).",
          "enum" : [ "None", "Main", "Archive", "Trade" ]
        },
        "repCashflow2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second cash-flow section in reports. For example, the Proposal Generator Report can display a second cash-flow section that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repCompliance2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second compliance section in reports. For example, a section that includes an order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Detailed" ]
        },
        "repExecutionStatusE" : {
          "type" : "string",
          "description" : "The attribute is used to qualify a report execution process.",
          "enum" : [ "Pending", "Completed", "Failed" ]
        },
        "repFileOutputName" : {
          "type" : "string",
          "description" : "This attribute is used when producing reports. It will specify the final file output name. Note that this attribute will not name the roi file, only the final output file. To change the roi name, use the attribute rep_roi_output_name"
        },
        "repValuation2E" : {
          "type" : "string",
          "description" : "This parameter triggers the presence and the content of a second valuation section in reports, for example a valuation that includes the order session.\r\n\r\nThe selected report must manage this functionality, otherwise it will have no effect.",
          "enum" : [ "Not Shown", "Summary", "Simple", "Detailed" ]
        },
        "sessionCreationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation date of on order session. This date must be define by a default value."
        },
        "sessionCreationUserCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionCreationUserName" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the creation user of on order session. This date must be define by a default value."
        },
        "sessionDescriptionC" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt allows the user to set the description of an order session or an investment proposal."
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "strategyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy set in the domain context when the strategy dimension is a single strategy."
        },
        "strategyDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nStrategy dimension set in the domain context.",
          "enum" : [ "Strategy", "Strategy List" ]
        },
        "taxLotE" : {
          "type" : "string",
          "description" : "Specifies if the tax lots are included in the function.",
          "enum" : [ "<None>", "Position", "Tax Lot", "PTCC Only Simulation" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        },
        "updateRightF" : {
          "type" : "boolean",
          "description" : "If the order sessionâ€™s data security profile is contained in the userâ€™s data profile composition with its update flag (auth_update_f) set to True, this attribute is set to True. Only sessions whose dataset attribute update_right_f = True can be modified by the user."
        }
      }
    },
    "updateOrderSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/OrderSessionWithPermValues"
        }
      }
    },
    "updatePayInstructionsInput" : {
      "type" : "object",
      "required" : [ "operNatE", "operSubtypeCode", "operTypeCode" ],
      "properties" : {
        "operNatE" : {
          "type" : "string",
          "description" : "Reference to the Operation Nature associated to the Payment Instruction.",
          "enum" : [ "Buy", "Sell", "Income", "Investment", "Withdrawal", "Fees & Taxes", "Adjustment", "Unit Issue", "Unit Redemption", "Transfer", "BP Transfer", "Locking", "Portfolio Transfer", "Book Value Adjustment", "Init", "Combined" ]
        },
        "operSubtypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Subtype associated to the Payment Instruction."
        },
        "operTypeCode" : {
          "type" : "string",
          "description" : "Reference to the Operation Type associated to the Payment Instruction."
        }
      }
    },
    "updatePayInstructionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PayInstructionWithPermValues"
        }
      }
    },
    "updateRebalanceOrderSessionsInput" : {
      "type" : "object",
      "required" : [ "ThirdPartyCode", "compDataE", "currencyCode", "derivationE", "eventGenNatE", "funcResultStatusE", "genGlobalOrderE", "instrDimMarketSegName", "instrumentCode", "minOrderAmntCurrCode", "orderAllocNatE", "orderNatE", "orderStatusE", "portConsRuleE", "portfolioCode", "portfolioListCode", "qtyAllocNatE", "sessionNatureE", "sessionStatusE", "typeCode" ],
      "properties" : {
        "ThirdPartyCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nClient set in the domain context when the portfolio dimension is a client (PortfolioThirdParty)."
        },
        "bookPortfolioId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Portfolio unique identifier. As for all IDs in Triple'A, this attribute is technical and is never seen by the user.\r\nThis field is mandatory and is computed by Triple'A."
        },
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcPivotD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nThis date is used as a pivot date to calculate other dates for financial functions."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "compDataE" : {
          "type" : "string",
          "description" : "This field is used in the Allocate Order, Benchmark Storage, Book Adjustment, Check Strategy, Portfolio Storage, Return Analysis, Strategy Reconciliation, Synthetic Administration, Order Entry and Valuation Storage functions. For all the other financial functions this value is restricted to \"On-Line\".",
          "enum" : [ "On-line", "Compute New", "Replace Old", "Use", "Delete", "Delete All", "View", "Simulate", "New, Permanent", "New, Non-permanent", "Replace, Permanent", "Replace, Non-permanent", "Compute New - Synth Admin", "Replace Old - Synth Admin", "Compute - History", "Delete - Perf Attrib", "Delete - Return Analysis", "Delete - Standard Perf", "On-Line Mkt-Value P&L", "Append", "Include Orders", "Insure Valid by Update", "Insure Valid by Online", "Use Stored If Not Online", "Replace Existing", "No compute", "Sum & Save Strategy" ]
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Unique technical identifier of the occurrence."
        },
        "derivationE" : {
          "type" : "string",
          "description" : "Used by the Check Strategy and Strategy Reconciliation functions. The possible values are:\r\n\r\n1. Yes. A derivation is performed on the strategies that do not have a valid derived strategy at the current date.\r\n\r\n2. No. No derivation is performed. This means that the investment objectives as defined are used. The modelling constraints are not taken into account.\r\n\r\n3. OnLine. A derivation is performed on every strategy. \r\n\r\nNote: No derivation is performed if there are no constraints linked to the portfolio.",
          "enum" : [ "Yes", "No", "Online" ]
        },
        "eventGenNatE" : {
          "type" : "string",
          "description" : "This parameter allows user to validate proposed orders before transforming them into operations (Event/Operation to be confirmed). \r\n\r\nIf you choose Automatic from the drop-down list, it saves operations directly, allowing you to enable subscription and send them to external order processing systems.",
          "enum" : [ "Automatic", "Events to be confirmed", "Events/Opers to be confirmed", "Gen. events with instrument", "Gen. events with instr+portf.", "Adjustment to be confirmed", "Automatic No Session", "Create Session", "Check & Publish", "Check, Split & Publish", "Create Session & Check", "Check, Case split & Publish" ]
        },
        "funcResultStatusE" : {
          "type" : "string",
          "description" : "Status of the function result. Specifies if you have confirmed your orders or not. Valid in the Order Entry, Allocate Order and Reconcile Strategy functions when the event in question generates order proposals.",
          "enum" : [ "<None>", "Draft", "Final", "Checked Session", "In Progress", "Un-checked", "Failed" ]
        },
        "functionDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionParentFunctionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "functionProcName" : {
          "type" : "string",
          "description" : "Reference to a function. \r\nA domain always needs to be defined for a financial function: Valuation, Operations History, Journal Of Liquidities, Performance Analysis, Operation List, Reports, etc."
        },
        "genGlobalOrderE" : {
          "type" : "string",
          "description" : "Specifies whether global orders are to be generated or not in the Allocate Order and Reconcile Strategy functions.",
          "enum" : [ "No Global Order", "Generate Global Orders", "Generate Group Index", "Combined Order" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "instrDimMarketSegId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "instrDimMarketSegName" : {
          "type" : "string"
        },
        "instrumentCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument set in the domain context when the instrument dimension is a single instrument."
        },
        "instrumentDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nInstrument dimension set in the domain context.",
          "enum" : [ "Instrument", "Instrument List", "Currency", "Currency List", "Instrument Enumeration", "Market Segment" ]
        },
        "minOrderAmntCurrCode" : {
          "type" : "string",
          "description" : "From Triple'A ADVANTAGE R3.50, you can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. The reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderAmountM" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction amount and currency in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the one you enter in the domain. This avoids generating small orders."
        },
        "minOrderPercentP" : {
          "type" : "number",
          "description" : "Users can set a minimum transaction percentage in both the Strategy Reconciliation and Allocate Order functions. \r\nThe reconciliation process will not generate any order proposals that have an amount lower than the minimum transaction percentage multiplied by the portfolio's market value. This avoids generating small orders."
        },
        "orderAllocNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the allocation in the Allocate Order function.",
          "enum" : [ "<None>", "Global Order Quantity", "Individual Order Quantity", "Resulting Instrument Quantity", "Individ. Order % of Port.", "Resulting Instr. % of Port.", "Resulting Mkt. Seg. % of Port.", "Switch Instruments", "Resulting Cash % of Port.", "Currency Hedging", "Portfolio Order Quantity", "Portfolio Resulting Quantity", "Conversion", "Arbitrage", "Combined Sell/Buy", "Instr. Resulting of Mkt Sgt", "Instr. Res % of Strat Mkt Sgt" ]
        },
        "orderGroupingFctDict" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Order Grouping Function: If this attribute contains a function_dict_id (parent function should be Order Grouping), the provided function is used to set the grouping criteria when generating global orders in Allocate Order and Rabalancing.\r\nIf this attribute is not set (NULL) in the provided domain, the financial function (Allocate Order / Rebalancing) will use the existing â€˜basicâ€™ feature."
        },
        "orderNatE" : {
          "type" : "string",
          "description" : "Specifies the nature of the order to generate in the Allocate Order function. The options are Buy/Sell, Buy or Sell.",
          "enum" : [ "Buy/Sell", "Buy", "Sell" ]
        },
        "orderStatusE" : {
          "type" : "string",
          "description" : "Specifies the status of the orders generated using the Allocate Order or the Strategy Reconciliation functions. The permitted values are the same as those of an ordinary operation.",
          "enum" : [ "Cancelled", "Expired", "Validation Rejected", "Rejected", "Simulation", "To Validate", "To Group", "To Send", "Sent", "Received", "Cancellation To Send", "Cancellation Sent", "Cancellation Received", "Cancellation Placed", "Placed", "Partially Executed", "Executed", "External Position", "Accounted", "Post Accounted" ]
        },
        "portConsRuleE" : {
          "type" : "string",
          "description" : "Specifies the desired portfolio consolidation type. The permitted values are:\r\n1. Merged\r\n2. Detailed\r\n3. Tiled\r\n4. Burst\r\n5. Detailed Children\r\n6. Merged TWR\r\n7. Merged Hierarchy\r\nThe Consolidation section is only taken into account when a business function\r\nis run for a group of portfolios.",
          "enum" : [ "Merged", "Detailed", "Tiled", "Burst", "Detailed Children", "Merged TWR", "Merged Hierarchy" ]
        },
        "portObject" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Specifies a Portfolio, a Portfolio List or a Third party.\r\nThis field contains the ID of an occurrence in the table defined by the 'dim_port_dict_id' field (if not NULL)."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        },
        "portfolioDimensionE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web packaging.\r\n\r\nPortfolio dimension set in the domain context.",
          "enum" : [ "Portfolio", "Portfolio Third Party", "Portfolio Admin Manager", "Portfolio Comm Manager", "Portfolio List", "Portfolio Enumeration", "Instrument", "Instrument List", "Strategy", "Currency", "Currency List", "Change Set", "Third Party List", "Instrument Recomm Level", "Portfolio Compo" ]
        },
        "portfolioListCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio list set in the domain context when the portfolio dimension is a list."
        },
        "qtyAllocNatE" : {
          "type" : "string",
          "description" : "Used in the Allocate Order function to indicates the type of allocation of the quantity of a global order among several portfolios (in the case of a Global Order Quantity).",
          "enum" : [ "<Default>", "Pro Rata of MV", "Pro Rata of Qty", "Equal %", "Pro Rata of Executed Order", "Manual Allocation", "Unspecified Qty" ]
        },
        "sessionNatureE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the nature of an order session.",
          "enum" : [ "None", "Order", "Investment Proposal", "Single Order", "Order With Validation", "Investment Proposal Client Portfolios", "Order Allocation", "Realignment", "Allocate Order" ]
        },
        "sessionStatusE" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nIt defines the status of an order session. This status manages the order session workflow in the WUI and must not be confused with the function result status (func_result_status_e) managed by TAP Core financial functions and used in the GUI.",
          "enum" : [ "<None>", "Cancelled", "Generation running", "Generation failed", "Working", "Check running", "Check failed", "Checked", "Sent for Validation", "Rejected", "Validated", "Released for Trading running", "Released for Trading failed", "Released for Trading", "Validated for Trading running", "Validated for Trading failed", "Validated for Trading", "Expired" ]
        },
        "typeCode" : {
          "type" : "string",
          "description" : "Defines the type of the domain.\r\n\r\nUsed in Order List WUI packaging to specify the order list type: order list on all orders, order list on orders to validate, or order list on cancellable orders. The goal is to use the same format for various WUI views."
        }
      }
    },
    "updateRebalanceOrderSessionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/RebalanceOrderSessionWithPermValues"
        }
      }
    },
    "updateSimulatedTaxLotPickingInput" : {
      "type" : "object",
      "required" : [ "funcResultId", "operationId", "priorityN", "quantityN", "taxLotInitialId" ],
      "properties" : {
        "funcResultId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "operationId" : {
          "type" : "integer",
          "format" : "int64"
        },
        "priorityN" : {
          "type" : "number"
        },
        "quantityN" : {
          "type" : "number"
        },
        "targetN" : {
          "type" : "number"
        },
        "taxLotInitialId" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "updateSimulatedTaxLotPickingSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/SimulatedTaxLotPickingWithPermValues"
        }
      }
    },
    "validatePendingOrdersSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    },
    "verifySessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        }
      }
    }
  }
}