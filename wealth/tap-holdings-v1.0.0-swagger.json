{
  "swagger" : "2.0",
  "info" : {
    "version" : "v1.0.0",
    "title" : "Holdings Enterprise API"
  },
  "basePath" : "/triplea/api/v1.0.0/holdings",
  "security" : [ {
    "tapBasicAuth" : [ ],
    "X-Channel" : [ ]
  } ],
  "paths" : {
    "/assets" : {
      "get" : {
        "tags" : [ "Assets", "Search" ],
        "summary" : "Search Assets",
        "operationId" : "getValuationSearchAggregations",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "portfolioCode",
          "in" : "query",
          "description" : "Portfolio to which the request is related.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instrCodeEq",
          "in" : "query",
          "description" : "Code of the instrument.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "systemCcyCodeEq",
          "in" : "query",
          "description" : "System currency.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getValuationSearchAggregationsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customers/{customerCode}/assetClasses" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get Asset Classes",
        "operationId" : "getCustomerAssetClasses",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "code of third party",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ownershipRuleE",
          "in" : "query",
          "description" : "Specifies the role defined on the indirect link between the porfolio and the third party. This field is editable only if the value of Portfolio Dimension is Third Party",
          "required" : false,
          "type" : "string",
          "enum" : [ "Owner", "Bare Ownership", "Usufruct", "Joint Owner", "Key Contact", "Beneficial Owner", "Substantial Owner", "Trustee", "Beneficiary", "Account Opener", "Authorized Signatory", "Potential Beneficiary", "Curator Or Guardian", "Controlling Person", "Foundation Function Or Other", "Founder", "Investment Manager", "Policy Holder", "Power of Attorney", "Power of Information", "Premium Payer", "Protector", "Settlor", "Trust Function Or Other" ]
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCustomerAssetClassesSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customers/{customerCode}/consolidatedSummary" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get Consolidated Summary",
        "operationId" : "getCustomerConsolidatedSummary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "code of third party",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ownershipRuleE",
          "in" : "query",
          "description" : "Specifies the role defined on the indirect link between the porfolio and the third party. This field is editable only if the value of Portfolio Dimension is Third Party",
          "required" : false,
          "type" : "string",
          "enum" : [ "Owner", "Bare Ownership", "Usufruct", "Joint Owner", "Key Contact", "Beneficial Owner", "Substantial Owner", "Trustee", "Beneficiary", "Account Opener", "Authorized Signatory", "Potential Beneficiary", "Curator Or Guardian", "Controlling Person", "Foundation Function Or Other", "Founder", "Investment Manager", "Policy Holder", "Power of Attorney", "Power of Information", "Premium Payer", "Protector", "Settlor", "Trust Function Or Other" ]
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCustomerConsolidatedSummarySuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customers/{customerCode}/goals" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "get goals by customer code",
        "operationId" : "getGoals",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "Client set in the domain context when the portfolio dimension is a client (PortfolioThirdParty).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ownershipRuleE",
          "in" : "query",
          "description" : "Specifies the role defined on the indirect link between the porfolio and the third party. This field is editable only if the value of Portfolio Dimension is Third Party",
          "required" : false,
          "type" : "string",
          "enum" : [ "Owner", "Bare Ownership", "Usufruct", "Joint Owner", "Key Contact", "Beneficial Owner", "Substantial Owner", "Trustee", "Beneficiary", "Account Opener", "Authorized Signatory", "Potential Beneficiary", "Curator Or Guardian", "Controlling Person", "Foundation Function Or Other", "Founder", "Investment Manager", "Policy Holder", "Power of Attorney", "Power of Information", "Premium Payer", "Protector", "Settlor", "Trust Function Or Other" ]
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getGoalsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customers/{customerCode}/performance" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "get Performance by customer",
        "operationId" : "getPerformance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "code of third party",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "currCode",
          "in" : "query",
          "description" : "Code of Currency",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ownershipRuleE",
          "in" : "query",
          "description" : "Specifies the role defined on the indirect link between the porfolio and the third party. This field is editable only if the value of Portfolio Dimension is Third Party",
          "required" : false,
          "type" : "string",
          "enum" : [ "Owner", "Bare Ownership", "Usufruct", "Joint Owner", "Key Contact", "Beneficial Owner", "Substantial Owner", "Trustee", "Beneficiary", "Account Opener", "Authorized Signatory", "Potential Beneficiary", "Curator Or Guardian", "Controlling Person", "Foundation Function Or Other", "Founder", "Investment Manager", "Policy Holder", "Power of Attorney", "Power of Information", "Premium Payer", "Protector", "Settlor", "Trust Function Or Other" ]
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPerformanceSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/customers/{customerCode}/portfolios" : {
      "get" : {
        "tags" : [ "Customers" ],
        "summary" : "Get the portfolio details by customer code",
        "operationId" : "getCustPortfolios",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "customerCode",
          "in" : "path",
          "description" : "Client set in the domain context when the portfolio dimension is a client (PortfolioThirdParty).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ownershipRuleE",
          "in" : "query",
          "description" : "Specifies the role defined on the indirect link between the porfolio and the third party. This field is editable only if the value of Portfolio Dimension is Third Party",
          "required" : false,
          "type" : "string",
          "enum" : [ "Owner", "Bare Ownership", "Usufruct", "Joint Owner", "Key Contact", "Beneficial Owner", "Substantial Owner", "Trustee", "Beneficiary", "Account Opener", "Authorized Signatory", "Potential Beneficiary", "Curator Or Guardian", "Controlling Person", "Foundation Function Or Other", "Founder", "Investment Manager", "Policy Holder", "Power of Attorney", "Power of Information", "Premium Payer", "Protector", "Settlor", "Trust Function Or Other" ]
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCustPortfoliosSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/freeDepositHistos" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "create a  FreeDepositHisto",
        "operationId" : "createFreeDepositHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createFreeDepositHistoInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createFreeDepositHistoSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createFreeDepositHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/freeDepositHistos/{code}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get a FreeDepositHisto",
        "operationId" : "getFreeDepositHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Code of the Free Deposit History.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getFreeDepositHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plans" ],
        "summary" : "update a FreeDepositHisto",
        "operationId" : "updateFreeDepositHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Code of the Free Deposit History.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateFreeDepositHistoInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateFreeDepositHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Delete a FreeDepositHisto",
        "operationId" : "deleteFreeDepositHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Code of the Free Deposit History.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/goalPerformances/{portfolioCode}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get Performance on goal",
        "operationId" : "getGoalPerf",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "calcFromD",
          "in" : "query",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "calcTillD",
          "in" : "query",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getGoalPerfSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/goals/{portfolioCode}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get Risk measures on IP Strategy used in a goal",
        "operationId" : "getCheckGoal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getCheckGoalSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/monteCarloSimulation" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "The Monte Carlo Generator simulates yearly performance based on a Normal distribution of returns with a mean of the Expected Return, and a standard deviation of the Volatility.",
        "operationId" : "getMonteCarloSimulation",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MonteCarloInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getMonteCarloSimulationSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getMonteCarloSimulationSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planDefinitions" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "create a  PlanDefinition",
        "operationId" : "createPlanDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createPlanDefinitionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanDefinitionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanDefinitionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planDefinitions/{id}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get a PlanDefinition",
        "operationId" : "getPlanDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPlanDefinitionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plans" ],
        "summary" : "update a PlanDefinition",
        "operationId" : "updatePlanDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updatePlanDefinitionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updatePlanDefinitionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Delete a PlanDefinition",
        "operationId" : "deletePlanDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planInvestDates" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "create a  PlanInvestDate",
        "operationId" : "createPlanInvestDate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createPlanInvestDateInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanInvestDateSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanInvestDateSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planInvestDates/{id}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get a PlanInvestDate",
        "operationId" : "getPlanInvestDate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPlanInvestDateSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plans" ],
        "summary" : "update a PlanInvestDate",
        "operationId" : "updatePlanInvestDate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updatePlanInvestDateInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updatePlanInvestDateSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Delete a PlanInvestDate",
        "operationId" : "deletePlanInvestDate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planInvestParamHistos" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "Create Plan Invest Param Histo",
        "operationId" : "createPlanInvestParamHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createPlanInvestParamHistoInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanInvestParamHistoSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanInvestParamHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planInvestParamHistos/{id}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get Plan Invest Param Histo",
        "operationId" : "getPlanInvestParamHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPlanInvestParamHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plans" ],
        "summary" : "Update Plan Investment Param Histo",
        "operationId" : "updatePlanInvestParamHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updatePlanInvestParamHistoInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updatePlanInvestParamHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Delete Plan Investment Param Histo",
        "operationId" : "deletePlanInvestmentParamHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planObjectiveHistos" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "create a  PlanObjectiveHisto",
        "operationId" : "createPlanObjectiveHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createPlanObjectiveHistoInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanObjectiveHistoSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanObjectiveHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planObjectiveHistos/{id}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get a PlanObjectiveHisto",
        "operationId" : "getPlanObjectiveHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPlanObjectiveHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plans" ],
        "summary" : "update a PlanObjectiveHisto",
        "operationId" : "updatePlanObjectiveHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updatePlanObjectiveHistoInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updatePlanObjectiveHistoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Delete a PlanObjectiveHisto",
        "operationId" : "deletePlanObjectiveHisto",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planSessions" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "create a  PlanSession",
        "operationId" : "createPlanSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createPlanSessionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanSessionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createPlanSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/planSessions/{funcResultCode}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get a PlanSession",
        "operationId" : "getPlanSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPlanSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plans" ],
        "summary" : "update a PlanSession",
        "operationId" : "updatePlanSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updatePlanSessionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updatePlanSessionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Delete a PlanSession",
        "operationId" : "deletePlanSession",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "funcResultCode",
          "in" : "path",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/standingInstructions" : {
      "post" : {
        "tags" : [ "Plans" ],
        "summary" : "create a  StandingInstruction",
        "operationId" : "createStandingInstruction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/createStandingInstructionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createStandingInstructionSuccessResponse"
            }
          },
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/createStandingInstructionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/plans/standingInstructions/{id}" : {
      "get" : {
        "tags" : [ "Plans" ],
        "summary" : "Get a StandingInstruction",
        "operationId" : "getStandingInstruction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getStandingInstructionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plans" ],
        "summary" : "update a StandingInstruction",
        "operationId" : "updateStandingInstruction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "complete_only",
          "in" : "query",
          "description" : "if true runs only the initials / default values(if interactiveToken is passed). Useful for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "validate_only",
          "in" : "query",
          "description" : "if true,runs the initials / default values(if interactiveToken is passed) and input controls. Usefull for the interactive edition.The insert/update will be not executed.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "interactiveToken",
          "in" : "query",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only .",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "functionScreenCode",
          "in" : "query",
          "description" : "Force script evaluation with the specified screen.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/updateStandingInstructionInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/updateStandingInstructionSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Plans" ],
        "summary" : "Delete a StandingInstruction",
        "operationId" : "deleteStandingInstruction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolioLists/{ptfListCode}/assetClasses" : {
      "get" : {
        "tags" : [ "PortfolioLists" ],
        "summary" : "Get Asset Classes",
        "operationId" : "getPtfListAssetClasses",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ptfListCode",
          "in" : "path",
          "description" : "Code Of Portfolio List",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPtfListAssetClassesSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolioLists/{ptfListCode}/consolidatedSummary" : {
      "get" : {
        "tags" : [ "PortfolioLists" ],
        "summary" : "Get Consolidated Summary",
        "operationId" : "getPtfListConsolidatedSummary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ptfListCode",
          "in" : "path",
          "description" : "Code Of Portfolio List",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPtfListConsolidatedSummarySuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/accountOperations" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "Get Account Operations",
        "operationId" : "getAccountOperations",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getAccountOperationsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/assetClasses" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "Get Asset Classes",
        "operationId" : "getPortfolioAssetClasses",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPortfolioAssetClassesSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/checkStrategy" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the accounted operations by portfolio code",
        "operationId" : "getRecentOperations",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getRecentOperationsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/consolidatedSummary" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the ConsolidatedSummary",
        "operationId" : "getAllConsolidatedSummary",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "loadHierarchyF",
          "in" : "query",
          "description" : "Specifies the way a Portfolio Hierarchy is loaded or not.\r\nThe consolidation is based on two concepts: \r\nâ€¢ a top-down approach: From Parent.\r\nâ€¢ a bottom-up approach: Full.\r\nOnly child portfolios whose nature is different from Non-discretionary are returned (see load_non_discrt_f for more details).",
          "required" : false,
          "type" : "string",
          "enum" : [ "No", "From Parent", "Full" ]
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getAllConsolidatedSummarySuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/futureCashFlow" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "Future Cash Flow",
        "operationId" : "getFutureCashFlow",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getFutureCashFlowSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/hierarchy" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the hierarchy",
        "operationId" : "gethierarchy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/gethierarchySuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/performance" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the performance for a portfolio",
        "operationId" : "getPortPerformance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "calcFromD",
          "in" : "query",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "calcTillD",
          "in" : "query",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPortPerformanceSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/portfolioCompo" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get details of portfolio",
        "operationId" : "getPortfolioCompo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPortfolioCompoSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/positions" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "Get list of Positions for a portfolio",
        "operationId" : "getPositions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "calcFromD",
          "in" : "query",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "calcTillD",
          "in" : "query",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getPositionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/recentOperations" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the accounted operations by portfolio code",
        "operationId" : "getAllRecentOperations",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "calcFromD",
          "in" : "query",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "calcTillD",
          "in" : "query",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return.",
          "required" : false,
          "type" : "string",
          "format" : "date-time"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getAllRecentOperationsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/restrictions" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the restrictions",
        "operationId" : "getrestrictions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getrestrictionsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/riskChecks" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the riskChecks",
        "operationId" : "getriskChecks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getriskChecksSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/riskIndicators" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the RiskIndicators",
        "operationId" : "getRiskIndicators",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getRiskIndicatorsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/portfolios/{portfolioCode}/riskPerfs" : {
      "get" : {
        "tags" : [ "Portfolios" ],
        "summary" : "get all the riskPerfs",
        "operationId" : "getRiskPerfs",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "portfolioCode",
          "in" : "path",
          "description" : "code of portfolio",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getRiskPerfsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    },
    "/positions" : {
      "get" : {
        "tags" : [ "Positions", "Search" ],
        "summary" : "Search Positions",
        "operationId" : "getValuationSearchDetails",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "page_size",
          "in" : "query",
          "description" : "The total number of records per page",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_start",
          "in" : "query",
          "description" : "The start page from which the response should be displayed",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "page_token",
          "in" : "query",
          "description" : "Random and unique string for each page. Used for security purpose and cahe",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "portfolioCode",
          "in" : "query",
          "description" : "Portfolio to which the request is related.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instrCodeEq",
          "in" : "query",
          "description" : "Indicates the instrument of the position.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "depositCodeEq",
          "in" : "query",
          "description" : "Indicates the deposit set in the position.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/getValuationSearchDetailsSuccessResponse"
            }
          },
          "400" : {
            "description" : "Bad Request, input control error",
            "schema" : {
              "$ref" : "#/definitions/HeaderResponse"
            }
          },
          "404" : {
            "description" : "Object not found",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          },
          "500" : {
            "description" : "Server error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponse"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "tapBasicAuth" : {
      "description" : "Tap Basic Authentication",
      "type" : "basic"
    },
    "X-Channel" : {
      "description" : "name of Channel",
      "type" : "apiKey",
      "name" : "X-Channel",
      "in" : "header"
    }
  },
  "definitions" : {
    "ApiResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "level" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string",
          "enum" : [ "WARNING", "ERROR", "INFO" ]
        }
      },
      "title" : "ApiResponse"
    },
    "Audit" : {
      "type" : "object",
      "properties" : {
        "startTime" : {
          "type" : "string"
        },
        "endTime" : {
          "type" : "string"
        },
        "totalTime" : {
          "type" : "string"
        },
        "processTime" : {
          "type" : "string"
        },
        "scriptTime" : {
          "type" : "string"
        },
        "otherTime" : {
          "type" : "string"
        }
      },
      "title" : "Audit"
    },
    "FreeDepositHisto" : {
      "type" : "object",
      "required" : [ "amountM", "code", "currencyCode", "investmentD", "natureE", "planDefinitionCode", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE" ],
      "properties" : {
        "amountM" : {
          "type" : "number",
          "description" : "Amount of the free deposit."
        },
        "code" : {
          "type" : "string",
          "description" : "Code of the Free Deposit History."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Currency of the deposit."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the deposit."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the deposit.",
          "enum" : [ "None", "Initial deposit", "Free deposit" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Definition of plan related to the deposit."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Cash account that is debited for the deposit."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Portfolio of the cash account that is debited for the deposit."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        }
      }
    },
    "FreeDepositHistoWithPermValues" : {
      "type" : "object",
      "required" : [ "amountM", "code", "currencyCode", "investmentD", "natureE", "planDefinitionCode", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE" ],
      "properties" : {
        "amountM" : {
          "type" : "number",
          "description" : "Amount of the free deposit."
        },
        "code" : {
          "type" : "string",
          "description" : "Code of the Free Deposit History."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Currency of the deposit."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the deposit."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the deposit.",
          "enum" : [ "None", "Initial deposit", "Free deposit" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Definition of plan related to the deposit."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Cash account that is debited for the deposit."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Portfolio of the cash account that is debited for the deposit."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        }
      }
    },
    "HeaderCreateResponse" : {
      "type" : "object",
      "properties" : {
        "Audit" : {
          "$ref" : "#/definitions/Audit"
        },
        "messages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MessageResponse"
          }
        },
        "interactiveToken" : {
          "type" : "string",
          "description" : "Token generated during the interactive edition. This token is necessary for locked automatically the fields during a sequuence of calls complete_only / complete_validate_only ."
        }
      },
      "title" : "HeaderCreateResponse"
    },
    "HeaderListResponse" : {
      "type" : "object",
      "properties" : {
        "Pagination" : {
          "$ref" : "#/definitions/Pagination"
        },
        "Audit" : {
          "$ref" : "#/definitions/Audit"
        }
      },
      "title" : "HeaderListResponse"
    },
    "HeaderResponse" : {
      "type" : "object",
      "properties" : {
        "Audit" : {
          "$ref" : "#/definitions/Audit"
        },
        "messages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MessageResponse"
          }
        }
      },
      "title" : "HeaderResponse"
    },
    "MessageResponse" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "level" : {
          "type" : "string",
          "enum" : [ "WARNING", "ERROR", "INFO" ]
        },
        "message" : {
          "type" : "string"
        }
      },
      "title" : "MessageResponse"
    },
    "MonteCarloInput" : {
      "type" : "object",
      "required" : [ "contributionAmount", "expectedReturn", "initialGoalAmount", "nPeriods", "targetGoalAmount", "volatility" ],
      "properties" : {
        "contributionAmount" : {
          "type" : "number",
          "description" : "Describes the amount that the client can contribute.Should be a numeric value between -999,999,99.99 and 999,999,999.99."
        },
        "contributionFrequency" : {
          "type" : "string",
          "description" : "Identifies whether the contribution frequency.",
          "enum" : [ "Month", "Quarter", "Year" ]
        },
        "expectedReturn" : {
          "type" : "number",
          "description" : "Captures the client’s expected return in percent."
        },
        "initialGoalAmount" : {
          "type" : "number",
          "description" : "Describes the amount the client has to invest.Should be a numeric value >= 0 and up to a maximum value of 999,999,999,999.99."
        },
        "nPeriods" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Captures the investment time horizon , in Year."
        },
        "nTrials" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of trials.Default value defines in appl_parameter of Front Office – PM PCK_GL_MCS_TRIALS_DEFAULT."
        },
        "targetGoalAmount" : {
          "type" : "number",
          "description" : "Describes the amount that will be needed at the end of the goal.Should be a numeric value >= 0 and up to a maximum value of 999,999,999,999.99."
        },
        "volatility" : {
          "type" : "number",
          "description" : "Captures the client’s risk tolerance.Should be a percentage value >= 0 and <= 100."
        }
      }
    },
    "MonteCarloPercentile" : {
      "type" : "object",
      "properties" : {
        "percent1" : {
          "type" : "number",
          "description" : "1st percentile."
        },
        "percent5" : {
          "type" : "number",
          "description" : "5th percentile."
        },
        "percent50" : {
          "type" : "number",
          "description" : "50th percentile."
        },
        "percent95" : {
          "type" : "number",
          "description" : "95th percentile."
        },
        "percent99" : {
          "type" : "number",
          "description" : "99th percentile."
        },
        "year" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Year of each period; always begin today."
        }
      }
    },
    "Pagination" : {
      "type" : "object",
      "properties" : {
        "page" : {
          "type" : "integer",
          "format" : "int32"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        },
        "count" : {
          "type" : "integer",
          "format" : "int32"
        },
        "total" : {
          "type" : "integer",
          "format" : "int32"
        },
        "token" : {
          "type" : "string",
          "description" : "token used by server"
        }
      },
      "title" : "Pagination"
    },
    "PlanDefinition" : {
      "type" : "object",
      "required" : [ "code", "dataSecuProfId", "name", "natureE", "objectiveNatureE", "portfolioCode", "statusE", "thirdPartyCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Code of the Plan Definition."
        },
        "dataSecuProfId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Provides a reference to the security profile to which the occurrence belongs. This mandatory reference controls user access to the occurrence."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the Plan Definition."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the Plan Definition."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Provides the nature of the Plan Definition.",
          "enum" : [ "None", "Investment Plan", "Savings Plan", "Retirement Plan", "Education Plan", "Life Insurance Plan", "Systematic Investment Plan" ]
        },
        "objectiveNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the objective of the plan.",
          "enum" : [ "Free Amount", "Invest Amount", "Period Amount", "Objective Amount" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio that is linked to the Plan Definition. A portfolio can have only one valid plan at a time."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the Plan Definition.",
          "enum" : [ "Cancelled", "In Progress", "To validate", "Validated", "Rejected", "Suspended", "Deactivated", "Closed" ]
        },
        "thirdPartyCode" : {
          "type" : "string",
          "description" : "Identifies the client for which the financial plan is created."
        },
        "validationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of validation for the Plan Definition."
        }
      }
    },
    "PlanDefinitionWithPermValues" : {
      "type" : "object",
      "required" : [ "code", "dataSecuProfId", "name", "natureE", "objectiveNatureE", "portfolioCode", "statusE", "thirdPartyCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Code of the Plan Definition."
        },
        "dataSecuProfId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Provides a reference to the security profile to which the occurrence belongs. This mandatory reference controls user access to the occurrence."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the Plan Definition."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the Plan Definition."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Provides the nature of the Plan Definition.",
          "enum" : [ "None", "Investment Plan", "Savings Plan", "Retirement Plan", "Education Plan", "Life Insurance Plan", "Systematic Investment Plan" ]
        },
        "objectiveNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the objective of the plan.",
          "enum" : [ "Free Amount", "Invest Amount", "Period Amount", "Objective Amount" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio that is linked to the Plan Definition. A portfolio can have only one valid plan at a time."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the Plan Definition.",
          "enum" : [ "Cancelled", "In Progress", "To validate", "Validated", "Rejected", "Suspended", "Deactivated", "Closed" ]
        },
        "thirdPartyCode" : {
          "type" : "string",
          "description" : "Identifies the client for which the financial plan is created."
        },
        "validationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of validation for the Plan Definition."
        }
      }
    },
    "PlanInvestDate" : {
      "type" : "object",
      "required" : [ "investmentD", "planInvestParamHistoId", "statusE" ],
      "properties" : {
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the record."
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Indicates the reference of the standing instruction related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event code set as the standing instruction used to generate the orders.\r\n\r\nNote that should the Mutual Fund Systematic plan have more than one standing instruction, the first one is used to set the event code."
        },
        "eventNumberN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Indicates the date related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event number set as investment plan date, with the format YYYYMMDD, for example 20190201 a for a plan investment date on February 1st 2019."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the investment."
        },
        "planInvestParamHistoId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Identifies the Plan Investment Parameter History related to the plan investment date."
        },
        "retryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the retry number related to a plan investment.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed. \r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the investment.",
          "enum" : [ "Untreated", "Treated", "Cancelled", "Success", "Failed", "Retry candidate", "Retry treated", "Retry cancelled", "Retry success", "Retry failed" ]
        }
      }
    },
    "PlanInvestDateWithPermValues" : {
      "type" : "object",
      "required" : [ "investmentD", "planInvestParamHistoId", "statusE" ],
      "properties" : {
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the record."
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Indicates the reference of the standing instruction related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event code set as the standing instruction used to generate the orders.\r\n\r\nNote that should the Mutual Fund Systematic plan have more than one standing instruction, the first one is used to set the event code."
        },
        "eventNumberN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Indicates the date related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event number set as investment plan date, with the format YYYYMMDD, for example 20190201 a for a plan investment date on February 1st 2019."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the investment."
        },
        "planInvestParamHistoId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Identifies the Plan Investment Parameter History related to the plan investment date."
        },
        "retryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the retry number related to a plan investment.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed. \r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the investment.",
          "enum" : [ "Untreated", "Treated", "Cancelled", "Success", "Failed", "Retry candidate", "Retry treated", "Retry cancelled", "Retry success", "Retry failed" ]
        }
      }
    },
    "PlanInvestParamHisto" : {
      "type" : "object",
      "required" : [ "beginD", "endOfMonthConvE", "genCashOpF", "investAcctCode", "investFreqUnitE", "investmentDayE", "planDefinitionCode", "retryFrequencyUnitE", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE", "updAmtToObjectiveE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan investment parameter."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the recurrent deposit must be transferred from. This attribute is not a link to the instrument entity in order to support accounts not present in FOPM but available in the back-office."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan investment parameter."
        },
        "endOfMonthConvE" : {
          "type" : "string",
          "description" : "Provides the ability to manage the real last day of the month (i.e., 30th or 31st depending on the month).",
          "enum" : [ "<None>", "Last", "Same", "Last 360" ]
        },
        "firstInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the first investment date defined for the financial plan."
        },
        "genCashOpF" : {
          "type" : "boolean",
          "description" : "Manages the ability to specify whether the cash transfer operation from the debited account has to be created."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investAcctCode" : {
          "type" : "string",
          "description" : "Identifies the account where the cash is reserved and the one where the security investment will be settled."
        },
        "investFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment."
        },
        "investFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "investmentDayE" : {
          "type" : "string",
          "description" : "Provides the day in a month on which the investment is done.",
          "enum" : [ "None", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" ]
        },
        "lastInvestmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the last investment date defined for the financial plan. This date is set by default value and used only for information purposes, no processes are linked to this date."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxInvestAmtM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to invest. It manages the ability to cap the amount to invest mainly when, for instance, there are missing payments or the objective amount has been updated."
        },
        "maxRetryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the maximum number of order retries before an order cycle is skipped.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "nextInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the next investment date calculated for the financial plan."
        },
        "orderCyclesN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the number of cycles required for the plan. This number is then used to calculate, by default value, the plan end date.\r\n\r\nLetâ€™s take the following example: a Mutual Fund Systematic Plan starts on February 14th 2018, with a monthly frequency, investing every 20th of each month.\r\n\r\nThe first investment date will be defaulted as February 20th 2018.\r\n\r\nShould the user enters the number of cycles as 12 (meaning investing for 12 months), the end date will be defaulted as January 20th 2019.\r\n\r\nThe 12 investment dates would be:\r\n1 - 20.02.2018\r\n2 - 20.03.2018\r\n3 - 20.04.2018\r\n4 - 20.05.2018\r\n5 - 20.06.2018\r\n6 - 20.07.2018\r\n7 - 20.08.2018\r\n8 - 20.09.2018\r\n9 - 20.10.2018\r\n10 - 20.11.2018\r\n11 - 20.12.2018\r\n12 - 20.01.2019"
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan investment parameter."
        },
        "retryFrequencyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency number for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency number must be used in conjunction with the retry frequency unit (retry_frequency_unit_e).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "retryFrequencyUnitE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency unit for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency unit must be used in conjunction with the retry frequency number (retry_frequency_n).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "standingOrderExternalRef" : {
          "type" : "string",
          "description" : "Provides the external reference to the standing order.\r\nThis attribute is used to track the standing order saved in the external tool that manages all the cash transfers."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Identifies the cash account that is debited for the investment."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio of the cash account that is debited for the investment."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Provides the amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        },
        "updAmtToObjectiveE" : {
          "type" : "string",
          "description" : "Provides the amount of the investment that can be updated to reach the minimum or the maximum amount defined at the plan objective level or the plan rule level.\r\n\r\nFor plan with objective nature set to \"Free Amount\", \"Period Amount\", or \"Objective Amount\", Update Amount to Objective should be set to No.\r\n\r\nFor plan with objective nature set to  \"Invest Amount\",  Update Amount to Objective should be set to No or Reach min.",
          "enum" : [ "No", "Reach Min Amount", "Reach Max Amount" ]
        }
      }
    },
    "PlanInvestParamHistoWithPermValues" : {
      "type" : "object",
      "required" : [ "beginD", "endOfMonthConvE", "genCashOpF", "investAcctCode", "investFreqUnitE", "investmentDayE", "planDefinitionCode", "retryFrequencyUnitE", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE", "updAmtToObjectiveE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan investment parameter."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the recurrent deposit must be transferred from. This attribute is not a link to the instrument entity in order to support accounts not present in FOPM but available in the back-office."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan investment parameter."
        },
        "endOfMonthConvE" : {
          "type" : "string",
          "description" : "Provides the ability to manage the real last day of the month (i.e., 30th or 31st depending on the month).",
          "enum" : [ "<None>", "Last", "Same", "Last 360" ]
        },
        "firstInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the first investment date defined for the financial plan."
        },
        "genCashOpF" : {
          "type" : "boolean",
          "description" : "Manages the ability to specify whether the cash transfer operation from the debited account has to be created."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investAcctCode" : {
          "type" : "string",
          "description" : "Identifies the account where the cash is reserved and the one where the security investment will be settled."
        },
        "investFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment."
        },
        "investFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "investmentDayE" : {
          "type" : "string",
          "description" : "Provides the day in a month on which the investment is done.",
          "enum" : [ "None", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" ]
        },
        "lastInvestmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the last investment date defined for the financial plan. This date is set by default value and used only for information purposes, no processes are linked to this date."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxInvestAmtM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to invest. It manages the ability to cap the amount to invest mainly when, for instance, there are missing payments or the objective amount has been updated."
        },
        "maxRetryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the maximum number of order retries before an order cycle is skipped.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "nextInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the next investment date calculated for the financial plan."
        },
        "orderCyclesN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the number of cycles required for the plan. This number is then used to calculate, by default value, the plan end date.\r\n\r\nLetâ€™s take the following example: a Mutual Fund Systematic Plan starts on February 14th 2018, with a monthly frequency, investing every 20th of each month.\r\n\r\nThe first investment date will be defaulted as February 20th 2018.\r\n\r\nShould the user enters the number of cycles as 12 (meaning investing for 12 months), the end date will be defaulted as January 20th 2019.\r\n\r\nThe 12 investment dates would be:\r\n1 - 20.02.2018\r\n2 - 20.03.2018\r\n3 - 20.04.2018\r\n4 - 20.05.2018\r\n5 - 20.06.2018\r\n6 - 20.07.2018\r\n7 - 20.08.2018\r\n8 - 20.09.2018\r\n9 - 20.10.2018\r\n10 - 20.11.2018\r\n11 - 20.12.2018\r\n12 - 20.01.2019"
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan investment parameter."
        },
        "retryFrequencyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency number for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency number must be used in conjunction with the retry frequency unit (retry_frequency_unit_e).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "retryFrequencyUnitE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency unit for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency unit must be used in conjunction with the retry frequency number (retry_frequency_n).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "standingOrderExternalRef" : {
          "type" : "string",
          "description" : "Provides the external reference to the standing order.\r\nThis attribute is used to track the standing order saved in the external tool that manages all the cash transfers."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Identifies the cash account that is debited for the investment."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio of the cash account that is debited for the investment."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Provides the amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        },
        "updAmtToObjectiveE" : {
          "type" : "string",
          "description" : "Provides the amount of the investment that can be updated to reach the minimum or the maximum amount defined at the plan objective level or the plan rule level.\r\n\r\nFor plan with objective nature set to \"Free Amount\", \"Period Amount\", or \"Objective Amount\", Update Amount to Objective should be set to No.\r\n\r\nFor plan with objective nature set to  \"Invest Amount\",  Update Amount to Objective should be set to No or Reach min.",
          "enum" : [ "No", "Reach Min Amount", "Reach Max Amount" ]
        }
      }
    },
    "PlanObjectiveHisto" : {
      "type" : "object",
      "required" : [ "amountNatureE", "beginD", "currencyCode", "maxAmtIndexRuleE", "minAmtIndexRuleE", "periodFreqUnitE", "planDefinitionCode" ],
      "properties" : {
        "amountNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the amounts defined for the plan objective.",
          "enum" : [ "Invested Amount", "Market Value" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan objective."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan objective."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Identifies the currency of the amounts of the plan objective."
        },
        "expectedAmountM" : {
          "type" : "number",
          "description" : "Provides the expected amount the user wants to achieve at the end of the plan. This amount is used only for information and is never used by the Event Generation function to compute the amount to invest."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxAmountM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Amount Objective\", the maximum amount is not necessary."
        },
        "maxAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the maximum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "maxAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the maximum amount."
        },
        "minAmountM" : {
          "type" : "number",
          "description" : "Provides the minimum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Invest Amount\", the minimum amount is mandatory and must be defined  either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Free Amount\", the maximum amount is not necessary."
        },
        "minAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the minimum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "minAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the minimum amount."
        },
        "objectiveD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of the plan objective."
        },
        "periodFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal."
        },
        "periodFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal.\r\n\r\nFor plan with objective nature set to \"Period Amount\", the period frequency is mandatory and must be defined either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Invest Amount\" or \"Free Amount\", the period frequency is not necessary.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan objective."
        }
      }
    },
    "PlanObjectiveHistoWithPermValues" : {
      "type" : "object",
      "required" : [ "amountNatureE", "beginD", "currencyCode", "maxAmtIndexRuleE", "minAmtIndexRuleE", "periodFreqUnitE", "planDefinitionCode" ],
      "properties" : {
        "amountNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the amounts defined for the plan objective.",
          "enum" : [ "Invested Amount", "Market Value" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan objective."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan objective."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Identifies the currency of the amounts of the plan objective."
        },
        "expectedAmountM" : {
          "type" : "number",
          "description" : "Provides the expected amount the user wants to achieve at the end of the plan. This amount is used only for information and is never used by the Event Generation function to compute the amount to invest."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxAmountM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Amount Objective\", the maximum amount is not necessary."
        },
        "maxAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the maximum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "maxAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the maximum amount."
        },
        "minAmountM" : {
          "type" : "number",
          "description" : "Provides the minimum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Invest Amount\", the minimum amount is mandatory and must be defined  either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Free Amount\", the maximum amount is not necessary."
        },
        "minAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the minimum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "minAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the minimum amount."
        },
        "objectiveD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of the plan objective."
        },
        "periodFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal."
        },
        "periodFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal.\r\n\r\nFor plan with objective nature set to \"Period Amount\", the period frequency is mandatory and must be defined either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Invest Amount\" or \"Free Amount\", the period frequency is not necessary.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan objective."
        }
      }
    },
    "PlanSession" : {
      "type" : "object",
      "required" : [ "planDefinitionCode", "portfolioCode" ],
      "properties" : {
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Indicates the plan to use in conjunction with the Generation Nature \"Create Session & Check\" (event_gen_nat_e = 10 - Create Session & Check).\r\n\r\nThis allows launching an event generation function in a simulation mode with a working Mutual Fund Systematic plan definition set as parameter. The goal is to simulate the generation of the first order cycle of a specific plan, and only for this plan.\r\n\r\nThe result of the event generation simulation mode, meaning a set of buy orders, are included in a session on which a PTCC is run, with potential cases raised.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about plan simulation.\r\n\r\nNote that the plan definition field is not displayed in the default domain GUI screen; the reason being that it is currently only used in the WealthSuite Channels for Mutual Fund Systematic Plan module."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        }
      }
    },
    "PlanSessionWithPermValues" : {
      "type" : "object",
      "required" : [ "planDefinitionCode", "portfolioCode" ],
      "properties" : {
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Indicates the plan to use in conjunction with the Generation Nature \"Create Session & Check\" (event_gen_nat_e = 10 - Create Session & Check).\r\n\r\nThis allows launching an event generation function in a simulation mode with a working Mutual Fund Systematic plan definition set as parameter. The goal is to simulate the generation of the first order cycle of a specific plan, and only for this plan.\r\n\r\nThe result of the event generation simulation mode, meaning a set of buy orders, are included in a session on which a PTCC is run, with potential cases raised.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about plan simulation.\r\n\r\nNote that the plan definition field is not displayed in the default domain GUI screen; the reason being that it is currently only used in the WealthSuite Channels for Mutual Fund Systematic Plan module."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        }
      }
    },
    "StandingInstruction" : {
      "type" : "object",
      "required" : [ "beginD", "code", "dayFriF", "dayMonF", "daySatF", "daySunF", "dayThuF", "dayTueF", "dayWedF", "executionUnitE", "executionUnitRankE", "freqUnitE", "frequencyChoiceE", "instrCode", "name", "opAmountCurrencyCode", "opNatE", "orderFeeCurrCode", "orderFeeE", "paymentOptionE", "planDefinitionCode", "portfolioCode", "statusE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of a standing instruction. This date is part of the standing instruction primary key.\r\n\r\nThis information is combined with the 'end date' to define the validity period of the standing instruction. It also defines the date of the future generated orders:\r\n- The first generated order will be on exactly this date.\r\n- The date of the following orders will be calculated from this date.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "code" : {
          "type" : "string",
          "description" : "Provides the unique business identifier of the Standing Instruction and is displayed to the end user. This field is mandatory."
        },
        "commentC" : {
          "type" : "string",
          "description" : "Optional text field that can store user comments."
        },
        "dayFriF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Friday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayMonF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Monday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySatF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Saturday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySunF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Sunday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayThuF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Thursday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayTueF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Tuesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayWedF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Wednesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the standing instruction; the denomination might not necessarily be unique. This field is optional."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of a standing instruction. This parameter is optional.\r\n\r\nThis information is combined with the 'begin date' to define the validity period of the standing instruction. No end date provided means no end to the standing instruction."
        },
        "executionDayN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the day of the month when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Specific Day\"."
        },
        "executionMonthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the month when the order is generated.\r\n\r\nOnly used with frequency unit \"Year\"."
        },
        "executionUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit of execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "executionUnitRankE" : {
          "type" : "string",
          "description" : "Specifies the rank of unit execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "freqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the frequency with which the order is generated and defines the number of standing instruction frequency units (see attribute freq_unit_e ) between two occurrences.\r\nThis is a mandatory field.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "freqUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit that defines the frequency with which the order is generated. This field is mandatory.\r\n\r\nOnly the following frequencies are supported:\r\n- Day\r\n- Month\r\n- Year",
          "enum" : [ "<None>", "Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "frequencyChoiceE" : {
          "type" : "string",
          "description" : "Defines the frequency choice.\r\n\r\nThis choice depends on the frequency unit:\r\n\r\nFor unit \"Days\"\r\n- 1 = every days\r\n- 2 = every weekday\r\n\r\nFor unit \"Month\"\r\n- 1 = specific day\r\n- 2 = calculated day\r\n\r\nFor unit \"Year\"\r\n- 1 = specific day\r\n- 2 = calculated day",
          "enum" : [ "None" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "instrDenom" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "lastEventGenerateD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the last order generation of the occurrence by the Event Generation function."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "minInvestAmtM" : {
          "type" : "number",
          "description" : "The minimum amount to be invested for the current instruction in the context of a financial planning.\r\n\r\nIf the calculated amount to invest is greater than or equal to this minimum amount to invest, the system creates an operation using the calculated amount to invest."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the standing instruction; the name might not necessarily be unique. This field is optional."
        },
        "opAmountCurrencyCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the amount of this occurrence.\r\n\r\nIMPORTANT: this currency will also be the Operation Currency of the generated order.\r\n\r\nThis field is mandatory."
        },
        "opAmountM" : {
          "type" : "number",
          "description" : "Indicates the maximum amount of the generated orders. This field is mandatory."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Reference to the nature of operation that will be present in the generated order. This field is mandatory.",
          "enum" : [ "<None>", "Buy", "Sell", "Invest", "Withdrawal" ]
        },
        "orderFeeAmtM" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis amount must be used in conjunction with the fee amount currency (order_fee_curr_id).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeCurrCode" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the currency of the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis currency must be used in conjunction with the fee amount (order_fee_amt_m).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee set-up.\r\n\r\nThe set-up can be either 0 (Not negotiated), 1 (Negotiated in amount) or 2 (Negotiated in percent).\r\n\r\nWhen the set-up is 1 (Negotiated in amount), then the fields order fee amount (order_fee_amt_m) and currency (order_fee_curr_id) must be defined.\r\n\r\nWhen the set-up is 2 (Negotiated in percent), then the field order fee percent(order_fee_p) must be defined.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee percent when the fee set-up (order_fee_e) is defined as 2 (In Percent).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition linked to the standing instruction."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio of the standing instruction."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the standing instruction and distinguishes between the various stages of the processing of a standing instruction. This field is mandatory.\r\n\r\nBusiness functions take into account only standing instructions from a special stage.\r\nThis stage is defined by system parameter STANDING_INSTRUCTION_STAT_EXEC.",
          "enum" : [ "Cancelled", "Valid For Execution" ]
        },
        "weightP" : {
          "type" : "number",
          "description" : "Provides the weight of the standing instruction."
        }
      }
    },
    "StandingInstructionWithPermValues" : {
      "type" : "object",
      "required" : [ "beginD", "code", "dayFriF", "dayMonF", "daySatF", "daySunF", "dayThuF", "dayTueF", "dayWedF", "executionUnitE", "executionUnitRankE", "freqUnitE", "frequencyChoiceE", "instrCode", "name", "opAmountCurrencyCode", "opNatE", "orderFeeCurrCode", "orderFeeE", "paymentOptionE", "planDefinitionCode", "portfolioCode", "statusE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of a standing instruction. This date is part of the standing instruction primary key.\r\n\r\nThis information is combined with the 'end date' to define the validity period of the standing instruction. It also defines the date of the future generated orders:\r\n- The first generated order will be on exactly this date.\r\n- The date of the following orders will be calculated from this date.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "code" : {
          "type" : "string",
          "description" : "Provides the unique business identifier of the Standing Instruction and is displayed to the end user. This field is mandatory."
        },
        "commentC" : {
          "type" : "string",
          "description" : "Optional text field that can store user comments."
        },
        "dayFriF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Friday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayMonF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Monday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySatF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Saturday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySunF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Sunday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayThuF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Thursday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayTueF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Tuesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayWedF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Wednesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the standing instruction; the denomination might not necessarily be unique. This field is optional."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of a standing instruction. This parameter is optional.\r\n\r\nThis information is combined with the 'begin date' to define the validity period of the standing instruction. No end date provided means no end to the standing instruction."
        },
        "executionDayN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the day of the month when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Specific Day\"."
        },
        "executionMonthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the month when the order is generated.\r\n\r\nOnly used with frequency unit \"Year\"."
        },
        "executionUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit of execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "executionUnitRankE" : {
          "type" : "string",
          "description" : "Specifies the rank of unit execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "freqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the frequency with which the order is generated and defines the number of standing instruction frequency units (see attribute freq_unit_e ) between two occurrences.\r\nThis is a mandatory field.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "freqUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit that defines the frequency with which the order is generated. This field is mandatory.\r\n\r\nOnly the following frequencies are supported:\r\n- Day\r\n- Month\r\n- Year",
          "enum" : [ "<None>", "Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "frequencyChoiceE" : {
          "type" : "string",
          "description" : "Defines the frequency choice.\r\n\r\nThis choice depends on the frequency unit:\r\n\r\nFor unit \"Days\"\r\n- 1 = every days\r\n- 2 = every weekday\r\n\r\nFor unit \"Month\"\r\n- 1 = specific day\r\n- 2 = calculated day\r\n\r\nFor unit \"Year\"\r\n- 1 = specific day\r\n- 2 = calculated day",
          "enum" : [ "None" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "instrDenom" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "lastEventGenerateD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the last order generation of the occurrence by the Event Generation function."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "minInvestAmtM" : {
          "type" : "number",
          "description" : "The minimum amount to be invested for the current instruction in the context of a financial planning.\r\n\r\nIf the calculated amount to invest is greater than or equal to this minimum amount to invest, the system creates an operation using the calculated amount to invest."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the standing instruction; the name might not necessarily be unique. This field is optional."
        },
        "opAmountCurrencyCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the amount of this occurrence.\r\n\r\nIMPORTANT: this currency will also be the Operation Currency of the generated order.\r\n\r\nThis field is mandatory."
        },
        "opAmountM" : {
          "type" : "number",
          "description" : "Indicates the maximum amount of the generated orders. This field is mandatory."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Reference to the nature of operation that will be present in the generated order. This field is mandatory.",
          "enum" : [ "<None>", "Buy", "Sell", "Invest", "Withdrawal" ]
        },
        "orderFeeAmtM" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis amount must be used in conjunction with the fee amount currency (order_fee_curr_id).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeCurrCode" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the currency of the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis currency must be used in conjunction with the fee amount (order_fee_amt_m).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee set-up.\r\n\r\nThe set-up can be either 0 (Not negotiated), 1 (Negotiated in amount) or 2 (Negotiated in percent).\r\n\r\nWhen the set-up is 1 (Negotiated in amount), then the fields order fee amount (order_fee_amt_m) and currency (order_fee_curr_id) must be defined.\r\n\r\nWhen the set-up is 2 (Negotiated in percent), then the field order fee percent(order_fee_p) must be defined.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee percent when the fee set-up (order_fee_e) is defined as 2 (In Percent).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition linked to the standing instruction."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio of the standing instruction."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the standing instruction and distinguishes between the various stages of the processing of a standing instruction. This field is mandatory.\r\n\r\nBusiness functions take into account only standing instructions from a special stage.\r\nThis stage is defined by system parameter STANDING_INSTRUCTION_STAT_EXEC.",
          "enum" : [ "Cancelled", "Valid For Execution" ]
        },
        "weightP" : {
          "type" : "number",
          "description" : "Provides the weight of the standing instruction."
        }
      }
    },
    "ValuationSearchAggregations" : {
      "type" : "object",
      "required" : [ "portfolioCode" ],
      "properties" : {
        "assetClassCode" : {
          "type" : "string",
          "description" : "Aggregates all positions of instruments belonging to the asset class according to the instrument classification defined in the system parameter DS_CLASSIF_ASSET_CLASS."
        },
        "assetclassCostSys" : {
          "type" : "number",
          "description" : "Indicates the asset class cost amount in system currency."
        },
        "assetclassKey" : {
          "type" : "string",
          "description" : "Indicates the break criteria per portfolio/asset class."
        },
        "assetclassMvPtf" : {
          "type" : "number",
          "description" : "Indicates the market value of the asset class in the system currency."
        },
        "assetclassMvSys" : {
          "type" : "number",
          "description" : "Indicates the market value of the asset class in the system currency."
        },
        "assetclassPlPer" : {
          "type" : "number",
          "description" : "Indicates the PL in percentage of the asset class."
        },
        "assetclassPlPtf" : {
          "type" : "number",
          "description" : "Indicates the PL of the asset class in the portfolio currency."
        },
        "assetclassPlSys" : {
          "type" : "number",
          "description" : "Indicates the PL of the asset class in the system currency."
        },
        "assetclassWeight" : {
          "type" : "number",
          "description" : "Indicates the weight of the asset class relative to the portfolio market value."
        },
        "ccyClassCode" : {
          "type" : "string",
          "description" : "Aggregates all positions of instruments belonging to the currency class according to the currency classification defined in system parameter DS_CLASSIF_CURRENCY."
        },
        "ccyclassCostSys" : {
          "type" : "number",
          "description" : "Indicates the currency class cost amount in the system currency."
        },
        "ccyclassKey" : {
          "type" : "string",
          "description" : "Indicates the break criteria per portfolio/currency class."
        },
        "ccyclassMvPtf" : {
          "type" : "number",
          "description" : "Indicates the market value of the currency in the portfolio currency."
        },
        "ccyclassMvSys" : {
          "type" : "number",
          "description" : "Indicates the market value of the currency in the system currency."
        },
        "ccyclassPlPer" : {
          "type" : "number",
          "description" : "Indicates the PL in percentage of the currency."
        },
        "ccyclassPlPtf" : {
          "type" : "number",
          "description" : "Indicates the PL of the currency class PL in the portfolio currency."
        },
        "ccyclassPlSys" : {
          "type" : "number",
          "description" : "Indicates the PL of the currency in the system currency."
        },
        "ccyclassWeight" : {
          "type" : "number",
          "description" : "Indicates the weight of the currency relative to the portfolio market value."
        },
        "costAmountSys" : {
          "type" : "number",
          "description" : "Indicates the cost amount in the system currency."
        },
        "exchRateRefPtf" : {
          "type" : "number",
          "description" : "Indicates the exchange rate between Reference and Portfolio currency."
        },
        "exchRateRefSys" : {
          "type" : "number",
          "description" : "Exchange rate between Reference and System currency."
        },
        "exchRateSysPtf" : {
          "type" : "number",
          "description" : "Exchange rate between System and Portfolio currency."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Code of the instrument."
        },
        "mvRef" : {
          "type" : "number",
          "description" : "Market value in reference currency."
        },
        "mvSys" : {
          "type" : "number",
          "description" : "Market value in system currency."
        },
        "oneAssetClass" : {
          "type" : "boolean",
          "description" : "Break criteria per asset class."
        },
        "oneCcyClass" : {
          "type" : "boolean",
          "description" : "Breack criteria per currency class."
        },
        "oneRatingClass" : {
          "type" : "boolean",
          "description" : "Break criteria per rating class."
        },
        "oneSectorClass" : {
          "type" : "boolean",
          "description" : "Break criteria per sector class."
        },
        "plRef" : {
          "type" : "number",
          "description" : "PL in reference currency."
        },
        "plSys" : {
          "type" : "number",
          "description" : "PL in system currency."
        },
        "portfolioCcyCode" : {
          "type" : "string",
          "description" : "Reference to the currency of the portfolio."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related."
        },
        "ratingClassCode" : {
          "type" : "string",
          "description" : "Aggregates all positions of instruments belonging to the rating class according to both the instrument classification defined in the system parameter DS_CLASSIF_RATING and the list of instrument defined in system parameter DS_VALO_FILTER_RATING."
        },
        "ratingFilter" : {
          "type" : "boolean",
          "description" : "Filter about rating."
        },
        "ratingclassCostSys" : {
          "type" : "number",
          "description" : "Rating class cost amount in system currency."
        },
        "ratingclassKey" : {
          "type" : "string",
          "description" : "Break criteria per portfolio/rating class."
        },
        "ratingclassMvPtf" : {
          "type" : "number",
          "description" : "Market value of the rating in the portfolio currency."
        },
        "ratingclassMvSys" : {
          "type" : "number",
          "description" : "Market value of the rating in the system currency."
        },
        "ratingclassPlPer" : {
          "type" : "number",
          "description" : "PL in percentage of the rating."
        },
        "ratingclassPlPtf" : {
          "type" : "number",
          "description" : "Rating class PL in portfolio currency."
        },
        "ratingclassPlSys" : {
          "type" : "number",
          "description" : "PL of the rating in the system currency."
        },
        "ratingclassWeight" : {
          "type" : "number",
          "description" : "Weight of the rating relative to the portfolio market value."
        },
        "refCcyCode" : {
          "type" : "string",
          "description" : "Reference currency."
        },
        "sectorClassCode" : {
          "type" : "string",
          "description" : "Aggregates all positions of instruments belonging to both the rating class according to the instrument classification defined in the system parameter DS_CLASSIF_SECTOR and the list of instrument defined in the system parameter DS_VALO_FILTER_SECTOR."
        },
        "sectorFilter" : {
          "type" : "boolean",
          "description" : "Filter about sector."
        },
        "sectorclassCostSys" : {
          "type" : "number",
          "description" : "Sector class cost amount in system currency."
        },
        "sectorclassKey" : {
          "type" : "string",
          "description" : "Break criteria per portfolio/sector class."
        },
        "sectorclassMvPtf" : {
          "type" : "number",
          "description" : "Market value of the sector in the portfolio currency."
        },
        "sectorclassMvSys" : {
          "type" : "number",
          "description" : "Market value of the sector in the system currency."
        },
        "sectorclassPlPer" : {
          "type" : "number",
          "description" : "PL in percentage of the sector."
        },
        "sectorclassPlPtf" : {
          "type" : "number",
          "description" : "Sector class PL in portfolio currency."
        },
        "sectorclassPlSys" : {
          "type" : "number",
          "description" : "PL of the sector in the system currency."
        },
        "sectorclassWeight" : {
          "type" : "number",
          "description" : "Weight of the sector relative to the portfolio market value."
        },
        "seqno" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Technical sequence number."
        },
        "serverFilter" : {
          "type" : "boolean",
          "description" : "Filter of record loaded."
        },
        "systemCcyCode" : {
          "type" : "string",
          "description" : "System currency."
        }
      }
    },
    "ValuationSearchDetails" : {
      "type" : "object",
      "required" : [ "portfolioCode" ],
      "properties" : {
        "assetclassCode" : {
          "type" : "string",
          "description" : "Indicates the asset class of the instrument in the position. It is defined according to the instrument classification set in the system parameter DS_CLASSIF_ASSET_CLASS."
        },
        "delta" : {
          "type" : "number",
          "description" : "Indicates the delta of the instrument in the position; applicable to options."
        },
        "depositCode" : {
          "type" : "string",
          "description" : "Indicates the deposit set in the position."
        },
        "duration" : {
          "type" : "number",
          "description" : "Indicates the duration of the instrument in the position."
        },
        "durationFilter" : {
          "type" : "boolean",
          "description" : "Indicates the duration filter for record loaded."
        },
        "exchRate" : {
          "type" : "number",
          "description" : "Indicates the exchange rate."
        },
        "exchRateCurr" : {
          "type" : "string",
          "description" : "Displays the exchange rate currency and underlying currency between the quotation currency of the instrument held in the Portfolio and the reference currency at the selected reference date."
        },
        "exchRateRefPtf" : {
          "type" : "number",
          "description" : "Indicates the exchange rate between Reference and Portfolio currency."
        },
        "exchRateRefSys" : {
          "type" : "number",
          "description" : "Indicates the exchange rate between Reference and System currency."
        },
        "expiration" : {
          "type" : "string",
          "format" : "date",
          "description" : "Indicates the expiration of the instrument in the position; applicable to instruments that have an expiration date."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Indicates the instrument of the position."
        },
        "instrRefCurrency" : {
          "type" : "string",
          "description" : "Indicates the currency of the instrument in the position."
        },
        "instrTypeCode" : {
          "type" : "string",
          "description" : "Indicates the type of instrument in the position."
        },
        "instrumentNature" : {
          "type" : "string",
          "description" : "Indicates the nature of the instrument in the position.",
          "enum" : [ "Stock", "Fixed Income", "Option", "Cash Account", "Money Market", "Future", "Forward", "Index", "Rate", "Swap", "Discount Instrument", "Commodity", "Fund Share", "Yield Curve", "Deliverable", "Debt", "Other", "Option Bond", "Convertible Bond", "Forward Rate Agreement", "Forex Swap", "Exotic Option", "Swaption", "Mortgage-Backed Security", "Flow Instrument", "Notional Instrument" ]
        },
        "isin" : {
          "type" : "string",
          "description" : "Indicates the ISIN of the instrument."
        },
        "maturityFilter" : {
          "type" : "boolean",
          "description" : "Indicates the maturity filter for record loaded."
        },
        "mktVal" : {
          "type" : "number",
          "description" : "Indicates the market value of the position in the reference currency."
        },
        "mktValPtf" : {
          "type" : "number",
          "description" : "Indicates the market value of the position in the portfolio currency."
        },
        "mktValSys" : {
          "type" : "number",
          "description" : "Indicates the market value of the position in the system currency."
        },
        "modifiedDuration" : {
          "type" : "number",
          "description" : "Indicates the modified duration of the instrument in the position."
        },
        "netCostVal" : {
          "type" : "number",
          "description" : "Indicates the net cost value of the position in the reference currency."
        },
        "netCostValPtf" : {
          "type" : "number",
          "description" : "Indicates the net cost value of the position in the portfolio currency."
        },
        "netCostValSys" : {
          "type" : "number",
          "description" : "Indicates the net cost value of the position in the system currency."
        },
        "percTotMktVal" : {
          "type" : "number",
          "description" : "Indicates the percentage relative to the total market value."
        },
        "pl" : {
          "type" : "number",
          "description" : "Indicates the PL of the position in the reference currency."
        },
        "plPrec" : {
          "type" : "number",
          "description" : "Indicates the PL of the position in percentage."
        },
        "plPtfCur" : {
          "type" : "number",
          "description" : "Indicates the PL of the position in the portfolio currency."
        },
        "plSysCur" : {
          "type" : "number",
          "description" : "Indicates the PL of the position in the system currency."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Portfolio to which the request is related."
        },
        "posCurrency" : {
          "type" : "string",
          "description" : "Indicates the currency of the position."
        },
        "quantity" : {
          "type" : "number",
          "description" : "Indicates the quantity of the position."
        },
        "ratingCode" : {
          "type" : "string",
          "description" : "Indicates the rating class of the instrument in the position. It is defined according to the instrument classification set in the system parameter DS_CLASSIF_RATING."
        },
        "sectorCode" : {
          "type" : "string",
          "description" : "Indicates the sector class of the instrument in the position. It is defined similar according to the instrument classification set in the system parameter DS_CLASSIF_SECTOR."
        },
        "seqno" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Indicates the technical sequence number."
        },
        "underlyingCode" : {
          "type" : "string",
          "description" : "Indicates the underlying of the instrument in the position."
        },
        "ytm" : {
          "type" : "number",
          "description" : "Indicates the yield to maturity of the instrument in the position."
        }
      }
    },
    "createFreeDepositHistoInput" : {
      "type" : "object",
      "required" : [ "amountM", "code", "currencyCode", "investmentD", "natureE", "planDefinitionCode", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE" ],
      "properties" : {
        "amountM" : {
          "type" : "number",
          "description" : "Amount of the free deposit."
        },
        "code" : {
          "type" : "string",
          "description" : "Code of the Free Deposit History."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Currency of the deposit."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the deposit."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the deposit.",
          "enum" : [ "None", "Initial deposit", "Free deposit" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Definition of plan related to the deposit."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Cash account that is debited for the deposit."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Portfolio of the cash account that is debited for the deposit."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        }
      }
    },
    "createFreeDepositHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/FreeDepositHistoWithPermValues"
        }
      }
    },
    "createPlanDefinitionInput" : {
      "type" : "object",
      "required" : [ "code", "dataSecuProfId", "name", "natureE", "objectiveNatureE", "portfolioCode", "statusE", "thirdPartyCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Code of the Plan Definition."
        },
        "dataSecuProfId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Provides a reference to the security profile to which the occurrence belongs. This mandatory reference controls user access to the occurrence."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the Plan Definition."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the Plan Definition."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Provides the nature of the Plan Definition.",
          "enum" : [ "None", "Investment Plan", "Savings Plan", "Retirement Plan", "Education Plan", "Life Insurance Plan", "Systematic Investment Plan" ]
        },
        "objectiveNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the objective of the plan.",
          "enum" : [ "Free Amount", "Invest Amount", "Period Amount", "Objective Amount" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio that is linked to the Plan Definition. A portfolio can have only one valid plan at a time."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the Plan Definition.",
          "enum" : [ "Cancelled", "In Progress", "To validate", "Validated", "Rejected", "Suspended", "Deactivated", "Closed" ]
        },
        "thirdPartyCode" : {
          "type" : "string",
          "description" : "Identifies the client for which the financial plan is created."
        },
        "validationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of validation for the Plan Definition."
        }
      }
    },
    "createPlanDefinitionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanDefinitionWithPermValues"
        }
      }
    },
    "createPlanInvestDateInput" : {
      "type" : "object",
      "required" : [ "investmentD", "planInvestParamHistoId", "statusE" ],
      "properties" : {
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the record."
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Indicates the reference of the standing instruction related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event code set as the standing instruction used to generate the orders.\r\n\r\nNote that should the Mutual Fund Systematic plan have more than one standing instruction, the first one is used to set the event code."
        },
        "eventNumberN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Indicates the date related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event number set as investment plan date, with the format YYYYMMDD, for example 20190201 a for a plan investment date on February 1st 2019."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the investment."
        },
        "planInvestParamHistoId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Identifies the Plan Investment Parameter History related to the plan investment date."
        },
        "retryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the retry number related to a plan investment.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed. \r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the investment.",
          "enum" : [ "Untreated", "Treated", "Cancelled", "Success", "Failed", "Retry candidate", "Retry treated", "Retry cancelled", "Retry success", "Retry failed" ]
        }
      }
    },
    "createPlanInvestDateSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanInvestDateWithPermValues"
        }
      }
    },
    "createPlanInvestParamHistoInput" : {
      "type" : "object",
      "required" : [ "beginD", "endOfMonthConvE", "genCashOpF", "investAcctCode", "investFreqUnitE", "investmentDayE", "planDefinitionCode", "retryFrequencyUnitE", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE", "updAmtToObjectiveE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan investment parameter."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the recurrent deposit must be transferred from. This attribute is not a link to the instrument entity in order to support accounts not present in FOPM but available in the back-office."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan investment parameter."
        },
        "endOfMonthConvE" : {
          "type" : "string",
          "description" : "Provides the ability to manage the real last day of the month (i.e., 30th or 31st depending on the month).",
          "enum" : [ "<None>", "Last", "Same", "Last 360" ]
        },
        "firstInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the first investment date defined for the financial plan."
        },
        "genCashOpF" : {
          "type" : "boolean",
          "description" : "Manages the ability to specify whether the cash transfer operation from the debited account has to be created."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investAcctCode" : {
          "type" : "string",
          "description" : "Identifies the account where the cash is reserved and the one where the security investment will be settled."
        },
        "investFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment."
        },
        "investFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "investmentDayE" : {
          "type" : "string",
          "description" : "Provides the day in a month on which the investment is done.",
          "enum" : [ "None", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" ]
        },
        "lastInvestmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the last investment date defined for the financial plan. This date is set by default value and used only for information purposes, no processes are linked to this date."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxInvestAmtM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to invest. It manages the ability to cap the amount to invest mainly when, for instance, there are missing payments or the objective amount has been updated."
        },
        "maxRetryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the maximum number of order retries before an order cycle is skipped.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "nextInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the next investment date calculated for the financial plan."
        },
        "orderCyclesN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the number of cycles required for the plan. This number is then used to calculate, by default value, the plan end date.\r\n\r\nLetâ€™s take the following example: a Mutual Fund Systematic Plan starts on February 14th 2018, with a monthly frequency, investing every 20th of each month.\r\n\r\nThe first investment date will be defaulted as February 20th 2018.\r\n\r\nShould the user enters the number of cycles as 12 (meaning investing for 12 months), the end date will be defaulted as January 20th 2019.\r\n\r\nThe 12 investment dates would be:\r\n1 - 20.02.2018\r\n2 - 20.03.2018\r\n3 - 20.04.2018\r\n4 - 20.05.2018\r\n5 - 20.06.2018\r\n6 - 20.07.2018\r\n7 - 20.08.2018\r\n8 - 20.09.2018\r\n9 - 20.10.2018\r\n10 - 20.11.2018\r\n11 - 20.12.2018\r\n12 - 20.01.2019"
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan investment parameter."
        },
        "retryFrequencyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency number for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency number must be used in conjunction with the retry frequency unit (retry_frequency_unit_e).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "retryFrequencyUnitE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency unit for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency unit must be used in conjunction with the retry frequency number (retry_frequency_n).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "standingOrderExternalRef" : {
          "type" : "string",
          "description" : "Provides the external reference to the standing order.\r\nThis attribute is used to track the standing order saved in the external tool that manages all the cash transfers."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Identifies the cash account that is debited for the investment."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio of the cash account that is debited for the investment."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Provides the amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        },
        "updAmtToObjectiveE" : {
          "type" : "string",
          "description" : "Provides the amount of the investment that can be updated to reach the minimum or the maximum amount defined at the plan objective level or the plan rule level.\r\n\r\nFor plan with objective nature set to \"Free Amount\", \"Period Amount\", or \"Objective Amount\", Update Amount to Objective should be set to No.\r\n\r\nFor plan with objective nature set to  \"Invest Amount\",  Update Amount to Objective should be set to No or Reach min.",
          "enum" : [ "No", "Reach Min Amount", "Reach Max Amount" ]
        }
      }
    },
    "createPlanInvestParamHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanInvestParamHistoWithPermValues"
        }
      }
    },
    "createPlanObjectiveHistoInput" : {
      "type" : "object",
      "required" : [ "amountNatureE", "beginD", "currencyCode", "maxAmtIndexRuleE", "minAmtIndexRuleE", "periodFreqUnitE", "planDefinitionCode" ],
      "properties" : {
        "amountNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the amounts defined for the plan objective.",
          "enum" : [ "Invested Amount", "Market Value" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan objective."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan objective."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Identifies the currency of the amounts of the plan objective."
        },
        "expectedAmountM" : {
          "type" : "number",
          "description" : "Provides the expected amount the user wants to achieve at the end of the plan. This amount is used only for information and is never used by the Event Generation function to compute the amount to invest."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxAmountM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Amount Objective\", the maximum amount is not necessary."
        },
        "maxAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the maximum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "maxAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the maximum amount."
        },
        "minAmountM" : {
          "type" : "number",
          "description" : "Provides the minimum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Invest Amount\", the minimum amount is mandatory and must be defined  either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Free Amount\", the maximum amount is not necessary."
        },
        "minAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the minimum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "minAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the minimum amount."
        },
        "objectiveD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of the plan objective."
        },
        "periodFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal."
        },
        "periodFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal.\r\n\r\nFor plan with objective nature set to \"Period Amount\", the period frequency is mandatory and must be defined either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Invest Amount\" or \"Free Amount\", the period frequency is not necessary.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan objective."
        }
      }
    },
    "createPlanObjectiveHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanObjectiveHistoWithPermValues"
        }
      }
    },
    "createPlanSessionInput" : {
      "type" : "object",
      "required" : [ "planDefinitionCode", "portfolioCode" ],
      "properties" : {
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "funcResultCode" : {
          "type" : "string",
          "description" : "Optional parameter that lets you specify the reference code of a result set when you want to store/use computed data."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Indicates the plan to use in conjunction with the Generation Nature \"Create Session & Check\" (event_gen_nat_e = 10 - Create Session & Check).\r\n\r\nThis allows launching an event generation function in a simulation mode with a working Mutual Fund Systematic plan definition set as parameter. The goal is to simulate the generation of the first order cycle of a specific plan, and only for this plan.\r\n\r\nThe result of the event generation simulation mode, meaning a set of buy orders, are included in a session on which a PTCC is run, with potential cases raised.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about plan simulation.\r\n\r\nNote that the plan definition field is not displayed in the default domain GUI screen; the reason being that it is currently only used in the WealthSuite Channels for Mutual Fund Systematic Plan module."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        }
      }
    },
    "createPlanSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanSessionWithPermValues"
        }
      }
    },
    "createStandingInstructionInput" : {
      "type" : "object",
      "required" : [ "beginD", "code", "dayFriF", "dayMonF", "daySatF", "daySunF", "dayThuF", "dayTueF", "dayWedF", "executionUnitE", "executionUnitRankE", "freqUnitE", "frequencyChoiceE", "instrCode", "name", "opAmountCurrencyCode", "opNatE", "orderFeeCurrCode", "orderFeeE", "paymentOptionE", "planDefinitionCode", "portfolioCode", "statusE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of a standing instruction. This date is part of the standing instruction primary key.\r\n\r\nThis information is combined with the 'end date' to define the validity period of the standing instruction. It also defines the date of the future generated orders:\r\n- The first generated order will be on exactly this date.\r\n- The date of the following orders will be calculated from this date.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "code" : {
          "type" : "string",
          "description" : "Provides the unique business identifier of the Standing Instruction and is displayed to the end user. This field is mandatory."
        },
        "commentC" : {
          "type" : "string",
          "description" : "Optional text field that can store user comments."
        },
        "dayFriF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Friday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayMonF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Monday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySatF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Saturday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySunF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Sunday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayThuF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Thursday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayTueF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Tuesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayWedF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Wednesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the standing instruction; the denomination might not necessarily be unique. This field is optional."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of a standing instruction. This parameter is optional.\r\n\r\nThis information is combined with the 'begin date' to define the validity period of the standing instruction. No end date provided means no end to the standing instruction."
        },
        "executionDayN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the day of the month when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Specific Day\"."
        },
        "executionMonthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the month when the order is generated.\r\n\r\nOnly used with frequency unit \"Year\"."
        },
        "executionUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit of execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "executionUnitRankE" : {
          "type" : "string",
          "description" : "Specifies the rank of unit execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "freqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the frequency with which the order is generated and defines the number of standing instruction frequency units (see attribute freq_unit_e ) between two occurrences.\r\nThis is a mandatory field.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "freqUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit that defines the frequency with which the order is generated. This field is mandatory.\r\n\r\nOnly the following frequencies are supported:\r\n- Day\r\n- Month\r\n- Year",
          "enum" : [ "<None>", "Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "frequencyChoiceE" : {
          "type" : "string",
          "description" : "Defines the frequency choice.\r\n\r\nThis choice depends on the frequency unit:\r\n\r\nFor unit \"Days\"\r\n- 1 = every days\r\n- 2 = every weekday\r\n\r\nFor unit \"Month\"\r\n- 1 = specific day\r\n- 2 = calculated day\r\n\r\nFor unit \"Year\"\r\n- 1 = specific day\r\n- 2 = calculated day",
          "enum" : [ "None" ]
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "instrDenom" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "lastEventGenerateD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the last order generation of the occurrence by the Event Generation function."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "minInvestAmtM" : {
          "type" : "number",
          "description" : "The minimum amount to be invested for the current instruction in the context of a financial planning.\r\n\r\nIf the calculated amount to invest is greater than or equal to this minimum amount to invest, the system creates an operation using the calculated amount to invest."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the standing instruction; the name might not necessarily be unique. This field is optional."
        },
        "opAmountCurrencyCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the amount of this occurrence.\r\n\r\nIMPORTANT: this currency will also be the Operation Currency of the generated order.\r\n\r\nThis field is mandatory."
        },
        "opAmountM" : {
          "type" : "number",
          "description" : "Indicates the maximum amount of the generated orders. This field is mandatory."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Reference to the nature of operation that will be present in the generated order. This field is mandatory.",
          "enum" : [ "<None>", "Buy", "Sell", "Invest", "Withdrawal" ]
        },
        "orderFeeAmtM" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis amount must be used in conjunction with the fee amount currency (order_fee_curr_id).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeCurrCode" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the currency of the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis currency must be used in conjunction with the fee amount (order_fee_amt_m).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee set-up.\r\n\r\nThe set-up can be either 0 (Not negotiated), 1 (Negotiated in amount) or 2 (Negotiated in percent).\r\n\r\nWhen the set-up is 1 (Negotiated in amount), then the fields order fee amount (order_fee_amt_m) and currency (order_fee_curr_id) must be defined.\r\n\r\nWhen the set-up is 2 (Negotiated in percent), then the field order fee percent(order_fee_p) must be defined.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee percent when the fee set-up (order_fee_e) is defined as 2 (In Percent).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition linked to the standing instruction."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio of the standing instruction."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the standing instruction and distinguishes between the various stages of the processing of a standing instruction. This field is mandatory.\r\n\r\nBusiness functions take into account only standing instructions from a special stage.\r\nThis stage is defined by system parameter STANDING_INSTRUCTION_STAT_EXEC.",
          "enum" : [ "Cancelled", "Valid For Execution" ]
        },
        "weightP" : {
          "type" : "number",
          "description" : "Provides the weight of the standing instruction."
        }
      }
    },
    "createStandingInstructionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/StandingInstructionWithPermValues"
        }
      }
    },
    "getAccountOperationsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Cash Movements Details",
          "items" : {
            "type" : "object",
            "properties" : {
              "POS_CURRENCY" : {
                "type" : "string",
                "description" : "Position currency"
              },
              "QUANTITY" : {
                "type" : "number",
                "description" : "Quantity"
              },
              "CASHVIEW_FILTER" : {
                "type" : "boolean",
                "description" : "CASHVIEW_FILTER (to extract only operation related to cash movements)"
              },
              "TRANSVIEW_FILTER" : {
                "type" : "boolean",
                "description" : "TRANSVIEW_FILTER (to extract only operations forseen as transactions)"
              },
              "ACCOUNT_BALANCE" : {
                "type" : "number",
                "description" : "Account Balance"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Client id for precomputed data"
              },
              "instr_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Instrument id"
              },
              "CASHVIEW_FILTER_INIT" : {
                "type" : "boolean",
                "description" : "CASHVIEW_FILTER INIT (to extract only initial balance related to cash movements)"
              },
              "SERVER_FILTER" : {
                "type" : "boolean",
                "description" : "SERVER_FILTER (to extract data which are going to be transmitted to UDP)"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Ptf Name"
              },
              "PRICE_CCY" : {
                "type" : "string",
                "description" : "Price Ccy"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Manager id for precomputed data"
              },
              "open_operation_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Open operation id for precomputed data"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Portfolio id for precomputed data"
              },
              "ACCOUNTING_DATE" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Accounting date"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Id (for calculation)"
              },
              "DEBIT_CREDIT" : {
                "type" : "number",
                "description" : "Debit/credit"
              },
              "INSTR_CODE" : {
                "type" : "string",
                "description" : "Code of instrument"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sequence number for technical purpose in WUI display"
              },
              "PRICE" : {
                "type" : "number",
                "description" : "Price"
              },
              "PORTFOLIO_CODE" : {
                "type" : "string",
                "description" : "Portfolio code"
              },
              "VALUE_DATE" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Value date"
              },
              "OPERATION_DATE" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Trade Date"
              },
              "REVERSAL_LABEL" : {
                "type" : "string",
                "description" : "Reversal"
              },
              "account_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Account id for precomputed data"
              },
              "OPERATION_CODE" : {
                "type" : "string",
                "description" : "Code of operation"
              },
              "OPERATION_NATURE" : {
                "type" : "string",
                "description" : "Operation nature name"
              },
              "ACCOUNT_CODE" : {
                "type" : "string",
                "description" : "Code of account"
              },
              "CONTRACT_SIZE" : {
                "type" : "number",
                "description" : "Contract Size"
              },
              "ACCOUNT_DENOM" : {
                "type" : "string",
                "description" : "Translated name of account"
              },
              "INSTR_DENOM" : {
                "type" : "string",
                "description" : "Instrument standardised name"
              },
              "POS_FILTER" : {
                "type" : "boolean",
                "description" : "POS_FILTER (to extract operations related to initial positions)"
              }
            }
          }
        }
      }
    },
    "getAllConsolidatedSummarySuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Consolidated Summary",
          "items" : {
            "type" : "object",
            "properties" : {
              "MVAssetClass" : {
                "type" : "number",
                "description" : "MVAssetClass"
              },
              "extBiMktValDrop" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiMktValDrop"
              },
              "ValuationCurrency" : {
                "type" : "string",
                "description" : "ValuationCurrency"
              },
              "WeightCcyClass" : {
                "type" : "number",
                "description" : "WeightCcyClass"
              },
              "custRoleE" : {
                "type" : "string",
                "description" : "custRoleE"
              },
              "thirdName" : {
                "type" : "string",
                "description" : "thirdName"
              },
              "AssetCode" : {
                "type" : "string",
                "description" : "Asset Denom"
              },
              "extTdMktValM" : {
                "type" : "number",
                "description" : "extTdMktValM"
              },
              "WeightAssetCurrency" : {
                "type" : "number",
                "description" : "Weight by Asset and Currency"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "client id for precomp data"
              },
              "extPtfHierLevel" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extPtfHierLevel"
              },
              "AssetRegionBreak" : {
                "type" : "string",
                "description" : "Asset Region Break"
              },
              "WeightAssetRegion" : {
                "type" : "number",
                "description" : "Weight by Asset and Region"
              },
              "extIpName" : {
                "type" : "string",
                "description" : "extIpName"
              },
              "UNIQUE_CCY_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_CCY_CLASS"
              },
              "UnrealCcyClass" : {
                "type" : "number",
                "description" : "UnrealCcyClass"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ptf id for precomp data"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Id (for calculation)"
              },
              "mgtBeginD" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "mgtBeginD"
              },
              "extBiCashPercent" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiCashPercent"
              },
              "extBiInvalidIp" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiInvalidIp"
              },
              "custParticpantPercentage" : {
                "type" : "number",
                "description" : "custParticpantPercen"
              },
              "extBiCstCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiCstCompliance"
              },
              "extCashPercent" : {
                "type" : "number",
                "description" : "extCashPercent"
              },
              "UNIQUE_REGION_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_REGION_CLASS"
              },
              "extRefCur" : {
                "type" : "string",
                "description" : "extRefCur"
              },
              "CcyClass" : {
                "type" : "string",
                "description" : "CcyClass"
              },
              "advisor_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "advisor id for precomp data"
              },
              "Weight" : {
                "type" : "number",
                "description" : "Weight"
              },
              "UnrealAssetClass" : {
                "type" : "number",
                "description" : "UnrealAssetClass"
              },
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "UniqueAssetCurrency" : {
                "type" : "boolean",
                "description" : "Unique Asset Currency"
              },
              "RegionClassCode" : {
                "type" : "string",
                "description" : "Region Class Code"
              },
              "extBiMainRiskCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiMainRiskCompliance"
              },
              "PLAssetRegion" : {
                "type" : "number",
                "description" : "P&L by Asset and Region"
              },
              "parentPortId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "parentPortId"
              },
              "extOneYearPtfRet" : {
                "type" : "number",
                "description" : "extOneYearPtfRet"
              },
              "extBiObjCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiObjCompliance"
              },
              "MVCcyClass" : {
                "type" : "number",
                "description" : "MVCcyClass"
              },
              "code" : {
                "type" : "string",
                "description" : "code"
              },
              "extBiIpPndVal" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiIpPndVal"
              },
              "AssetClassCode" : {
                "type" : "string",
                "description" : "Asset Class code"
              },
              "CcyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "CcyRank"
              },
              "extIpCurStatus" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extIpCurStatus"
              },
              "Total_PL" : {
                "type" : "number",
                "description" : "Total PL"
              },
              "UniqueAssetRegion" : {
                "type" : "boolean",
                "description" : "Unique Asset Region"
              },
              "MarketValuePos" : {
                "type" : "number",
                "description" : "Market ValuePos"
              },
              "CcyCodif" : {
                "type" : "string",
                "description" : "Ccy Codification"
              },
              "AssetRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "AssetRank"
              },
              "serviceTypeE" : {
                "type" : "string",
                "description" : "serviceTypeE"
              },
              "RegionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "RegionRank"
              },
              "extIpRiskLevelN" : {
                "type" : "number",
                "description" : "extIpRiskLevelN"
              },
              "RegionClass" : {
                "type" : "string",
                "description" : "RegionClass"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "manager id for precomp data"
              },
              "UnrealizedPL" : {
                "type" : "number",
                "description" : "UnrealizedPL"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MVPortfolio"
              },
              "MVRegionClass" : {
                "type" : "number",
                "description" : "MVRegionClass"
              },
              "extBiGoalNotCompliant" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiGoalNotCompliant"
              },
              "PLAssetCurrency" : {
                "type" : "number",
                "description" : "P&L by Asset and Currency"
              },
              "thirdCode" : {
                "type" : "string",
                "description" : "thirdCode"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "MktvalAssetCurrency" : {
                "type" : "number",
                "description" : "Market value by Asset and Currency"
              },
              "UnrealRegionClass" : {
                "type" : "number",
                "description" : "UnrealRegionClass"
              },
              "extInvestProfileId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "extInvestProfileId"
              },
              "SelectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "extBiSaaCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiSaaCompliance"
              },
              "UNIQUE_PORTFOLIO" : {
                "type" : "boolean",
                "description" : "UNIQUE Portfolio"
              },
              "MktvalAssetRegion" : {
                "type" : "number",
                "description" : "Market value by Asset and Region"
              },
              "WeightRegionClass" : {
                "type" : "number",
                "description" : "WeightRegionClass"
              },
              "extOpenOrders" : {
                "type" : "boolean",
                "description" : "extOpenOrders"
              },
              "AssetCurrencyBreak" : {
                "type" : "string",
                "description" : "Asset Currency Break"
              },
              "UNIQUE_ASSET_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_ASSET_CLASS"
              },
              "extIpExpiryD" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "extIpExpiryD"
              },
              "CcyClassCode" : {
                "type" : "string",
                "description" : "Ccy Class Code"
              },
              "WeightAssetClass" : {
                "type" : "number",
                "description" : "WeightAssetClass"
              },
              "Filter" : {
                "type" : "boolean",
                "description" : "Filter"
              },
              "Instrument" : {
                "type" : "string",
                "description" : "Instrument"
              },
              "extBiDaysOperation" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiDaysOperation"
              },
              "SummaryDataFilter" : {
                "type" : "boolean",
                "description" : "Summary Data Filter"
              },
              "currencyCode" : {
                "type" : "string",
                "description" : "currencyCode"
              },
              "statusE" : {
                "type" : "string",
                "description" : "statusE"
              }
            }
          }
        }
      }
    },
    "getAllRecentOperationsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Recent Operations",
          "items" : {
            "type" : "object",
            "properties" : {
              "NET_AMOUNT_OPER_CURR" : {
                "type" : "number",
                "description" : "Net amount in operation currency"
              },
              "SubNature" : {
                "type" : "integer",
                "format" : "int32"
              },
              "QUANTITY" : {
                "type" : "number",
                "description" : "Quantity"
              },
              "REF_OPER_CODE" : {
                "type" : "string",
                "description" : "reference operation code"
              },
              "TRANSVIEW_FILTER" : {
                "type" : "boolean",
                "description" : "TRANSVIEW_FILTER (to extract only operations forseen as transactions)"
              },
              "DebitEntityCode" : {
                "type" : "string",
                "description" : "DEbit"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Client id for precomputed data"
              },
              "POS_CCY" : {
                "type" : "string",
                "description" : "Position Currency"
              },
              "CASHVIEW_FILTER_INIT" : {
                "type" : "boolean",
                "description" : "CASHVIEW_FILTER INIT (to extract only initial balance related to cash movements)"
              },
              "SERVER_FILTER" : {
                "type" : "boolean",
                "description" : "SERVER_FILTER (to extract data which are going to be transmitted to UDP)"
              },
              "OrderType" : {
                "type" : "string",
                "description" : "Order Type"
              },
              "PRICE_CCY" : {
                "type" : "string",
                "description" : "Price Currency"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Portfolio id for precomputed data"
              },
              "ACCOUNTING_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Accounting date"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Id (for calculation)"
              },
              "CreditEntityCode" : {
                "type" : "string",
                "description" : "Credit"
              },
              "INSTR_CODE" : {
                "type" : "string",
                "description" : "Code of instrument"
              },
              "MARKET" : {
                "type" : "string",
                "description" : "Market"
              },
              "SubType" : {
                "type" : "string",
                "description" : "Type"
              },
              "CreditAccount" : {
                "type" : "string",
                "description" : "Credit Account"
              },
              "PRICE" : {
                "type" : "number",
                "description" : "Price"
              },
              "FEES_AMT_OPER_CURR" : {
                "type" : "number",
                "description" : "Fees and taxes amount with sign in operation currency"
              },
              "VALUE_DATE" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Value date"
              },
              "REF_CCY" : {
                "type" : "string",
                "description" : "Reference Currency"
              },
              "PRICE_DEFINITION_CURR" : {
                "type" : "string",
                "description" : "Type of price (currency only)"
              },
              "OPERATION_CODE" : {
                "type" : "string",
                "description" : "Order Code"
              },
              "QUANTITY_CURR" : {
                "type" : "string",
                "description" : "Reference currency for cash accounts, money markets, bonds and equivalent"
              },
              "ACCOUNT_CODE" : {
                "type" : "string",
                "description" : "ACCOUNT_CODE"
              },
              "PRICE_DEFINITION_PERCENT" : {
                "type" : "string",
                "description" : "Type of price (percentage only)"
              },
              "ACCR_INT_OPER_CURR" : {
                "type" : "number",
                "description" : "Accrued interest in operation currency"
              },
              "AccountOwnerAddress" : {
                "type" : "string",
                "description" : "Account Owner Address"
              },
              "ExternalAcct" : {
                "type" : "string",
                "description" : "External Acct"
              },
              "PaymentRef" : {
                "type" : "string",
                "description" : "Reference"
              },
              "INSTR_NAME" : {
                "type" : "string",
                "description" : "Instrument standardised name"
              },
              "OperationNatureId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Operation Nature Id"
              },
              "first_operation_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Identifier of the first operation"
              },
              "INSTR_DENOM" : {
                "type" : "string",
                "description" : "Instrument standardised name"
              },
              "EXCH_RATE" : {
                "type" : "number",
                "description" : "Exchange Rate"
              },
              "GROSS_AMOUNT_OPER_CURR" : {
                "type" : "number",
                "description" : "Gross amount in operation currency"
              },
              "PLAN_REF" : {
                "type" : "string",
                "description" : "Plan definition reference"
              },
              "CASHVIEW_FILTER" : {
                "type" : "boolean",
                "description" : "CASHVIEW_FILTER (to extract only operation related to cash movements)"
              },
              "instr_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Instrument id (of operation) for precomputed data"
              },
              "DEPOSIT_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Deposit Id"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Ptf Name"
              },
              "DebitEntity" : {
                "type" : "string",
                "description" : "Debit"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Manager id for precomputed data"
              },
              "open_operation_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Open operation id for precomputed data"
              },
              "SUMMARY_FILTER" : {
                "type" : "boolean",
                "description" : "SUMMARY_FILTER (to extract online 1 row per portfolio in the hierarchy)"
              },
              "NET_AMOUNT_REF_CURR" : {
                "type" : "number",
                "description" : "Net amount in ref currency"
              },
              "REMARK" : {
                "type" : "string",
                "description" : "Remark"
              },
              "AccountOwner" : {
                "type" : "string",
                "description" : "Account Owner"
              },
              "CompoundOrderCode" : {
                "type" : "string",
                "description" : "Compound Order Code"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sequence number for technical purpose in WUI display"
              },
              "CreditEntity" : {
                "type" : "string",
                "description" : "Credit"
              },
              "DebitAccount" : {
                "type" : "string",
                "description" : "Debit"
              },
              "OPERATION_DATE" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "Operation Date"
              },
              "account_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Account id for precomputed data"
              },
              "DIVIDEND_PAYMENT_OPTION" : {
                "type" : "string",
                "description" : "Dividend Payment Option"
              },
              "OPERATION_NATURE" : {
                "type" : "string",
                "description" : "Operation nature name"
              },
              "STANDING_INSTRUCTION_FILTER" : {
                "type" : "boolean",
                "description" : "Filter on standing instructions"
              },
              "CONTRACT_SIZE" : {
                "type" : "number",
                "description" : "Contract size"
              },
              "ACCOUNT_DENOM" : {
                "type" : "string",
                "description" : "Translated name of account"
              },
              "POS_FILTER" : {
                "type" : "boolean",
                "description" : "POS_FILTER (to extract operations related to initial positions)"
              },
              "LIMIT_NATURE" : {
                "type" : "string",
                "description" : "Limit Nature"
              }
            }
          }
        }
      }
    },
    "getCheckGoalSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Risk measures on IP Strategy used in a goal",
          "items" : {
            "type" : "object",
            "properties" : {
              "RiskComputationStatus" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Risk Computation Status"
              },
              "RiskComputationMessage" : {
                "type" : "string",
                "description" : "Risk Computation Message"
              },
              "ExpectedReturnP" : {
                "type" : "number",
                "description" : "Expected Return in Percentage"
              },
              "InitialGoalAmount" : {
                "type" : "number",
                "description" : "Initial Goal Amount"
              },
              "NbOfTrials" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Number of trials"
              },
              "PortfolioIP" : {
                "type" : "string",
                "description" : "Portfolio IP"
              },
              "DepositFrequencyLabel" : {
                "type" : "string",
                "description" : "Deposit Frequency Label"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MV Portfolio"
              },
              "PeriodFrequency" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Period Frequency"
              },
              "PortfolioName" : {
                "type" : "string",
                "description" : "Portfolio Name"
              },
              "GoalNature" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Goal Nature"
              },
              "NbOfPeriods" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Number of periods"
              },
              "PeriodFrequencyLabel" : {
                "type" : "string",
                "description" : "Period Frequency Label"
              },
              "DepositAmount" : {
                "type" : "number",
                "description" : "Deposit Amount"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sequence number for technical purpose in WUI display"
              },
              "ServerFilter" : {
                "type" : "boolean",
                "description" : "Server Filter"
              },
              "GoalCcy" : {
                "type" : "string",
                "description" : "Goal Currency"
              },
              "VolatilityP" : {
                "type" : "number",
                "description" : "Volatility in Percentage"
              },
              "PortfolioDenom" : {
                "type" : "string",
                "description" : "Portfolio Denom"
              },
              "rowOfId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Row of Id"
              },
              "GoalObjectiveD" : {
                "type" : "string",
                "format" : "date",
                "description" : "Goal Objective Date"
              },
              "GoalObjective" : {
                "type" : "number",
                "description" : "Goal Objective Amount"
              },
              "InitialDeposit" : {
                "type" : "number",
                "description" : "Initial Deposit"
              },
              "DepositFrequency" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Deposit Frequency"
              },
              "GoalStatus" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Goal Status"
              }
            }
          }
        }
      }
    },
    "getCustPortfoliosSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Summary information for the list of portfolios of a client",
          "items" : {
            "type" : "object",
            "properties" : {
              "RefCurrency" : {
                "type" : "string",
                "description" : "Reference currency"
              },
              "PortfolioManagedSince" : {
                "type" : "string",
                "format" : "date",
                "description" : "Portfolio Managed Since"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "ConsoMV" : {
                "type" : "number",
                "description" : "Consolidated market value"
              },
              "PortfolioIPRiskLevel" : {
                "type" : "number",
                "description" : "Portfolio IP risk level"
              },
              "custRoleE" : {
                "type" : "string",
                "description" : "Customer Role"
              },
              "UniquePortfolio" : {
                "type" : "boolean",
                "description" : "UNIQUE PORTFOLIO"
              },
              "PortfolioMV" : {
                "type" : "number",
                "description" : "Portfolio market value"
              },
              "PortfolioIPName" : {
                "type" : "string",
                "description" : "Portfolio IP name"
              },
              "ParentPortfolioId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Parent Portfolio Hierarchy Level"
              },
              "ClientName" : {
                "type" : "string",
                "description" : "Client Name"
              },
              "PortfolioServiceType" : {
                "type" : "string",
                "description" : "Portfolio Service Type"
              },
              "ConsoPL" : {
                "type" : "number",
                "description" : "Consolidated P&L"
              },
              "PortfolioHierarchyLevel" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Portfolio Hierarchy Level"
              },
              "UnrealizedPL" : {
                "type" : "number",
                "description" : "UnrealizedPL"
              },
              "ClientCode" : {
                "type" : "string",
                "description" : "Client Code"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ptf id"
              },
              "AcctFilter" : {
                "type" : "boolean",
                "description" : "Account Flag Filter"
              },
              "custParticpantPercentage" : {
                "type" : "number",
                "description" : "custParticpantPercentage"
              },
              "PortfolioCode" : {
                "type" : "string",
                "description" : "Portfolio Code"
              },
              "PortfolioName" : {
                "type" : "string",
                "description" : "Portfolio Name"
              },
              "PortfolioPL" : {
                "type" : "number",
                "description" : "Portfolio P&L"
              },
              "statusE" : {
                "type" : "string",
                "description" : "Portfolio Status"
              }
            }
          }
        }
      }
    },
    "getCustomerAssetClassesSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Asset Classes",
          "items" : {
            "type" : "object",
            "properties" : {
              "PosCounterpartCcy" : {
                "type" : "string",
                "description" : "PosCounterpartCcy"
              },
              "AssetSectorFilter" : {
                "type" : "boolean",
                "description" : "Asset Sector Filter"
              },
              "MVAssetClass" : {
                "type" : "number",
                "description" : "Market Value Asset Class"
              },
              "MVAssetCurrency" : {
                "type" : "number",
                "description" : "Market Value Asset / Currency"
              },
              "AssetClassRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Asset Class Rank"
              },
              "AssetDurationBreak" : {
                "type" : "string",
                "description" : "Asset Duration Break"
              },
              "WeightAssetCurrency" : {
                "type" : "number",
                "description" : "Weight Asset / Currency"
              },
              "PLAssetCcyPair" : {
                "type" : "number",
                "description" : "P&L Asset / Ccy Pair"
              },
              "AssetRegionBreak" : {
                "type" : "string",
                "description" : "Asset Region Break"
              },
              "PosCcy" : {
                "type" : "string",
                "description" : "PosCcy"
              },
              "WeightAssetRegion" : {
                "type" : "number",
                "description" : "Weight Asset / Region"
              },
              "MVAssetDuration" : {
                "type" : "number",
                "description" : "Market Value Asset / Duration"
              },
              "AssetRatingBreak" : {
                "type" : "string",
                "description" : "Asset Rating Break"
              },
              "CcyPairID" : {
                "type" : "string",
                "description" : "Ccy Pair ID"
              },
              "AssetNatureFilter" : {
                "type" : "boolean",
                "description" : "Asset Nature Filter"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "PortfolioID"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ID"
              },
              "RegionID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Region ID"
              },
              "MVAssetRegion" : {
                "type" : "number",
                "description" : "Market Value Asset / Region"
              },
              "MVAssetMaturity" : {
                "type" : "number",
                "description" : "Market Value Asset / Maturity"
              },
              "WeightAssetMaturity" : {
                "type" : "number",
                "description" : "Weight Asset / Maturity"
              },
              "WeightAssetNature" : {
                "type" : "number",
                "description" : "Weight Asset / Nature"
              },
              "MaturityClass" : {
                "type" : "string",
                "description" : "Maturity Class"
              },
              "AssetRegionFilter" : {
                "type" : "boolean",
                "description" : "Asset Region Filter"
              },
              "WeightAssetSector" : {
                "type" : "number",
                "description" : "Weight Asset / Sector"
              },
              "AssetMaturityBreak" : {
                "type" : "string",
                "description" : "Asset Maturity Break"
              },
              "WeightAssetDuration" : {
                "type" : "number",
                "description" : "Weight Asset / Duration"
              },
              "PLAssetRating" : {
                "type" : "number",
                "description" : "P&L Asset / Rating"
              },
              "WeightAssetCcyPair" : {
                "type" : "number",
                "description" : "Weight Asset / Ccy Pair"
              },
              "PLAssetType" : {
                "type" : "number",
                "description" : "P&L Asset / Type"
              },
              "AssetRatingFilter" : {
                "type" : "boolean",
                "description" : "Asset Rating Filter"
              },
              "Region" : {
                "type" : "string",
                "description" : "Region"
              },
              "AssetNatureBreak" : {
                "type" : "string",
                "description" : "Asset Nature Break"
              },
              "PLAssetRegion" : {
                "type" : "number",
                "description" : "P&L Asset / Region"
              },
              "PortfolioCode" : {
                "type" : "string",
                "description" : "Portfolio"
              },
              "RatingClass" : {
                "type" : "string",
                "description" : "Rating Class"
              },
              "AssetTypeBreak" : {
                "type" : "string",
                "description" : "Asset Type Break"
              },
              "MaturityID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Maturity ID"
              },
              "TypeID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Type ID"
              },
              "WeightAssetType" : {
                "type" : "number",
                "description" : "Weight Asset / Type"
              },
              "MVAssetRating" : {
                "type" : "number",
                "description" : "Market Value Asset / Rating"
              },
              "PLAssetMaturity" : {
                "type" : "number",
                "description" : "P&L Asset / Maturity"
              },
              "CurrencyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Currency Rank"
              },
              "CurrencyCodif" : {
                "type" : "string",
                "description" : "Currency Codification"
              },
              "RegionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Region Rank"
              },
              "AssetCcyPairFilter" : {
                "type" : "boolean",
                "description" : "Asset Ccy Pair Filter"
              },
              "RatingID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Rating ID"
              },
              "NatureID" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Nature ID"
              },
              "DurationClass" : {
                "type" : "string",
                "description" : "Duration Class"
              },
              "PLAssetNature" : {
                "type" : "number",
                "description" : "P&L Asset / Nature"
              },
              "ProfitLoss" : {
                "type" : "number",
                "description" : "ProfitLoss"
              },
              "PLAssetDuration" : {
                "type" : "number",
                "description" : "P&L Asset / Duration"
              },
              "AssetMaturityFilter" : {
                "type" : "boolean",
                "description" : "Asset Maturity Filter"
              },
              "WeightAssetRating" : {
                "type" : "number",
                "description" : "Weight Asset / Rating"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MV Portfolio"
              },
              "MVAssetCcyPair" : {
                "type" : "number",
                "description" : "Market Value Asset / Ccy Pair"
              },
              "PLAssetSector" : {
                "type" : "number",
                "description" : "P&L Asset / Sector"
              },
              "PLAssetCurrency" : {
                "type" : "number",
                "description" : "P&L Asset / Currency"
              },
              "AssetCcyPairBreak" : {
                "type" : "string",
                "description" : "Asset Ccy Pari Break"
              },
              "SectorRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sector Rank"
              },
              "MVAssetSector" : {
                "type" : "number",
                "description" : "Market Value Asset / Sector"
              },
              "Nature" : {
                "type" : "string",
                "description" : "Nature"
              },
              "AssetTypeFilter" : {
                "type" : "boolean",
                "description" : "Asset Type Filter"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "AssetDurationFilter" : {
                "type" : "boolean",
                "description" : "Asset Duration Filter"
              },
              "Sector" : {
                "type" : "string",
                "description" : "Sector"
              },
              "SelectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "MaturityRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Maturity Rank"
              },
              "CurrencyClass" : {
                "type" : "string",
                "description" : "Ccy Class"
              },
              "MVAssetType" : {
                "type" : "number",
                "description" : "Market Value Asset / Type"
              },
              "AssetCurrencyBreak" : {
                "type" : "string",
                "description" : "Asset Currency Break"
              },
              "DurationRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Duration Rank"
              },
              "CurrencyID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Ccy ID"
              },
              "AssetCurrencyFilter" : {
                "type" : "boolean",
                "description" : "Asset Currency Filter"
              },
              "Type" : {
                "type" : "string",
                "description" : "Type"
              },
              "CcyPair" : {
                "type" : "string",
                "description" : "CcyPair"
              },
              "DurationID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Duration ID"
              },
              "AssetSectorBreak" : {
                "type" : "string",
                "description" : "Asset Sector Break"
              },
              "Ccy" : {
                "type" : "string",
                "description" : "Ccy"
              },
              "AcctFilter" : {
                "type" : "boolean",
                "description" : "Account Flag Filter"
              },
              "MVAssetNature" : {
                "type" : "number",
                "description" : "Market Value Asset / Nature"
              },
              "RatingRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rating Rank"
              },
              "SectorID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sector ID"
              },
              "SummaryDataFilter" : {
                "type" : "boolean",
                "description" : "Summary Data Filter"
              }
            }
          }
        }
      }
    },
    "getCustomerConsolidatedSummarySuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Consolidated Summary",
          "items" : {
            "type" : "object",
            "properties" : {
              "MVAssetClass" : {
                "type" : "number",
                "description" : "MVAssetClass"
              },
              "extBiMktValDrop" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiMktValDrop"
              },
              "ValuationCurrency" : {
                "type" : "string",
                "description" : "ValuationCurrency"
              },
              "WeightCcyClass" : {
                "type" : "number",
                "description" : "WeightCcyClass"
              },
              "custRoleE" : {
                "type" : "string",
                "description" : "custRoleE"
              },
              "thirdName" : {
                "type" : "string",
                "description" : "thirdName"
              },
              "AssetCode" : {
                "type" : "string",
                "description" : "Asset Denom"
              },
              "extTdMktValM" : {
                "type" : "number",
                "description" : "extTdMktValM"
              },
              "WeightAssetCurrency" : {
                "type" : "number",
                "description" : "Weight by Asset and Currency"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "client id for precomp data"
              },
              "extPtfHierLevel" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extPtfHierLevel"
              },
              "AssetRegionBreak" : {
                "type" : "string",
                "description" : "Asset Region Break"
              },
              "WeightAssetRegion" : {
                "type" : "number",
                "description" : "Weight by Asset and Region"
              },
              "extIpName" : {
                "type" : "string",
                "description" : "extIpName"
              },
              "UNIQUE_CCY_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_CCY_CLASS"
              },
              "UnrealCcyClass" : {
                "type" : "number",
                "description" : "UnrealCcyClass"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ptf id for precomp data"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Id (for calculation)"
              },
              "mgtBeginD" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "mgtBeginD"
              },
              "extBiCashPercent" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiCashPercent"
              },
              "extBiInvalidIp" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiInvalidIp"
              },
              "custParticpantPercentage" : {
                "type" : "number",
                "description" : "custParticpantPercen"
              },
              "extBiCstCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiCstCompliance"
              },
              "extCashPercent" : {
                "type" : "number",
                "description" : "extCashPercent"
              },
              "UNIQUE_REGION_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_REGION_CLASS"
              },
              "extRefCur" : {
                "type" : "string",
                "description" : "extRefCur"
              },
              "CcyClass" : {
                "type" : "string",
                "description" : "CcyClass"
              },
              "advisor_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "advisor id for precomp data"
              },
              "Weight" : {
                "type" : "number",
                "description" : "Weight"
              },
              "UnrealAssetClass" : {
                "type" : "number",
                "description" : "UnrealAssetClass"
              },
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "UniqueAssetCurrency" : {
                "type" : "boolean",
                "description" : "Unique Asset Currency"
              },
              "RegionClassCode" : {
                "type" : "string",
                "description" : "Region Class Code"
              },
              "extBiMainRiskCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiMainRiskCompliance"
              },
              "PLAssetRegion" : {
                "type" : "number",
                "description" : "P&L by Asset and Region"
              },
              "parentPortId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "parentPortId"
              },
              "extOneYearPtfRet" : {
                "type" : "number",
                "description" : "extOneYearPtfRet"
              },
              "extBiObjCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiObjCompliance"
              },
              "MVCcyClass" : {
                "type" : "number",
                "description" : "MVCcyClass"
              },
              "code" : {
                "type" : "string",
                "description" : "code"
              },
              "extBiIpPndVal" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiIpPndVal"
              },
              "AssetClassCode" : {
                "type" : "string",
                "description" : "Asset Class code"
              },
              "CcyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "CcyRank"
              },
              "extIpCurStatus" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extIpCurStatus"
              },
              "Total_PL" : {
                "type" : "number",
                "description" : "Total PL"
              },
              "UniqueAssetRegion" : {
                "type" : "boolean",
                "description" : "Unique Asset Region"
              },
              "MarketValuePos" : {
                "type" : "number",
                "description" : "Market ValuePos"
              },
              "CcyCodif" : {
                "type" : "string",
                "description" : "Ccy Codification"
              },
              "AssetRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "AssetRank"
              },
              "serviceTypeE" : {
                "type" : "string",
                "description" : "serviceTypeE"
              },
              "RegionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "RegionRank"
              },
              "extIpRiskLevelN" : {
                "type" : "number",
                "description" : "extIpRiskLevelN"
              },
              "RegionClass" : {
                "type" : "string",
                "description" : "RegionClass"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "manager id for precomp data"
              },
              "UnrealizedPL" : {
                "type" : "number",
                "description" : "UnrealizedPL"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MVPortfolio"
              },
              "MVRegionClass" : {
                "type" : "number",
                "description" : "MVRegionClass"
              },
              "extBiGoalNotCompliant" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiGoalNotCompliant"
              },
              "PLAssetCurrency" : {
                "type" : "number",
                "description" : "P&L by Asset and Currency"
              },
              "thirdCode" : {
                "type" : "string",
                "description" : "thirdCode"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "MktvalAssetCurrency" : {
                "type" : "number",
                "description" : "Market value by Asset and Currency"
              },
              "UnrealRegionClass" : {
                "type" : "number",
                "description" : "UnrealRegionClass"
              },
              "extInvestProfileId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "extInvestProfileId"
              },
              "SelectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "extBiSaaCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiSaaCompliance"
              },
              "UNIQUE_PORTFOLIO" : {
                "type" : "boolean",
                "description" : "UNIQUE Portfolio"
              },
              "MktvalAssetRegion" : {
                "type" : "number",
                "description" : "Market value by Asset and Region"
              },
              "WeightRegionClass" : {
                "type" : "number",
                "description" : "WeightRegionClass"
              },
              "extOpenOrders" : {
                "type" : "boolean",
                "description" : "extOpenOrders"
              },
              "AssetCurrencyBreak" : {
                "type" : "string",
                "description" : "Asset Currency Break"
              },
              "UNIQUE_ASSET_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_ASSET_CLASS"
              },
              "extIpExpiryD" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "extIpExpiryD"
              },
              "CcyClassCode" : {
                "type" : "string",
                "description" : "Ccy Class Code"
              },
              "WeightAssetClass" : {
                "type" : "number",
                "description" : "WeightAssetClass"
              },
              "Filter" : {
                "type" : "boolean",
                "description" : "Filter"
              },
              "Instrument" : {
                "type" : "string",
                "description" : "Instrument"
              },
              "extBiDaysOperation" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiDaysOperation"
              },
              "SummaryDataFilter" : {
                "type" : "boolean",
                "description" : "Summary Data Filter"
              },
              "currencyCode" : {
                "type" : "string",
                "description" : "currencyCode"
              },
              "statusE" : {
                "type" : "string",
                "description" : "statusE"
              }
            }
          }
        }
      }
    },
    "getFreeDepositHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/FreeDepositHisto"
        }
      }
    },
    "getFutureCashFlowSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Future Cash Flow",
          "items" : {
            "type" : "object",
            "properties" : {
              "Balance3M_Ref" : {
                "type" : "number",
                "description" : "Balance3M_Ref"
              },
              "Balance3M_Pos" : {
                "type" : "number",
                "description" : "Balance3M_Pos"
              },
              "Balance1M_Pos" : {
                "type" : "number",
                "description" : "Balance1M_Pos"
              },
              "Balance1M_Ref" : {
                "type" : "number",
                "description" : "Balance1M_Ref"
              },
              "ONE_PTF_OCCUR" : {
                "type" : "boolean",
                "description" : "ONE_PTF_OCCUR"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Portfolio ID"
              },
              "valud_d" : {
                "type" : "string",
                "format" : "date",
                "description" : "Value Date"
              },
              "ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ID"
              },
              "Flow1M_Ref" : {
                "type" : "number",
                "description" : "Flow1M_Ref"
              },
              "Flow1M_Pos" : {
                "type" : "number",
                "description" : "Flow1M_Pos"
              },
              "Balance_Pos" : {
                "type" : "number",
                "description" : "Balance_Pos"
              },
              "Balance_Ref" : {
                "type" : "number",
                "description" : "Balance_Ref"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "nature" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Nature"
              },
              "Flow1W_Pos" : {
                "type" : "number",
                "description" : "Flow1W_Pos"
              },
              "Ccy_Pos_Disp" : {
                "type" : "string",
                "description" : "Ccy_Pos_Disp"
              },
              "Flow1W_Ref" : {
                "type" : "number",
                "description" : "Flow1W_Ref"
              },
              "Portfolio" : {
                "type" : "string",
                "description" : "Portfolio"
              },
              "Ccy_Ref" : {
                "type" : "string",
                "description" : "Ccy_Ref"
              },
              "Flow3M_Ref" : {
                "type" : "number",
                "description" : "Flow3M_Ref"
              },
              "Flow3M_Pos" : {
                "type" : "number",
                "description" : "Flow3M_Pos"
              },
              "RefAmount" : {
                "type" : "number",
                "description" : "RefAmount"
              },
              "Ccy_Org" : {
                "type" : "string",
                "description" : "Ccy_Org"
              },
              "Ccy" : {
                "type" : "string",
                "description" : "Ccy"
              },
              "PosAmount" : {
                "type" : "number",
                "description" : "PosAmount"
              },
              "Balance1W_Pos" : {
                "type" : "number",
                "description" : "Balance1W_Pos"
              },
              "Balance1W_Ref" : {
                "type" : "number",
                "description" : "Balance1W_Ref"
              }
            }
          }
        }
      }
    },
    "getGoalPerfSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Performance on goal",
          "items" : {
            "type" : "object",
            "properties" : {
              "InvestWithdrawal" : {
                "type" : "number",
                "description" : "InvestWithdrawal"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "ServerFilter" : {
                "type" : "boolean",
                "description" : "ServerFilter"
              },
              "PeriodFilter" : {
                "type" : "boolean",
                "description" : "PeriodFilter"
              },
              "PortfolioLevelFilter" : {
                "type" : "boolean",
                "description" : "PortfolioLevelFilter"
              }
            }
          }
        }
      }
    },
    "getGoalsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Goal portfolio list",
          "items" : {
            "type" : "object",
            "properties" : {
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "GoalStatus" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Goal Status"
              },
              "ServerFilter" : {
                "type" : "boolean",
                "description" : "Server Filter"
              },
              "GoalCcy" : {
                "type" : "string",
                "description" : "Goal Currency"
              },
              "PortfolioDenom" : {
                "type" : "string",
                "description" : "Portfolio Denom"
              },
              "PortfolioCode" : {
                "type" : "string",
                "description" : "Portfolio Code"
              },
              "PortfolioName" : {
                "type" : "string",
                "description" : "Portfolio Name"
              },
              "GoalNature" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Goal Nature"
              },
              "GoalObjectiveD" : {
                "type" : "string",
                "format" : "date",
                "description" : "Goal Objective Date"
              },
              "GoalObjective" : {
                "type" : "number",
                "description" : "Goal Objective Amount"
              }
            }
          }
        }
      }
    },
    "getMonteCarloSimulationSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MonteCarloPercentile"
          }
        }
      }
    },
    "getPerformanceSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Performance",
          "items" : {
            "type" : "object",
            "properties" : {
              "SUFFICIENT_DATA" : {
                "type" : "boolean",
                "description" : "SUFFICIENT DATA"
              },
              "PERIOD_INCOME" : {
                "type" : "number",
                "description" : "Period Income"
              },
              "PORTFOLIO_LEVEL_FILTER" : {
                "type" : "boolean",
                "description" : "PORTFOLIO_LEVEL_FILTER (for calculation: to hide)"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "client id for precomp data"
              },
              "SERVER_FILTER" : {
                "type" : "boolean",
                "description" : "SERVER_FILTER"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Portfolio name"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "manager id for precomp data"
              },
              "PERIOD_UNREAL_CURR_PL" : {
                "type" : "number",
                "description" : "Period Unrealised Currency P&L"
              },
              "GLOBAL_PERIOD_FILTER" : {
                "type" : "boolean",
                "description" : "GLOBAL_PERIOD_FILTER"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ptf id for precomp data"
              },
              "PERIOD_INITIAL_MKT_VAL" : {
                "type" : "number",
                "description" : "Period Initial Mkt Value"
              },
              "PERIOD_UNREAL_CAP_PL" : {
                "type" : "number",
                "description" : "Period Unrealised Capital P&L"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "id (Calculation)"
              },
              "PERIOD_GAIN_LOSS" : {
                "type" : "number",
                "description" : "Period Gain & Loss"
              },
              "PERIOD_RET_TWR" : {
                "type" : "number",
                "description" : "Period Portfolio TWR Return"
              },
              "PERIOD_REAL_CURR_PL" : {
                "type" : "number",
                "description" : "Period Realised Currency P&L"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "PERIOD_FEE_TAX" : {
                "type" : "number",
                "description" : "Period Fees & Taxes"
              },
              "PERIOD_INITIAL_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Period Initial date"
              },
              "PORTFOLIO_CODE" : {
                "type" : "string",
                "description" : "Portfolio code"
              },
              "PERIOD_TOT_RET_BENCH" : {
                "type" : "number",
                "description" : "Period return of the benchmark"
              },
              "PERIOD_FINAL_MKT_VAL" : {
                "type" : "number",
                "description" : "Period Final Mkt Value"
              },
              "REF_CURRENCY" : {
                "type" : "string",
                "description" : "Reference currency"
              },
              "bench_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "bench_id"
              },
              "PERIOD_FINAL_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Periode Final date"
              },
              "PERIOD_INVEST_WITHDRAWAL" : {
                "type" : "number",
                "description" : "Period Investment / Withdrawal"
              },
              "BENCHMARK_FULL_NAME" : {
                "type" : "string",
                "description" : "Benchmark translated name"
              },
              "PERIOD_DISPLAY" : {
                "type" : "string",
                "description" : "Period"
              },
              "PERIOD_REAL_CAP_PL" : {
                "type" : "number",
                "description" : "Period Realised Capital P&L"
              }
            }
          }
        }
      }
    },
    "getPlanDefinitionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanDefinition"
        }
      }
    },
    "getPlanInvestDateSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanInvestDate"
        }
      }
    },
    "getPlanInvestParamHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanInvestParamHisto"
        }
      }
    },
    "getPlanObjectiveHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanObjectiveHisto"
        }
      }
    },
    "getPlanSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanSession"
        }
      }
    },
    "getPortPerformanceSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Performance",
          "items" : {
            "type" : "object",
            "properties" : {
              "SUFFICIENT_DATA" : {
                "type" : "boolean",
                "description" : "SUFFICIENT DATA"
              },
              "PERIOD_INCOME" : {
                "type" : "number",
                "description" : "Period Income"
              },
              "PORTFOLIO_LEVEL_FILTER" : {
                "type" : "boolean",
                "description" : "PORTFOLIO_LEVEL_FILTER (for calculation: to hide)"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "client id for precomp data"
              },
              "SERVER_FILTER" : {
                "type" : "boolean",
                "description" : "SERVER_FILTER"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Portfolio name"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "manager id for precomp data"
              },
              "PERIOD_UNREAL_CURR_PL" : {
                "type" : "number",
                "description" : "Period Unrealised Currency P&L"
              },
              "GLOBAL_PERIOD_FILTER" : {
                "type" : "boolean",
                "description" : "GLOBAL_PERIOD_FILTER"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ptf id for precomp data"
              },
              "PERIOD_INITIAL_MKT_VAL" : {
                "type" : "number",
                "description" : "Period Initial Mkt Value"
              },
              "PERIOD_UNREAL_CAP_PL" : {
                "type" : "number",
                "description" : "Period Unrealised Capital P&L"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "id (Calculation)"
              },
              "PERIOD_GAIN_LOSS" : {
                "type" : "number",
                "description" : "Period Gain & Loss"
              },
              "PERIOD_RET_TWR" : {
                "type" : "number",
                "description" : "Period Portfolio TWR Return"
              },
              "PERIOD_REAL_CURR_PL" : {
                "type" : "number",
                "description" : "Period Realised Currency P&L"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "PERIOD_FEE_TAX" : {
                "type" : "number",
                "description" : "Period Fees & Taxes"
              },
              "PERIOD_INITIAL_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Period Initial date"
              },
              "PORTFOLIO_CODE" : {
                "type" : "string",
                "description" : "Portfolio code"
              },
              "PERIOD_TOT_RET_BENCH" : {
                "type" : "number",
                "description" : "Period return of the benchmark"
              },
              "PERIOD_FINAL_MKT_VAL" : {
                "type" : "number",
                "description" : "Period Final Mkt Value"
              },
              "REF_CURRENCY" : {
                "type" : "string",
                "description" : "Reference currency"
              },
              "bench_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "bench_id"
              },
              "PERIOD_FINAL_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Periode Final date"
              },
              "PERIOD_INVEST_WITHDRAWAL" : {
                "type" : "number",
                "description" : "Period Investment / Withdrawal"
              },
              "BENCHMARK_FULL_NAME" : {
                "type" : "string",
                "description" : "Benchmark translated name"
              },
              "PERIOD_DISPLAY" : {
                "type" : "string",
                "description" : "Period"
              },
              "PERIOD_REAL_CAP_PL" : {
                "type" : "number",
                "description" : "Period Realised Capital P&L"
              }
            }
          }
        }
      }
    },
    "getPortfolioAssetClassesSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Asset Classes",
          "items" : {
            "type" : "object",
            "properties" : {
              "PosCounterpartCcy" : {
                "type" : "string",
                "description" : "PosCounterpartCcy"
              },
              "AssetSectorFilter" : {
                "type" : "boolean",
                "description" : "Asset Sector Filter"
              },
              "MVAssetClass" : {
                "type" : "number",
                "description" : "Market Value Asset Class"
              },
              "MVAssetCurrency" : {
                "type" : "number",
                "description" : "Market Value Asset / Currency"
              },
              "AssetClassRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Asset Class Rank"
              },
              "AssetDurationBreak" : {
                "type" : "string",
                "description" : "Asset Duration Break"
              },
              "WeightAssetCurrency" : {
                "type" : "number",
                "description" : "Weight Asset / Currency"
              },
              "PLAssetCcyPair" : {
                "type" : "number",
                "description" : "P&L Asset / Ccy Pair"
              },
              "AssetRegionBreak" : {
                "type" : "string",
                "description" : "Asset Region Break"
              },
              "PosCcy" : {
                "type" : "string",
                "description" : "PosCcy"
              },
              "WeightAssetRegion" : {
                "type" : "number",
                "description" : "Weight Asset / Region"
              },
              "MVAssetDuration" : {
                "type" : "number",
                "description" : "Market Value Asset / Duration"
              },
              "AssetRatingBreak" : {
                "type" : "string",
                "description" : "Asset Rating Break"
              },
              "CcyPairID" : {
                "type" : "string",
                "description" : "Ccy Pair ID"
              },
              "AssetNatureFilter" : {
                "type" : "boolean",
                "description" : "Asset Nature Filter"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "PortfolioID"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ID"
              },
              "RegionID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Region ID"
              },
              "MVAssetRegion" : {
                "type" : "number",
                "description" : "Market Value Asset / Region"
              },
              "MVAssetMaturity" : {
                "type" : "number",
                "description" : "Market Value Asset / Maturity"
              },
              "WeightAssetMaturity" : {
                "type" : "number",
                "description" : "Weight Asset / Maturity"
              },
              "WeightAssetNature" : {
                "type" : "number",
                "description" : "Weight Asset / Nature"
              },
              "MaturityClass" : {
                "type" : "string",
                "description" : "Maturity Class"
              },
              "AssetRegionFilter" : {
                "type" : "boolean",
                "description" : "Asset Region Filter"
              },
              "WeightAssetSector" : {
                "type" : "number",
                "description" : "Weight Asset / Sector"
              },
              "AssetMaturityBreak" : {
                "type" : "string",
                "description" : "Asset Maturity Break"
              },
              "WeightAssetDuration" : {
                "type" : "number",
                "description" : "Weight Asset / Duration"
              },
              "PLAssetRating" : {
                "type" : "number",
                "description" : "P&L Asset / Rating"
              },
              "WeightAssetCcyPair" : {
                "type" : "number",
                "description" : "Weight Asset / Ccy Pair"
              },
              "PLAssetType" : {
                "type" : "number",
                "description" : "P&L Asset / Type"
              },
              "AssetRatingFilter" : {
                "type" : "boolean",
                "description" : "Asset Rating Filter"
              },
              "Region" : {
                "type" : "string",
                "description" : "Region"
              },
              "AssetNatureBreak" : {
                "type" : "string",
                "description" : "Asset Nature Break"
              },
              "PLAssetRegion" : {
                "type" : "number",
                "description" : "P&L Asset / Region"
              },
              "PortfolioCode" : {
                "type" : "string",
                "description" : "Portfolio"
              },
              "RatingClass" : {
                "type" : "string",
                "description" : "Rating Class"
              },
              "AssetTypeBreak" : {
                "type" : "string",
                "description" : "Asset Type Break"
              },
              "MaturityID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Maturity ID"
              },
              "TypeID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Type ID"
              },
              "WeightAssetType" : {
                "type" : "number",
                "description" : "Weight Asset / Type"
              },
              "MVAssetRating" : {
                "type" : "number",
                "description" : "Market Value Asset / Rating"
              },
              "PLAssetMaturity" : {
                "type" : "number",
                "description" : "P&L Asset / Maturity"
              },
              "CurrencyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Currency Rank"
              },
              "CurrencyCodif" : {
                "type" : "string",
                "description" : "Currency Codification"
              },
              "RegionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Region Rank"
              },
              "AssetCcyPairFilter" : {
                "type" : "boolean",
                "description" : "Asset Ccy Pair Filter"
              },
              "RatingID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Rating ID"
              },
              "NatureID" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Nature ID"
              },
              "DurationClass" : {
                "type" : "string",
                "description" : "Duration Class"
              },
              "PLAssetNature" : {
                "type" : "number",
                "description" : "P&L Asset / Nature"
              },
              "ProfitLoss" : {
                "type" : "number",
                "description" : "ProfitLoss"
              },
              "PLAssetDuration" : {
                "type" : "number",
                "description" : "P&L Asset / Duration"
              },
              "AssetMaturityFilter" : {
                "type" : "boolean",
                "description" : "Asset Maturity Filter"
              },
              "WeightAssetRating" : {
                "type" : "number",
                "description" : "Weight Asset / Rating"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MV Portfolio"
              },
              "MVAssetCcyPair" : {
                "type" : "number",
                "description" : "Market Value Asset / Ccy Pair"
              },
              "PLAssetSector" : {
                "type" : "number",
                "description" : "P&L Asset / Sector"
              },
              "PLAssetCurrency" : {
                "type" : "number",
                "description" : "P&L Asset / Currency"
              },
              "AssetCcyPairBreak" : {
                "type" : "string",
                "description" : "Asset Ccy Pari Break"
              },
              "SectorRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sector Rank"
              },
              "MVAssetSector" : {
                "type" : "number",
                "description" : "Market Value Asset / Sector"
              },
              "Nature" : {
                "type" : "string",
                "description" : "Nature"
              },
              "AssetTypeFilter" : {
                "type" : "boolean",
                "description" : "Asset Type Filter"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "AssetDurationFilter" : {
                "type" : "boolean",
                "description" : "Asset Duration Filter"
              },
              "Sector" : {
                "type" : "string",
                "description" : "Sector"
              },
              "SelectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "MaturityRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Maturity Rank"
              },
              "CurrencyClass" : {
                "type" : "string",
                "description" : "Ccy Class"
              },
              "MVAssetType" : {
                "type" : "number",
                "description" : "Market Value Asset / Type"
              },
              "AssetCurrencyBreak" : {
                "type" : "string",
                "description" : "Asset Currency Break"
              },
              "DurationRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Duration Rank"
              },
              "CurrencyID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Ccy ID"
              },
              "AssetCurrencyFilter" : {
                "type" : "boolean",
                "description" : "Asset Currency Filter"
              },
              "Type" : {
                "type" : "string",
                "description" : "Type"
              },
              "CcyPair" : {
                "type" : "string",
                "description" : "CcyPair"
              },
              "DurationID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Duration ID"
              },
              "AssetSectorBreak" : {
                "type" : "string",
                "description" : "Asset Sector Break"
              },
              "Ccy" : {
                "type" : "string",
                "description" : "Ccy"
              },
              "AcctFilter" : {
                "type" : "boolean",
                "description" : "Account Flag Filter"
              },
              "MVAssetNature" : {
                "type" : "number",
                "description" : "Market Value Asset / Nature"
              },
              "RatingRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rating Rank"
              },
              "SectorID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sector ID"
              },
              "SummaryDataFilter" : {
                "type" : "boolean",
                "description" : "Summary Data Filter"
              }
            }
          }
        }
      }
    },
    "getPortfolioCompoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Portfolio",
          "items" : {
            "type" : "object",
            "properties" : {
              "LastRebalancingDate" : {
                "type" : "string",
                "format" : "date",
                "description" : "Last Rebalancing Date"
              },
              "AggregatedDataFilter" : {
                "type" : "boolean",
                "description" : "Aggregated Data Filter"
              },
              "PortfolioCurrencyCode" : {
                "type" : "string"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "AllOpenOrders" : {
                "type" : "boolean",
                "description" : "Open orders (All)"
              },
              "LastRebalancingStatus" : {
                "type" : "string",
                "description" : "Last Rebalancing Status"
              },
              "AllNextRedemptionDerivatives" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Next Redemption (All Derivatives)"
              },
              "Portfolio" : {
                "type" : "string",
                "description" : "Portfolio"
              },
              "AllNextRedemptionForward" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Next Redemption (All Forward)"
              },
              "AllLastTransaction" : {
                "type" : "string",
                "format" : "date",
                "description" : "Last Transaction Date (All)"
              },
              "PortfolioCurrency" : {
                "type" : "string"
              },
              "AllObjectiveComplianceE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Objective Compliance (All)"
              },
              "AllNextRedemptionFixedIncome" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Next Redemption (All Fixed Income)"
              },
              "AllNextRedemptionDate" : {
                "type" : "string",
                "format" : "date",
                "description" : "Next Redemption Date (All)"
              },
              "CurrentWithdrawalRequestStatus" : {
                "type" : "integer",
                "format" : "int32"
              },
              "MainRiskComplianceE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Main Risk Compliance (All)"
              },
              "AllObjectiveCompliance" : {
                "type" : "string",
                "description" : "Objective Compliance (All)"
              },
              "AllConstraintCompliance" : {
                "type" : "string",
                "description" : "Constraint Compliance (All)"
              },
              "AllStrategicComplianceE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Strategic Compliance (All)"
              },
              "AllConstraintComplianceE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Constraint Compliance (All)"
              },
              "AllNextRedemptionMoneyMarket" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Next Redemption (All Money Market)"
              },
              "CurrencyCodification" : {
                "type" : "string",
                "description" : "Currency Codification"
              }
            }
          }
        }
      }
    },
    "getPositionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "List of Positions (Held Assets, Detailed Positions)",
          "items" : {
            "type" : "object",
            "properties" : {
              "SubNature" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sub Nature"
              },
              "REF_OPER_CODE" : {
                "type" : "string",
                "description" : "Reference operation code"
              },
              "CCY_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Ccy ID"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "PortfolioID"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ID"
              },
              "AccruedInterest" : {
                "type" : "number",
                "description" : "Accrued Interest"
              },
              "Status" : {
                "type" : "string",
                "description" : "Status"
              },
              "NextCouponDate" : {
                "type" : "string",
                "format" : "date",
                "description" : "Next Coupon Date"
              },
              "Code" : {
                "type" : "string",
                "description" : "Instr Code"
              },
              "CostValCcy" : {
                "type" : "number",
                "description" : "Cost Val Ccy"
              },
              "Recommendation" : {
                "type" : "string",
                "description" : "Recommendation"
              },
              "FWD_CCY_PAIR" : {
                "type" : "string",
                "description" : "Fwd Ccy Pair"
              },
              "CostFXRate" : {
                "type" : "number",
                "description" : "Cost FX Rate"
              },
              "Denomination" : {
                "type" : "string",
                "description" : "Instr Denomination"
              },
              "MarketPriceCcy" : {
                "type" : "string",
                "description" : "Market Price Currency"
              },
              "MATURITY_CLASS" : {
                "type" : "string",
                "description" : "Maturity Class"
              },
              "QUANTITY_CURR" : {
                "type" : "string",
                "description" : "Ccy"
              },
              "Underlying" : {
                "type" : "string",
                "description" : "Underlying"
              },
              "RegionClassCode" : {
                "type" : "string",
                "description" : "Region Class Code"
              },
              "AccountedPosition" : {
                "type" : "boolean",
                "description" : "Accounted Position"
              },
              "CCY_CLASS" : {
                "type" : "string",
                "description" : "Ccy Class"
              },
              "DepositCloseRight" : {
                "type" : "boolean",
                "description" : "DepositCloseRight"
              },
              "MarketPriceDate" : {
                "type" : "string",
                "format" : "date",
                "description" : "Market Price Date"
              },
              "DepositName" : {
                "type" : "string",
                "description" : "Deposit Name"
              },
              "IO_SECURITY" : {
                "type" : "boolean",
                "description" : "Security Order"
              },
              "CcyCodif" : {
                "type" : "string",
                "description" : "Ccy Codification"
              },
              "RegionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Region Rank"
              },
              "REGION_CLASS" : {
                "type" : "string",
                "description" : "Region Class"
              },
              "CounterpartCcy" : {
                "type" : "string",
                "description" : "Counterpart Ccy"
              },
              "DEPOSIT_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Deposit Id"
              },
              "NatureID" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Lock Nature of the position"
              },
              "AssetClassID" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Asset Class ID"
              },
              "IO_PM_USER_CHECK" : {
                "type" : "boolean",
                "description" : "PM Flag"
              },
              "BOND_DURATION_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Bond Duration ID"
              },
              "convertibleF" : {
                "type" : "boolean",
                "description" : "Convertible Flag"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MV Portfolio"
              },
              "lock_type" : {
                "type" : "string",
                "description" : "Lock Type of the position"
              },
              "InterestRate" : {
                "type" : "number",
                "description" : "Interest Rate"
              },
              "PortfolioName" : {
                "type" : "string",
                "description" : "Portfolio Name"
              },
              "Nature" : {
                "type" : "string",
                "description" : "Nature"
              },
              "IODerivOrdBuy" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Derivative Order for Initiate Order(Buy)"
              },
              "ValueValCcy" : {
                "type" : "number",
                "description" : "Value Val Ccy"
              },
              "Portfolio" : {
                "type" : "string",
                "description" : "Portfolio"
              },
              "ContractSize" : {
                "type" : "number",
                "description" : "Contract Size"
              },
              "IORefNatSell" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Reference Nature for Initiate Order (Sell)"
              },
              "IO_SUB_POS_NAT" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sub Position Nature"
              },
              "BOND_MATURITY_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Bond Maturity ID"
              },
              "Type" : {
                "type" : "string",
                "description" : "Type"
              },
              "IO_DEPOSIT" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Deposit"
              },
              "INSTR_NATURE" : {
                "type" : "string",
                "description" : "INSTR_NATURE"
              },
              "DURATION_CLASS" : {
                "type" : "string",
                "description" : "Duration Class"
              },
              "PendingOrdersQuantity" : {
                "type" : "number",
                "description" : "Pending Orders Quantity"
              },
              "Instr_Name" : {
                "type" : "string",
                "description" : "Instr_Name"
              },
              "CommonReference" : {
                "type" : "string",
                "description" : "Common Reference"
              },
              "YTM" : {
                "type" : "number",
                "description" : "YTM"
              },
              "ParentInstrId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Parent Instrument Id"
              },
              "StrikePriceCcy" : {
                "type" : "string",
                "description" : "Strike Price Ccy"
              },
              "IORefNatBuy" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Reference Nature for Initiate Order (Buy)"
              },
              "STOCK_SECTOR_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Stock Sector ID"
              },
              "FXRate" : {
                "type" : "number",
                "description" : "FX Rate"
              },
              "IO_SECURITY_SELL_RIGHT" : {
                "type" : "boolean",
                "description" : "Right for Sell Order Security"
              },
              "lock_nature" : {
                "type" : "string",
                "description" : "Lock Nature of the position"
              },
              "STOCK_REGION_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Stock Region ID"
              },
              "IO_SUB_POS_NAT_2" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sub Position Nature 2"
              },
              "IO_SUB_POS_NAT_3" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sub Position Nature 3"
              },
              "Duration" : {
                "type" : "number",
                "description" : "Duration"
              },
              "IORefOperCode" : {
                "type" : "string",
                "description" : "Reference Operation Code for Initiate Order "
              },
              "RenewalType" : {
                "type" : "string",
                "description" : "Issuer"
              },
              "Weight" : {
                "type" : "number",
                "description" : "Weight"
              },
              "BeginDate" : {
                "type" : "string",
                "format" : "date",
                "description" : "BeginDate"
              },
              "TYPE_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Type ID"
              },
              "ProfitLossPercent" : {
                "type" : "number",
                "description" : "Profit / Loss Percent"
              },
              "Region" : {
                "type" : "string",
                "description" : "Region"
              },
              "ContractType" : {
                "type" : "string",
                "description" : "Contract Type"
              },
              "Instr_Denomination" : {
                "type" : "string",
                "description" : "Instr_Denomination"
              },
              "OneYearBefore" : {
                "type" : "string",
                "format" : "date",
                "description" : "One Year Before"
              },
              "AssetClass" : {
                "type" : "string",
                "description" : "Asset Class"
              },
              "DepositRenewRight" : {
                "type" : "boolean",
                "description" : "DepositRenewRight"
              },
              "OtcOrder" : {
                "type" : "string",
                "description" : "Otc Order"
              },
              "AssetClassCode" : {
                "type" : "string",
                "description" : "Asset Class code"
              },
              "CcyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Ccy Rank"
              },
              "Issuer" : {
                "type" : "string",
                "description" : "Issuer"
              },
              "CategoryWeight" : {
                "type" : "number",
                "description" : "Category Weight"
              },
              "RATING_CLASS" : {
                "type" : "string",
                "description" : "Rating Class"
              },
              "IO_SECURITY_BUY_RIGHT" : {
                "type" : "boolean",
                "description" : "Right for Buy Order Security"
              },
              "Ref_Ccy" : {
                "type" : "string",
                "description" : "Ref Ccy"
              },
              "MarketPrice" : {
                "type" : "number",
                "description" : "Market Price"
              },
              "CURRENCY_PAIR" : {
                "type" : "string",
                "description" : "Currency Pair"
              },
              "ProfitLoss" : {
                "type" : "number",
                "description" : "ProfitLoss"
              },
              "CostPrice" : {
                "type" : "number",
                "description" : "Cost Price"
              },
              "IODerivOrdSell" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Derivative Order for Initiate Order(Sell)"
              },
              "BOND_RATING_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Bond Rating ID"
              },
              "OTHERS_NATURE_E" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Other Nature"
              },
              "InstrId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Instr Id"
              },
              "FILTER" : {
                "type" : "boolean",
                "description" : "Filter"
              },
              "DepositCode" : {
                "type" : "string",
                "description" : "Deposit Code"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "StrikePrice" : {
                "type" : "number",
                "description" : "Strike Price"
              },
              "Sector" : {
                "type" : "string",
                "description" : "Sector"
              },
              "SelectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "Quantity" : {
                "type" : "number",
                "description" : "Quantity"
              },
              "MaturityDate" : {
                "type" : "string",
                "format" : "date",
                "description" : "Maturity Date"
              },
              "CcyClassCode" : {
                "type" : "string",
                "description" : "Ccy Class Code"
              },
              "DIVIDEND_PAYMENT_OPTION" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Dividend Payment Option"
              },
              "MV_AssetClass" : {
                "type" : "number",
                "description" : "MV Asset Class"
              },
              "Ccy" : {
                "type" : "string",
                "description" : "Ccy"
              },
              "taxLotF" : {
                "type" : "boolean",
                "description" : "Tax Lot Flag"
              },
              "CounterpartQty" : {
                "type" : "number",
                "description" : "Counterpart Quantity"
              }
            }
          }
        }
      }
    },
    "getPtfListAssetClassesSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Asset Classes",
          "items" : {
            "type" : "object",
            "properties" : {
              "PosCounterpartCcy" : {
                "type" : "string",
                "description" : "PosCounterpartCcy"
              },
              "AssetSectorFilter" : {
                "type" : "boolean",
                "description" : "Asset Sector Filter"
              },
              "MVAssetClass" : {
                "type" : "number",
                "description" : "Market Value Asset Class"
              },
              "MVAssetCurrency" : {
                "type" : "number",
                "description" : "Market Value Asset / Currency"
              },
              "AssetClassRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Asset Class Rank"
              },
              "AssetDurationBreak" : {
                "type" : "string",
                "description" : "Asset Duration Break"
              },
              "WeightAssetCurrency" : {
                "type" : "number",
                "description" : "Weight Asset / Currency"
              },
              "PLAssetCcyPair" : {
                "type" : "number",
                "description" : "P&L Asset / Ccy Pair"
              },
              "AssetRegionBreak" : {
                "type" : "string",
                "description" : "Asset Region Break"
              },
              "PosCcy" : {
                "type" : "string",
                "description" : "PosCcy"
              },
              "WeightAssetRegion" : {
                "type" : "number",
                "description" : "Weight Asset / Region"
              },
              "MVAssetDuration" : {
                "type" : "number",
                "description" : "Market Value Asset / Duration"
              },
              "AssetRatingBreak" : {
                "type" : "string",
                "description" : "Asset Rating Break"
              },
              "CcyPairID" : {
                "type" : "string",
                "description" : "Ccy Pair ID"
              },
              "AssetNatureFilter" : {
                "type" : "boolean",
                "description" : "Asset Nature Filter"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "PortfolioID"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ID"
              },
              "RegionID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Region ID"
              },
              "MVAssetRegion" : {
                "type" : "number",
                "description" : "Market Value Asset / Region"
              },
              "MVAssetMaturity" : {
                "type" : "number",
                "description" : "Market Value Asset / Maturity"
              },
              "WeightAssetMaturity" : {
                "type" : "number",
                "description" : "Weight Asset / Maturity"
              },
              "WeightAssetNature" : {
                "type" : "number",
                "description" : "Weight Asset / Nature"
              },
              "MaturityClass" : {
                "type" : "string",
                "description" : "Maturity Class"
              },
              "AssetRegionFilter" : {
                "type" : "boolean",
                "description" : "Asset Region Filter"
              },
              "WeightAssetSector" : {
                "type" : "number",
                "description" : "Weight Asset / Sector"
              },
              "AssetMaturityBreak" : {
                "type" : "string",
                "description" : "Asset Maturity Break"
              },
              "WeightAssetDuration" : {
                "type" : "number",
                "description" : "Weight Asset / Duration"
              },
              "PLAssetRating" : {
                "type" : "number",
                "description" : "P&L Asset / Rating"
              },
              "WeightAssetCcyPair" : {
                "type" : "number",
                "description" : "Weight Asset / Ccy Pair"
              },
              "PLAssetType" : {
                "type" : "number",
                "description" : "P&L Asset / Type"
              },
              "AssetRatingFilter" : {
                "type" : "boolean",
                "description" : "Asset Rating Filter"
              },
              "Region" : {
                "type" : "string",
                "description" : "Region"
              },
              "AssetNatureBreak" : {
                "type" : "string",
                "description" : "Asset Nature Break"
              },
              "PLAssetRegion" : {
                "type" : "number",
                "description" : "P&L Asset / Region"
              },
              "PortfolioCode" : {
                "type" : "string",
                "description" : "Portfolio"
              },
              "RatingClass" : {
                "type" : "string",
                "description" : "Rating Class"
              },
              "AssetTypeBreak" : {
                "type" : "string",
                "description" : "Asset Type Break"
              },
              "MaturityID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Maturity ID"
              },
              "TypeID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Type ID"
              },
              "WeightAssetType" : {
                "type" : "number",
                "description" : "Weight Asset / Type"
              },
              "MVAssetRating" : {
                "type" : "number",
                "description" : "Market Value Asset / Rating"
              },
              "PLAssetMaturity" : {
                "type" : "number",
                "description" : "P&L Asset / Maturity"
              },
              "CurrencyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Currency Rank"
              },
              "CurrencyCodif" : {
                "type" : "string",
                "description" : "Currency Codification"
              },
              "RegionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Region Rank"
              },
              "AssetCcyPairFilter" : {
                "type" : "boolean",
                "description" : "Asset Ccy Pair Filter"
              },
              "RatingID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Rating ID"
              },
              "NatureID" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Nature ID"
              },
              "DurationClass" : {
                "type" : "string",
                "description" : "Duration Class"
              },
              "PLAssetNature" : {
                "type" : "number",
                "description" : "P&L Asset / Nature"
              },
              "ProfitLoss" : {
                "type" : "number",
                "description" : "ProfitLoss"
              },
              "PLAssetDuration" : {
                "type" : "number",
                "description" : "P&L Asset / Duration"
              },
              "AssetMaturityFilter" : {
                "type" : "boolean",
                "description" : "Asset Maturity Filter"
              },
              "WeightAssetRating" : {
                "type" : "number",
                "description" : "Weight Asset / Rating"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MV Portfolio"
              },
              "MVAssetCcyPair" : {
                "type" : "number",
                "description" : "Market Value Asset / Ccy Pair"
              },
              "PLAssetSector" : {
                "type" : "number",
                "description" : "P&L Asset / Sector"
              },
              "PLAssetCurrency" : {
                "type" : "number",
                "description" : "P&L Asset / Currency"
              },
              "AssetCcyPairBreak" : {
                "type" : "string",
                "description" : "Asset Ccy Pari Break"
              },
              "SectorRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sector Rank"
              },
              "MVAssetSector" : {
                "type" : "number",
                "description" : "Market Value Asset / Sector"
              },
              "Nature" : {
                "type" : "string",
                "description" : "Nature"
              },
              "AssetTypeFilter" : {
                "type" : "boolean",
                "description" : "Asset Type Filter"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "AssetDurationFilter" : {
                "type" : "boolean",
                "description" : "Asset Duration Filter"
              },
              "Sector" : {
                "type" : "string",
                "description" : "Sector"
              },
              "SelectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "MaturityRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Maturity Rank"
              },
              "CurrencyClass" : {
                "type" : "string",
                "description" : "Ccy Class"
              },
              "MVAssetType" : {
                "type" : "number",
                "description" : "Market Value Asset / Type"
              },
              "AssetCurrencyBreak" : {
                "type" : "string",
                "description" : "Asset Currency Break"
              },
              "DurationRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Duration Rank"
              },
              "CurrencyID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Ccy ID"
              },
              "AssetCurrencyFilter" : {
                "type" : "boolean",
                "description" : "Asset Currency Filter"
              },
              "Type" : {
                "type" : "string",
                "description" : "Type"
              },
              "CcyPair" : {
                "type" : "string",
                "description" : "CcyPair"
              },
              "DurationID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Duration ID"
              },
              "AssetSectorBreak" : {
                "type" : "string",
                "description" : "Asset Sector Break"
              },
              "Ccy" : {
                "type" : "string",
                "description" : "Ccy"
              },
              "AcctFilter" : {
                "type" : "boolean",
                "description" : "Account Flag Filter"
              },
              "MVAssetNature" : {
                "type" : "number",
                "description" : "Market Value Asset / Nature"
              },
              "RatingRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rating Rank"
              },
              "SectorID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sector ID"
              },
              "SummaryDataFilter" : {
                "type" : "boolean",
                "description" : "Summary Data Filter"
              }
            }
          }
        }
      }
    },
    "getPtfListConsolidatedSummarySuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Consolidated Summary",
          "items" : {
            "type" : "object",
            "properties" : {
              "MVAssetClass" : {
                "type" : "number",
                "description" : "MVAssetClass"
              },
              "extBiMktValDrop" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiMktValDrop"
              },
              "ValuationCurrency" : {
                "type" : "string",
                "description" : "ValuationCurrency"
              },
              "WeightCcyClass" : {
                "type" : "number",
                "description" : "WeightCcyClass"
              },
              "custRoleE" : {
                "type" : "string",
                "description" : "custRoleE"
              },
              "thirdName" : {
                "type" : "string",
                "description" : "thirdName"
              },
              "AssetCode" : {
                "type" : "string",
                "description" : "Asset Denom"
              },
              "extTdMktValM" : {
                "type" : "number",
                "description" : "extTdMktValM"
              },
              "WeightAssetCurrency" : {
                "type" : "number",
                "description" : "Weight by Asset and Currency"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "client id for precomp data"
              },
              "extPtfHierLevel" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extPtfHierLevel"
              },
              "AssetRegionBreak" : {
                "type" : "string",
                "description" : "Asset Region Break"
              },
              "WeightAssetRegion" : {
                "type" : "number",
                "description" : "Weight by Asset and Region"
              },
              "extIpName" : {
                "type" : "string",
                "description" : "extIpName"
              },
              "UNIQUE_CCY_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_CCY_CLASS"
              },
              "UnrealCcyClass" : {
                "type" : "number",
                "description" : "UnrealCcyClass"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ptf id for precomp data"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Id (for calculation)"
              },
              "mgtBeginD" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "mgtBeginD"
              },
              "extBiCashPercent" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiCashPercent"
              },
              "extBiInvalidIp" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiInvalidIp"
              },
              "custParticpantPercentage" : {
                "type" : "number",
                "description" : "custParticpantPercen"
              },
              "extBiCstCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiCstCompliance"
              },
              "extCashPercent" : {
                "type" : "number",
                "description" : "extCashPercent"
              },
              "UNIQUE_REGION_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_REGION_CLASS"
              },
              "extRefCur" : {
                "type" : "string",
                "description" : "extRefCur"
              },
              "CcyClass" : {
                "type" : "string",
                "description" : "CcyClass"
              },
              "advisor_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "advisor id for precomp data"
              },
              "Weight" : {
                "type" : "number",
                "description" : "Weight"
              },
              "UnrealAssetClass" : {
                "type" : "number",
                "description" : "UnrealAssetClass"
              },
              "name" : {
                "type" : "string",
                "description" : "name"
              },
              "UniqueAssetCurrency" : {
                "type" : "boolean",
                "description" : "Unique Asset Currency"
              },
              "RegionClassCode" : {
                "type" : "string",
                "description" : "Region Class Code"
              },
              "extBiMainRiskCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiMainRiskCompliance"
              },
              "PLAssetRegion" : {
                "type" : "number",
                "description" : "P&L by Asset and Region"
              },
              "parentPortId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "parentPortId"
              },
              "extOneYearPtfRet" : {
                "type" : "number",
                "description" : "extOneYearPtfRet"
              },
              "extBiObjCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiObjCompliance"
              },
              "MVCcyClass" : {
                "type" : "number",
                "description" : "MVCcyClass"
              },
              "code" : {
                "type" : "string",
                "description" : "code"
              },
              "extBiIpPndVal" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiIpPndVal"
              },
              "AssetClassCode" : {
                "type" : "string",
                "description" : "Asset Class code"
              },
              "CcyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "CcyRank"
              },
              "extIpCurStatus" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extIpCurStatus"
              },
              "Total_PL" : {
                "type" : "number",
                "description" : "Total PL"
              },
              "UniqueAssetRegion" : {
                "type" : "boolean",
                "description" : "Unique Asset Region"
              },
              "MarketValuePos" : {
                "type" : "number",
                "description" : "Market ValuePos"
              },
              "CcyCodif" : {
                "type" : "string",
                "description" : "Ccy Codification"
              },
              "AssetRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "AssetRank"
              },
              "serviceTypeE" : {
                "type" : "string",
                "description" : "serviceTypeE"
              },
              "RegionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "RegionRank"
              },
              "extIpRiskLevelN" : {
                "type" : "number",
                "description" : "extIpRiskLevelN"
              },
              "RegionClass" : {
                "type" : "string",
                "description" : "RegionClass"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "manager id for precomp data"
              },
              "UnrealizedPL" : {
                "type" : "number",
                "description" : "UnrealizedPL"
              },
              "MVPortfolio" : {
                "type" : "number",
                "description" : "MVPortfolio"
              },
              "MVRegionClass" : {
                "type" : "number",
                "description" : "MVRegionClass"
              },
              "extBiGoalNotCompliant" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiGoalNotCompliant"
              },
              "PLAssetCurrency" : {
                "type" : "number",
                "description" : "P&L by Asset and Currency"
              },
              "thirdCode" : {
                "type" : "string",
                "description" : "thirdCode"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "MktvalAssetCurrency" : {
                "type" : "number",
                "description" : "Market value by Asset and Currency"
              },
              "UnrealRegionClass" : {
                "type" : "number",
                "description" : "UnrealRegionClass"
              },
              "extInvestProfileId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "extInvestProfileId"
              },
              "SelectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "extBiSaaCompliance" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiSaaCompliance"
              },
              "UNIQUE_PORTFOLIO" : {
                "type" : "boolean",
                "description" : "UNIQUE Portfolio"
              },
              "MktvalAssetRegion" : {
                "type" : "number",
                "description" : "Market value by Asset and Region"
              },
              "WeightRegionClass" : {
                "type" : "number",
                "description" : "WeightRegionClass"
              },
              "extOpenOrders" : {
                "type" : "boolean",
                "description" : "extOpenOrders"
              },
              "AssetCurrencyBreak" : {
                "type" : "string",
                "description" : "Asset Currency Break"
              },
              "UNIQUE_ASSET_CLASS" : {
                "type" : "boolean",
                "description" : "UNIQUE_ASSET_CLASS"
              },
              "extIpExpiryD" : {
                "type" : "string",
                "format" : "date-time",
                "description" : "extIpExpiryD"
              },
              "CcyClassCode" : {
                "type" : "string",
                "description" : "Ccy Class Code"
              },
              "WeightAssetClass" : {
                "type" : "number",
                "description" : "WeightAssetClass"
              },
              "Filter" : {
                "type" : "boolean",
                "description" : "Filter"
              },
              "Instrument" : {
                "type" : "string",
                "description" : "Instrument"
              },
              "extBiDaysOperation" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "extBiDaysOperation"
              },
              "SummaryDataFilter" : {
                "type" : "boolean",
                "description" : "Summary Data Filter"
              },
              "currencyCode" : {
                "type" : "string",
                "description" : "currencyCode"
              },
              "statusE" : {
                "type" : "string",
                "description" : "statusE"
              }
            }
          }
        }
      }
    },
    "getRecentOperationsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "PCK_TCIB_COMPCHK_OBJ2",
          "items" : {
            "type" : "object",
            "properties" : {
              "RANK5_N" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rank5"
              },
              "MarketSegmentFilter" : {
                "type" : "boolean",
                "description" : "Maket Segment Filter"
              },
              "QUANTITY" : {
                "type" : "number",
                "description" : "Quantity"
              },
              "NET_COST_VALUE" : {
                "type" : "number",
                "description" : "Net Cost Value"
              },
              "MKT_SEGMENT" : {
                "type" : "string",
                "description" : "Market segment / Instrument"
              },
              "OBJ_COMPLIANCE_INDICATOR" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Objective compliance indicator (for calculation)"
              },
              "ParentMarketSegment" : {
                "type" : "string",
                "description" : "Parent Market Segment"
              },
              "RANK1_N" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rank1"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Client Id"
              },
              "RANK3_N" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rank3"
              },
              "DisplayIndicator" : {
                "type" : "boolean",
                "description" : "Display Indicator"
              },
              "MAIN_STRATEGY" : {
                "type" : "boolean",
                "description" : "Main Strategy"
              },
              "SERVER_FILTER" : {
                "type" : "boolean",
                "description" : "SERVER_FILTER (to extract objectives, strategies and portfolios)"
              },
              "STRATEGY_FULL_NAME" : {
                "type" : "string",
                "description" : "Strategy translated name"
              },
              "CURRENT_QUOTE" : {
                "type" : "number",
                "description" : "Current Quote"
              },
              "Firstlevel" : {
                "type" : "boolean",
                "description" : "First level"
              },
              "ModelConstrElement" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Modelling Constraint Element"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Portfolio ID"
              },
              "OBJ_SEVERITY_INDICATOR" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Objective severity indicator (for calculation)"
              },
              "ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "ID"
              },
              "PersonalisedStrategy" : {
                "type" : "boolean",
                "description" : "Personalised Strategy"
              },
              "MarketSegmentID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Maket Segment ID"
              },
              "OBJ_ACTUAL_WEIGHT" : {
                "type" : "number",
                "description" : "Actual weight used to compare with objective"
              },
              "INSTR_CODE" : {
                "type" : "string",
                "description" : "Instrument Code"
              },
              "OBJECTIVE_WEIGHT" : {
                "type" : "number",
                "description" : "Objective weight"
              },
              "SORT_STANDARD_MS" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Sort Standard MS"
              },
              "OriginalObjectiveWeight" : {
                "type" : "number",
                "description" : "Original Objective weight"
              },
              "OBJ_GAP" : {
                "type" : "number",
                "description" : "Difference between the actual weight and the objective, in absolute value"
              },
              "PORTFOLIO_CODE" : {
                "type" : "string",
                "description" : "Portfolio code"
              },
              "OBJ_SEVERITY_VALUE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Severity defined on objectives (for calculation)"
              },
              "REF_CURRENCY" : {
                "type" : "string",
                "description" : "Reference currency of the market value"
              },
              "Lastlevel" : {
                "type" : "boolean",
                "description" : "Last level"
              },
              "WEIGHT_STANDARD_MS" : {
                "type" : "number",
                "description" : "Weight standard MS"
              },
              "PARENT_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "PARENT_ID"
              },
              "MIN_WEIGHT" : {
                "type" : "number",
                "description" : "Minimum weight"
              },
              "INSTR_FILTER_STRAT" : {
                "type" : "boolean",
                "description" : "INSTR_FILTER_STRAT"
              },
              "MARGIN" : {
                "type" : "number",
                "description" : "Margin"
              },
              "PROFIT_LOSS" : {
                "type" : "number",
                "description" : "Profit / Loss"
              },
              "RiskOrigin" : {
                "type" : "string",
                "description" : "Instrument name at origin of the splitting"
              },
              "strategy_id" : {
                "type" : "string",
                "description" : "Head allocation strategy name"
              },
              "QUOTE_CURRENCY" : {
                "type" : "string",
                "description" : "Quote Currency"
              },
              "PORTFOLIO_FILTER" : {
                "type" : "boolean",
                "description" : "PORTFOLIO_FILTER (for calculation: to hide)"
              },
              "INSTR_DENOM" : {
                "type" : "string",
                "description" : "Instrument"
              },
              "AlignedPortfolio" : {
                "type" : "boolean",
                "description" : "Aligned Portfolio"
              },
              "AccountedPosition" : {
                "type" : "boolean",
                "description" : "Accounted Position"
              },
              "MKT_VAL" : {
                "type" : "number",
                "description" : "Market value"
              },
              "CHECK_STRAT" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Check objective compliance (for calculation)"
              },
              "SUB_SEVERITY_INDICATOR" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Severity indicator of market segment direct sub-level (for calculation)"
              },
              "INSTR_FILTER_PTF" : {
                "type" : "boolean",
                "description" : "INSTR_FILTER_PTF"
              },
              "AllocationConstraint" : {
                "type" : "boolean",
                "description" : "Allocation Constraint"
              },
              "LEVEL_N" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Level"
              },
              "TOP_MKT_SEGMENT_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Top Market Segment ID"
              },
              "SUB_COMPLIANCE_INDICATOR" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Compliance indicator of market segment direct sub-level"
              },
              "RANK2_N" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rank2"
              },
              "RANK4_N" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Rank4"
              },
              "instr_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Instrument id for precomputed data"
              },
              "TOP_MKT_SEGMENT" : {
                "type" : "string",
                "description" : "Top Market Segment"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Portfolio name"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Manager ID"
              },
              "RiskNature" : {
                "type" : "string",
                "description" : "Instrument Risk Nature at origin of the splitting"
              },
              "MAX_WEIGHT" : {
                "type" : "number",
                "description" : "Maximum weight"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sequence number for technical purpose in WUI display"
              },
              "SORT1" : {
                "type" : "string",
                "description" : "Sort Order 1"
              },
              "STRATEGY_FILTER" : {
                "type" : "boolean",
                "description" : "STRATEGY_FILTER (to extract objectives and strategies)"
              },
              "SUB_CHECK_STRAT" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Check objectives compliance of market segment direct sub-level (for calculation)"
              },
              "ParentMarketSegmentWeight" : {
                "type" : "number",
                "description" : "Parent Market Segment Weight"
              },
              "HEAD_FILTER" : {
                "type" : "boolean",
                "description" : "HEAD_FILTER (to extract head strategies)"
              },
              "AMT_TO_INV" : {
                "type" : "number",
                "description" : "Amount to invest, signed value according to buy or sell"
              },
              "UNIQUE_STANDARD_MS" : {
                "type" : "boolean",
                "description" : "Unique Standard MS"
              },
              "STANDARD_MKT_SEG" : {
                "type" : "string",
                "description" : "Standard Market Segment"
              },
              "NO_LINK_FILTER" : {
                "type" : "boolean",
                "description" : "NO_LINK_FILTER (to extract positions when no strategy links)"
              },
              "investment_profile_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Investment Profile id for precomputed data"
              }
            }
          }
        }
      }
    },
    "getRiskIndicatorsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Risk Indicators",
          "items" : {
            "type" : "object",
            "properties" : {
              "VOLAT_R_BM" : {
                "type" : "number",
                "description" : "Volatility of the benchmark's return"
              },
              "OVER_UNDER_PERFORMANCE" : {
                "type" : "number",
                "description" : "Over/under performance of the portfolio compared to the benchmark"
              },
              "FINAL_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Final date"
              },
              "RISK_FREE_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Risk Free translated name"
              },
              "TAXES" : {
                "type" : "number",
                "description" : "Taxes"
              },
              "AVERAGE_R_PF" : {
                "type" : "number",
                "description" : "Average return of the portfolio"
              },
              "FEES" : {
                "type" : "number",
                "description" : "Fees"
              },
              "client_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "client id for precomp data"
              },
              "FLOW" : {
                "type" : "number",
                "description" : "Flow"
              },
              "instr_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "intrument_id"
              },
              "TREYNOR" : {
                "type" : "number",
                "description" : "Treynor ratio of the portfolio"
              },
              "PORTFOLIO_NAME" : {
                "type" : "string",
                "description" : "Portfolio name"
              },
              "manager_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "manager id for precomp data"
              },
              "STRATEGY_FULL_NAME" : {
                "type" : "string",
                "description" : "Strategy translated name"
              },
              "SHARPE_PF" : {
                "type" : "number",
                "description" : "Sharpe ratio of the portfolio"
              },
              "MEAN_CAPITAL" : {
                "type" : "number",
                "description" : "Mean capital"
              },
              "AVERAGE_R_BM" : {
                "type" : "number",
                "description" : "Average return of the benchmark"
              },
              "GLOBAL_PERIOD_FILTER" : {
                "type" : "boolean",
                "description" : "GLOBAL_PERIOD_FILTER (to extract global period)"
              },
              "portfolio_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Portfolio id for precomputed data"
              },
              "GROSS_RETURN" : {
                "type" : "number",
                "description" : "Gross return of the portfolio"
              },
              "RISK_FREE_INSTR" : {
                "type" : "string",
                "description" : "Risk Free translated name"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "id (Calculation)"
              },
              "INITIAL_DATE" : {
                "type" : "string",
                "format" : "date",
                "description" : "Initial date"
              },
              "STRATEGY_CODE" : {
                "type" : "string",
                "description" : "Strategy code"
              },
              "BENCHMARK_ID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Benchmark translated name"
              },
              "JENSEN" : {
                "type" : "number",
                "description" : "Jensen's alpha of the portfolio"
              },
              "INSTR_CODE" : {
                "type" : "string",
                "description" : "Code of instrument"
              },
              "SHARPE_BM" : {
                "type" : "number",
                "description" : "Sharpe ratio of the benchmark"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "BENCHMARK_RETURN" : {
                "type" : "number",
                "description" : "Return of the benchmark"
              },
              "PORTFOLIO_CODE" : {
                "type" : "string",
                "description" : "Portfolio code"
              },
              "REF_CURRENCY" : {
                "type" : "string",
                "description" : "Reference currency"
              },
              "VOLAT_R_PF" : {
                "type" : "number",
                "description" : "Volatility of the portfolio's return"
              },
              "FINAL_MARKET_VALUE" : {
                "type" : "number",
                "description" : "Market value at the final date"
              },
              "BETA" : {
                "type" : "number",
                "description" : "Beta of the portfolio"
              },
              "BENCHMARK_FULL_NAME" : {
                "type" : "string",
                "description" : "Benchmark translated name"
              },
              "INFORMATION_RATIO" : {
                "type" : "number",
                "description" : "Information Ratio"
              },
              "PERIOD_DISPLAY" : {
                "type" : "string",
                "description" : "Period"
              },
              "NET_RETURN" : {
                "type" : "number",
                "description" : "Net return of the porftfolio"
              },
              "PROFIT_LOSS" : {
                "type" : "number",
                "description" : "Profit and loss per period"
              },
              "TRACK_ERROR" : {
                "type" : "number",
                "description" : "Tracking Error"
              },
              "VALUE_AT_RISK" : {
                "type" : "number",
                "description" : "Value at risk"
              },
              "INITIAL_MARKET_VALUE" : {
                "type" : "number",
                "description" : "Market value at the initial date"
              },
              "INSTR_DENOM" : {
                "type" : "string",
                "description" : "Instrument standardised name"
              }
            }
          }
        }
      }
    },
    "getRiskPerfsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Performance measures on Portfolio and its positions",
          "items" : {
            "type" : "object",
            "properties" : {
              "totalFilter" : {
                "type" : "boolean",
                "description" : "Total filter"
              },
              "contributionP" : {
                "type" : "number",
                "description" : "Contribution"
              },
              "instrumentName" : {
                "type" : "string",
                "description" : "Name of instrument"
              },
              "marketValueCurrency" : {
                "type" : "string",
                "description" : "Reference currency"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "seqno"
              },
              "marketValueM" : {
                "type" : "number",
                "description" : "Instrument Market Value"
              },
              "instrId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Id of instrument"
              },
              "returnP" : {
                "type" : "number",
                "description" : "Return"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "id"
              },
              "globalFilter" : {
                "type" : "boolean",
                "description" : "Global Filter"
              },
              "instrumentFilter" : {
                "type" : "boolean",
                "description" : "Instrument filter"
              },
              "instrumentCode" : {
                "type" : "string",
                "description" : "Code of instrument"
              }
            }
          }
        }
      }
    },
    "getStandingInstructionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderResponse"
        },
        "body" : {
          "$ref" : "#/definitions/StandingInstruction"
        }
      }
    },
    "getValuationSearchAggregationsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ValuationSearchAggregations"
          }
        }
      }
    },
    "getValuationSearchDetailsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ValuationSearchDetails"
          }
        }
      }
    },
    "gethierarchySuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "PCK_TCIB_PTF_HIER",
          "items" : {
            "type" : "object",
            "properties" : {
              "code" : {
                "type" : "string",
                "description" : "Code"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "clientCode" : {
                "type" : "string",
                "description" : "Client code"
              },
              "name" : {
                "type" : "string",
                "description" : "Name"
              },
              "id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Portfolio ID"
              },
              "parentId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Parent Portfolio ID"
              }
            }
          }
        }
      }
    },
    "getrestrictionsSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "INVESTMENT RESTRICTIONS FOR ROBO ADVISOR",
          "items" : {
            "type" : "object",
            "properties" : {
              "seqno" : {
                "type" : "integer",
                "format" : "int64"
              },
              "EditWhiteList" : {
                "type" : "boolean",
                "description" : "Edit White List Filter"
              },
              "ServerFilter" : {
                "type" : "boolean",
                "description" : "Server Filter"
              },
              "InstrumentDenomination" : {
                "type" : "string",
                "description" : "Instrument Denomination"
              },
              "QuantityToKeep" : {
                "type" : "number",
                "description" : "Quantity to keep"
              },
              "CurrentQuantity" : {
                "type" : "number",
                "description" : "Current Quantity"
              },
              "BlackList" : {
                "type" : "boolean",
                "description" : "Black List Filter"
              },
              "ViewWhiteList" : {
                "type" : "boolean",
                "description" : "View White List Filter"
              },
              "InstrumentID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Instrument ID"
              },
              "Weight" : {
                "type" : "number",
                "description" : "Weight"
              },
              "MarketValue" : {
                "type" : "number",
                "description" : "Market Value"
              },
              "InstrumentISIN" : {
                "type" : "string",
                "description" : "Instrument ISIN"
              },
              "InstrumentCode" : {
                "type" : "string",
                "description" : "Instrument Code"
              },
              "Currency" : {
                "type" : "string",
                "description" : "Currency"
              },
              "ModelConstrElementID" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Modelling Constraint Element ID"
              }
            }
          }
        }
      }
    },
    "getriskChecksSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderListResponse"
        },
        "body" : {
          "type" : "array",
          "description" : "Risk measures on Portfolio and its positions",
          "items" : {
            "type" : "object",
            "properties" : {
              "mainRiskObectiveP" : {
                "type" : "number",
                "description" : "Risk Objective"
              },
              "weightN" : {
                "type" : "number",
                "description" : "Position Weight"
              },
              "selectedLanguage" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Selected Language"
              },
              "marketValueCurrency" : {
                "type" : "string",
                "description" : "ValuationCurrency"
              },
              "riskMeasureP" : {
                "type" : "number",
                "description" : "Risk measure Position"
              },
              "regionClass" : {
                "type" : "string",
                "description" : "Region Class"
              },
              "uniqueCurrencyClass" : {
                "type" : "boolean",
                "description" : "Unique Currency Class"
              },
              "uniqueAssetClass" : {
                "type" : "boolean",
                "description" : "Unique Asset Class"
              },
              "serverFilter" : {
                "type" : "boolean",
                "description" : "Server Filter"
              },
              "instrId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Instr "
              },
              "instrName" : {
                "type" : "string",
                "description" : "Instr Name"
              },
              "disp_parent_ext_strat_elem_id" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Disp Parent"
              },
              "contribAssetClass" : {
                "type" : "number",
                "description" : "Asset Class contribution"
              },
              "marketValueCurrencyClass" : {
                "type" : "number",
                "description" : "Market Value Currency Class"
              },
              "mainRiskMaxP" : {
                "type" : "number",
                "description" : "Risk Objective Max"
              },
              "riskMeasureStatusE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Risk status Position"
              },
              "marketValueAssetClass" : {
                "type" : "number",
                "description" : "MVAssetClass"
              },
              "currencyCodif" : {
                "type" : "string",
                "description" : "Currency Codification"
              },
              "marketValueM" : {
                "type" : "number",
                "description" : "Market Value "
              },
              "mainRiskPortfolioMeasureP" : {
                "type" : "number",
                "description" : "Risk measure"
              },
              "assetRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "AssetRank"
              },
              "mainRiskIndicatorL" : {
                "type" : "string",
                "description" : "Main risk Indicator"
              },
              "regionRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Region Rank"
              },
              "instrumentLevel" : {
                "type" : "boolean",
                "description" : "Instr level"
              },
              "mainRiskMinP" : {
                "type" : "number",
                "description" : "Risk Objective Min"
              },
              "instrCode" : {
                "type" : "string",
                "description" : "Instr Code"
              },
              "mainRiskIndicatorE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Main risk Indicator"
              },
              "assetCode" : {
                "type" : "string",
                "description" : "Asset Denom"
              },
              "marketValueRegionClass" : {
                "type" : "number",
                "description" : "Market Vlaue RegionClass"
              },
              "seqno" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Sequence number for technical purpose in WUI display"
              },
              "mainRiskPtfMeasureStatusE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Risk measure - Calculation Status"
              },
              "uniqueRegionClass" : {
                "type" : "boolean",
                "description" : "Unique Region Class"
              },
              "portfolioLevel" : {
                "type" : "boolean",
                "description" : "Portfolio Level"
              },
              "currencyClass" : {
                "type" : "string",
                "description" : "Currency CcyClass"
              },
              "contribCurrencyClass" : {
                "type" : "number",
                "description" : "Currency Class contribution"
              },
              "mainRiskPtfMeasureMessage" : {
                "type" : "string",
                "description" : "Risk measure - Error Message"
              },
              "rowOfId" : {
                "type" : "integer",
                "format" : "int64",
                "description" : "Row of Id"
              },
              "riskMeasureMessage" : {
                "type" : "string",
                "description" : "Risk message Position"
              },
              "contributionP" : {
                "type" : "number",
                "description" : "Contribution"
              },
              "contribRegionClass" : {
                "type" : "number",
                "description" : "RegionClass contribution"
              },
              "currencyRank" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Currency Rank"
              },
              "mainRiskComplianceE" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "Risk Compliance"
              },
              "mainRiskPtfMeasureStatusL" : {
                "type" : "string",
                "description" : "Risk measure - Calculation Status"
              }
            }
          }
        }
      }
    },
    "updateFreeDepositHistoInput" : {
      "type" : "object",
      "required" : [ "amountM", "currencyCode", "investmentD", "natureE", "planDefinitionCode", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE" ],
      "properties" : {
        "amountM" : {
          "type" : "number",
          "description" : "Amount of the free deposit."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the free deposit must be transferred to. This attribute is not a link to the instrument entity in order to support account not present in FOPM but available in the back-office."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Currency of the deposit."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity.\r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the deposit."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Nature of the deposit.",
          "enum" : [ "None", "Initial deposit", "Free deposit" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Definition of plan related to the deposit."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Cash account that is debited for the deposit."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Portfolio of the cash account that is debited for the deposit."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        }
      }
    },
    "updateFreeDepositHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/FreeDepositHistoWithPermValues"
        }
      }
    },
    "updatePlanDefinitionInput" : {
      "type" : "object",
      "required" : [ "code", "dataSecuProfId", "name", "natureE", "objectiveNatureE", "portfolioCode", "statusE", "thirdPartyCode" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Code of the Plan Definition."
        },
        "dataSecuProfId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Provides a reference to the security profile to which the occurrence belongs. This mandatory reference controls user access to the occurrence."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the Plan Definition."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the Plan Definition."
        },
        "natureE" : {
          "type" : "string",
          "description" : "Provides the nature of the Plan Definition.",
          "enum" : [ "None", "Investment Plan", "Savings Plan", "Retirement Plan", "Education Plan", "Life Insurance Plan", "Systematic Investment Plan" ]
        },
        "objectiveNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the objective of the plan.",
          "enum" : [ "Free Amount", "Invest Amount", "Period Amount", "Objective Amount" ]
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio that is linked to the Plan Definition. A portfolio can have only one valid plan at a time."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the Plan Definition.",
          "enum" : [ "Cancelled", "In Progress", "To validate", "Validated", "Rejected", "Suspended", "Deactivated", "Closed" ]
        },
        "thirdPartyCode" : {
          "type" : "string",
          "description" : "Identifies the client for which the financial plan is created."
        },
        "validationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of validation for the Plan Definition."
        }
      }
    },
    "updatePlanDefinitionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanDefinitionWithPermValues"
        }
      }
    },
    "updatePlanInvestDateInput" : {
      "type" : "object",
      "required" : [ "investmentD", "planInvestParamHistoId", "statusE" ],
      "properties" : {
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the record."
        },
        "eventCode" : {
          "type" : "string",
          "description" : "Indicates the reference of the standing instruction related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event code set as the standing instruction used to generate the orders.\r\n\r\nNote that should the Mutual Fund Systematic plan have more than one standing instruction, the first one is used to set the event code."
        },
        "eventNumberN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Indicates the date related to a financial plan investment.\r\n\r\nOnce the event generation function is run on a financial plan, it creates the necessary plan investment dates, corresponding to the different investments to do based on the characteristics of the plan and its standing instruction. Each of these plan investment date will have its event number set as investment plan date, with the format YYYYMMDD, for example 20190201 a for a plan investment date on February 1st 2019."
        },
        "investmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the investment."
        },
        "planInvestParamHistoId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Identifies the Plan Investment Parameter History related to the plan investment date."
        },
        "retryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the retry number related to a plan investment.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed. \r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the investment.",
          "enum" : [ "Untreated", "Treated", "Cancelled", "Success", "Failed", "Retry candidate", "Retry treated", "Retry cancelled", "Retry success", "Retry failed" ]
        }
      }
    },
    "updatePlanInvestDateSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanInvestDateWithPermValues"
        }
      }
    },
    "updatePlanInvestParamHistoInput" : {
      "type" : "object",
      "required" : [ "beginD", "endOfMonthConvE", "genCashOpF", "investAcctCode", "investFreqUnitE", "investmentDayE", "planDefinitionCode", "retryFrequencyUnitE", "transferFromAcctCode", "transferFromPortfolioCode", "updAmtToCashE", "updAmtToObjectiveE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan investment parameter."
        },
        "counterpartAccountC" : {
          "type" : "string",
          "description" : "Account where the recurrent deposit must be transferred from. This attribute is not a link to the instrument entity in order to support accounts not present in FOPM but available in the back-office."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan investment parameter."
        },
        "endOfMonthConvE" : {
          "type" : "string",
          "description" : "Provides the ability to manage the real last day of the month (i.e., 30th or 31st depending on the month).",
          "enum" : [ "<None>", "Last", "Same", "Last 360" ]
        },
        "firstInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the first investment date defined for the financial plan."
        },
        "genCashOpF" : {
          "type" : "boolean",
          "description" : "Manages the ability to specify whether the cash transfer operation from the debited account has to be created."
        },
        "investAcctCode" : {
          "type" : "string",
          "description" : "Identifies the account where the cash is reserved and the one where the security investment will be settled."
        },
        "investFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment."
        },
        "investFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan investment parameter that are used to specify the date of investment.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "investmentDayE" : {
          "type" : "string",
          "description" : "Provides the day in a month on which the investment is done.",
          "enum" : [ "None", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" ]
        },
        "lastInvestmentD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the last investment date defined for the financial plan. This date is set by default value and used only for information purposes, no processes are linked to this date."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxInvestAmtM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to invest. It manages the ability to cap the amount to invest mainly when, for instance, there are missing payments or the objective amount has been updated."
        },
        "maxRetryN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the maximum number of order retries before an order cycle is skipped.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "nextInvestD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the next investment date calculated for the financial plan."
        },
        "orderCyclesN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the number of cycles required for the plan. This number is then used to calculate, by default value, the plan end date.\r\n\r\nLetâ€™s take the following example: a Mutual Fund Systematic Plan starts on February 14th 2018, with a monthly frequency, investing every 20th of each month.\r\n\r\nThe first investment date will be defaulted as February 20th 2018.\r\n\r\nShould the user enters the number of cycles as 12 (meaning investing for 12 months), the end date will be defaulted as January 20th 2019.\r\n\r\nThe 12 investment dates would be:\r\n1 - 20.02.2018\r\n2 - 20.03.2018\r\n3 - 20.04.2018\r\n4 - 20.05.2018\r\n5 - 20.06.2018\r\n6 - 20.07.2018\r\n7 - 20.08.2018\r\n8 - 20.09.2018\r\n9 - 20.10.2018\r\n10 - 20.11.2018\r\n11 - 20.12.2018\r\n12 - 20.01.2019"
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan investment parameter."
        },
        "retryFrequencyN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency number for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency number must be used in conjunction with the retry frequency unit (retry_frequency_unit_e).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism."
        },
        "retryFrequencyUnitE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the frequency unit for each order retry.\r\n\r\nAn order retry is a new order creation from the event generation function once a plan investment order has failed.\r\n\r\nThe retry frequency unit must be used in conjunction with the retry frequency number (retry_frequency_n).\r\n\r\nFor example, should you want to set up a Mutual Fund Systematic Plan retry of failed orders each 2 days, the frequency number (retry_frequency_n) must set to 2, and the retry frequency unit (retry_frequency_unit_e) to 1 (day).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan retry mechanism.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Half-year", "Year" ]
        },
        "standingOrderExternalRef" : {
          "type" : "string",
          "description" : "Provides the external reference to the standing order.\r\nThis attribute is used to track the standing order saved in the external tool that manages all the cash transfers."
        },
        "transferFromAcctCode" : {
          "type" : "string",
          "description" : "Identifies the cash account that is debited for the investment."
        },
        "transferFromPortfolioCode" : {
          "type" : "string",
          "description" : "Identifies the portfolio of the cash account that is debited for the investment."
        },
        "updAmtToCashE" : {
          "type" : "string",
          "description" : "Provides the amount that can be updated depending on the available cash in the linked account.",
          "enum" : [ "Always Invest", "Skip Invest", "Invest all available cash" ]
        },
        "updAmtToObjectiveE" : {
          "type" : "string",
          "description" : "Provides the amount of the investment that can be updated to reach the minimum or the maximum amount defined at the plan objective level or the plan rule level.\r\n\r\nFor plan with objective nature set to \"Free Amount\", \"Period Amount\", or \"Objective Amount\", Update Amount to Objective should be set to No.\r\n\r\nFor plan with objective nature set to  \"Invest Amount\",  Update Amount to Objective should be set to No or Reach min.",
          "enum" : [ "No", "Reach Min Amount", "Reach Max Amount" ]
        }
      }
    },
    "updatePlanInvestParamHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanInvestParamHistoWithPermValues"
        }
      }
    },
    "updatePlanObjectiveHistoInput" : {
      "type" : "object",
      "required" : [ "amountNatureE", "beginD", "currencyCode", "maxAmtIndexRuleE", "minAmtIndexRuleE", "periodFreqUnitE", "planDefinitionCode" ],
      "properties" : {
        "amountNatureE" : {
          "type" : "string",
          "description" : "Provides the nature of the amounts defined for the plan objective.",
          "enum" : [ "Invested Amount", "Market Value" ]
        },
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of the plan objective."
        },
        "creationD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the creation date of the plan objective."
        },
        "currencyCode" : {
          "type" : "string",
          "description" : "Identifies the currency of the amounts of the plan objective."
        },
        "expectedAmountM" : {
          "type" : "number",
          "description" : "Provides the expected amount the user wants to achieve at the end of the plan. This amount is used only for information and is never used by the Event Generation function to compute the amount to invest."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "maxAmountM" : {
          "type" : "number",
          "description" : "Provides the maximum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Amount Objective\", the maximum amount is not necessary."
        },
        "maxAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the maximum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "maxAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the maximum amount."
        },
        "minAmountM" : {
          "type" : "number",
          "description" : "Provides the minimum amount to achieve for the plan objective.\r\n\r\nFor plan with objective nature set to \"Invest Amount\", the minimum amount is mandatory and must be defined  either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Free Amount\", the maximum amount is not necessary."
        },
        "minAmtIndexRuleE" : {
          "type" : "string",
          "description" : "Provides the indexation rule of the minimum amount.",
          "enum" : [ "None", "Amount", "Percent", "Amount define by Rule" ]
        },
        "minAmtIndexValueN" : {
          "type" : "number",
          "description" : "Provides the indexation value of the minimum amount."
        },
        "objectiveD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of the plan objective."
        },
        "periodFreqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal."
        },
        "periodFreqUnitE" : {
          "type" : "string",
          "description" : "Provides the period frequency unit (e.g., monthly, yearly) and the period frequency number of the plan objective that are used to specify the time-lapse to achieve the goal.\r\n\r\nFor plan with objective nature set to \"Period Amount\", the period frequency is mandatory and must be defined either in the plan objective or in the plan rule.\r\n\r\nFor plan with objective nature set to \"Invest Amount\" or \"Free Amount\", the period frequency is not necessary.",
          "enum" : [ "<None>", "Day", "Business Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition related to the plan objective."
        }
      }
    },
    "updatePlanObjectiveHistoSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanObjectiveHistoWithPermValues"
        }
      }
    },
    "updatePlanSessionInput" : {
      "type" : "object",
      "required" : [ "planDefinitionCode", "portfolioCode" ],
      "properties" : {
        "calcFromD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Specifies the starting date in financial functions that return financial data calculated between two dates (Journal, Operation History, Performance and Return).\r\nFor single date functions (Valuation, Strategy Check) enter the date for which you want the function to run.\r\nValuation function does not retrieve prices in the future even if the entered date is greater than the current date."
        },
        "calcTillD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date used as the end date in financial functions that return financial data calculated between two dates. The financial functions in question are Journal, Operation History, Performance and Return."
        },
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the entity. \r\n\r\nAs for all ids in the database, this attribute is technical and will normally never be seen by the user. This field is mandatory and is computed by the system."
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Indicates the plan to use in conjunction with the Generation Nature \"Create Session & Check\" (event_gen_nat_e = 10 - Create Session & Check).\r\n\r\nThis allows launching an event generation function in a simulation mode with a working Mutual Fund Systematic plan definition set as parameter. The goal is to simulate the generation of the first order cycle of a specific plan, and only for this plan.\r\n\r\nThe result of the event generation simulation mode, meaning a set of buy orders, are included in a session on which a PTCC is run, with potential cases raised.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about plan simulation.\r\n\r\nNote that the plan definition field is not displayed in the default domain GUI screen; the reason being that it is currently only used in the WealthSuite Channels for Mutual Fund Systematic Plan module."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "This attribute is used only for the Web Packaging.\r\n\r\nPortfolio set in the domain context when the portfolio dimension is a single portfolio."
        }
      }
    },
    "updatePlanSessionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/PlanSessionWithPermValues"
        }
      }
    },
    "updateStandingInstructionInput" : {
      "type" : "object",
      "required" : [ "beginD", "code", "dayFriF", "dayMonF", "daySatF", "daySunF", "dayThuF", "dayTueF", "dayWedF", "executionUnitE", "executionUnitRankE", "freqUnitE", "frequencyChoiceE", "instrCode", "name", "opAmountCurrencyCode", "opNatE", "orderFeeCurrCode", "orderFeeE", "paymentOptionE", "planDefinitionCode", "portfolioCode", "statusE" ],
      "properties" : {
        "beginD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the begin date of a standing instruction. This date is part of the standing instruction primary key.\r\n\r\nThis information is combined with the 'end date' to define the validity period of the standing instruction. It also defines the date of the future generated orders:\r\n- The first generated order will be on exactly this date.\r\n- The date of the following orders will be calculated from this date.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "code" : {
          "type" : "string",
          "description" : "Provides the unique business identifier of the Standing Instruction and is displayed to the end user. This field is mandatory."
        },
        "commentC" : {
          "type" : "string",
          "description" : "Optional text field that can store user comments."
        },
        "dayFriF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Friday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayMonF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Monday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySatF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Saturday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "daySunF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Sunday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayThuF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Thursday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayTueF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Tuesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "dayWedF" : {
          "type" : "boolean",
          "description" : "Specifies whether \"Wednesday\" is the day when the order is generated.\r\n\r\nThis flag is only used with frequency unit \"Week\"."
        },
        "denom" : {
          "type" : "string",
          "description" : "Provides the denomination of the standing instruction; the denomination might not necessarily be unique. This field is optional."
        },
        "endD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the end date of a standing instruction. This parameter is optional.\r\n\r\nThis information is combined with the 'begin date' to define the validity period of the standing instruction. No end date provided means no end to the standing instruction."
        },
        "executionDayN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the day of the month when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Specific Day\"."
        },
        "executionMonthN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the month when the order is generated.\r\n\r\nOnly used with frequency unit \"Year\"."
        },
        "executionUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit of execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "executionUnitRankE" : {
          "type" : "string",
          "description" : "Specifies the rank of unit execution for calculating the date when the order is generated.\r\n\r\nOnly used with frequency units \"Month\" and \"Year\" with a frequency choice \"Calculated Day\".",
          "enum" : [ "None" ]
        },
        "freqN" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Specifies the frequency with which the order is generated and defines the number of standing instruction frequency units (see attribute freq_unit_e ) between two occurrences.\r\nThis is a mandatory field.\r\n\r\nExamples:\r\nbegin date = \"15/04/2009\" with a frequency unit = \"Day\" and frequency = 1\r\n=> dates of generation, 15/04/2009, 16/04/2009, 17/04/2009, ....\r\n\r\nbegin date = \"15/01/2009\" with a frequency unit = \"Month\" and frequency = 3\r\n=> dates of generation, 15/01/2009, 15/04/2009, 15/07/2009, ....\r\n\r\nbegin date = \"30/04/2009\" with a frequency unit = \"Month\" and frequency = 1\r\n=> dates of generation, 30/04/2009, 31/05/2009, 30/06/2009, ....\r\nIn this case, a begin date equal to an end of month associated with a frequency unit \"Month\" leads only to dates equal at end of month."
        },
        "freqUnitE" : {
          "type" : "string",
          "description" : "Specifies the unit that defines the frequency with which the order is generated. This field is mandatory.\r\n\r\nOnly the following frequencies are supported:\r\n- Day\r\n- Month\r\n- Year",
          "enum" : [ "<None>", "Day", "Week", "Month", "Quarter", "Semester", "Year" ]
        },
        "frequencyChoiceE" : {
          "type" : "string",
          "description" : "Defines the frequency choice.\r\n\r\nThis choice depends on the frequency unit:\r\n\r\nFor unit \"Days\"\r\n- 1 = every days\r\n- 2 = every weekday\r\n\r\nFor unit \"Month\"\r\n- 1 = specific day\r\n- 2 = calculated day\r\n\r\nFor unit \"Year\"\r\n- 1 = specific day\r\n- 2 = calculated day",
          "enum" : [ "None" ]
        },
        "instrCode" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "instrDenom" : {
          "type" : "string",
          "description" : "Reference to the instrument that will be present in the generated order. Any nature of instrument can be referenced. This field is mandatory."
        },
        "lastEventGenerateD" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Provides the date of the last order generation of the occurrence by the Event Generation function."
        },
        "lastModifD" : {
          "type" : "string",
          "format" : "date-time"
        },
        "minInvestAmtM" : {
          "type" : "number",
          "description" : "The minimum amount to be invested for the current instruction in the context of a financial planning.\r\n\r\nIf the calculated amount to invest is greater than or equal to this minimum amount to invest, the system creates an operation using the calculated amount to invest."
        },
        "name" : {
          "type" : "string",
          "description" : "Provides the name of the standing instruction; the name might not necessarily be unique. This field is optional."
        },
        "opAmountCurrencyCode" : {
          "type" : "string",
          "description" : "Specifies the currency of the amount of this occurrence.\r\n\r\nIMPORTANT: this currency will also be the Operation Currency of the generated order.\r\n\r\nThis field is mandatory."
        },
        "opAmountM" : {
          "type" : "number",
          "description" : "Indicates the maximum amount of the generated orders. This field is mandatory."
        },
        "opNatE" : {
          "type" : "string",
          "description" : "Reference to the nature of operation that will be present in the generated order. This field is mandatory.",
          "enum" : [ "<None>", "Buy", "Sell", "Invest", "Withdrawal" ]
        },
        "orderFeeAmtM" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis amount must be used in conjunction with the fee amount currency (order_fee_curr_id).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeCurrCode" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the currency of the negotiated fee amount when the fee set-up (order_fee_e) is defined as 1 (In Amount).\r\n\r\nThis currency must be used in conjunction with the fee amount (order_fee_amt_m).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "orderFeeE" : {
          "type" : "string",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee set-up.\r\n\r\nThe set-up can be either 0 (Not negotiated), 1 (Negotiated in amount) or 2 (Negotiated in percent).\r\n\r\nWhen the set-up is 1 (Negotiated in amount), then the fields order fee amount (order_fee_amt_m) and currency (order_fee_curr_id) must be defined.\r\n\r\nWhen the set-up is 2 (Negotiated in percent), then the field order fee percent(order_fee_p) must be defined.\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management.",
          "enum" : [ "No", "In Amount", "In Percent" ]
        },
        "orderFeeP" : {
          "type" : "number",
          "description" : "For Mutual Fund Systematic Plans, it indicates the negotiated fee percent when the fee set-up (order_fee_e) is defined as 2 (In Percent).\r\n\r\nPlease refer to the Front Office Business Functions user guide (chapter on Event Generation) for more details about Mutual Fund Systematic Plan fee set-up management."
        },
        "paymentOptionE" : {
          "type" : "string",
          "description" : "Indicates the decision of the investor, if  the Fund dividends should be paid out in cash, or re-invested into the fund",
          "enum" : [ "<None>", "Cash Pay-out", "Dividend Re-investment" ]
        },
        "planDefinitionCode" : {
          "type" : "string",
          "description" : "Identifies the plan definition linked to the standing instruction."
        },
        "portfolioCode" : {
          "type" : "string",
          "description" : "Reference to the portfolio of the standing instruction."
        },
        "statusE" : {
          "type" : "string",
          "description" : "Provides the status of the standing instruction and distinguishes between the various stages of the processing of a standing instruction. This field is mandatory.\r\n\r\nBusiness functions take into account only standing instructions from a special stage.\r\nThis stage is defined by system parameter STANDING_INSTRUCTION_STAT_EXEC.",
          "enum" : [ "Cancelled", "Valid For Execution" ]
        },
        "weightP" : {
          "type" : "number",
          "description" : "Provides the weight of the standing instruction."
        }
      }
    },
    "updateStandingInstructionSuccessResponse" : {
      "type" : "object",
      "properties" : {
        "header" : {
          "$ref" : "#/definitions/HeaderCreateResponse"
        },
        "body" : {
          "$ref" : "#/definitions/StandingInstructionWithPermValues"
        }
      }
    }
  }
}